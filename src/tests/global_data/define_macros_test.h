#ifndef DEFINE_MACROS_TEST_H_   /* Include guard */
#define DEFINE_MACROS_TEST_H_

/*
-----------------------------------------------------------------------------------------------------------
Using define statements instead of constants for increased efficiency
-----------------------------------------------------------------------------------------------------------
*/

// Test
#define XCASH_PROOF_OF_STAKE_BLOCK_HEIGHT_TEST XCASH_PROOF_OF_STAKE_BLOCK_HEIGHT_DATA // The block height used for testing
#define TEST_WALLET "XCA1v18Qsf5PKLr8GFr14jHkjgf3mPm1MAVbswBs9QP7FwGTLCE4SwYi81BRp2vrcV12maMtCw9TE1NZRVyynQ3e2c3b7mxRw3" // the wallet used for test
#define RESET_ERROR_MESSAGES \
if (error_message.total != 0) \
{ \
  for (error_message_count = 0; error_message_count < TOTAL_ERROR_MESSAGES; error_message_count++) \
  { \
    memset(error_message.function[error_message_count],0,strlen(error_message.function[error_message_count])); \
    memset(error_message.data[error_message_count],0,strlen(error_message.data[error_message_count])); \
  } \
  error_message.total = 0; \
}

// Blockchain Test
#define NETWORK_BLOCK "0d0da5d5f1e00500000000000000000000000000000000000000000000000000000000000000050000000002b5d9ab0101fff9d8ab0101b2cce199a30202b1ae08c48f3b3e9ba6e22d9fdaf289eda8565179ebff7787883ecaf49f1ebdfba30101159a7ed6a1065b708355d900b06e4e1c47238397723f4d379945b3bcdf10f09702807c424c4f434b434841494e5f52455345525645445f42595445535f53544152547c64656c65676174656e616d65317c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c5843413176313851736635504b4c723847467231346a486b6a6766336d506d314d4156627377427339515037467747544c434534537759693831425270327672635631326d614d744377395445314e5a525679796e51336532633362376d785277337c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c307c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c64656c65676174655f6261636b75705f312c64656c65676174655f6261636b75705f322c64656c65676174655f6261636b75705f332c64656c65676174655f6261636b75705f342c64656c65676174655f6261636b75705f357c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c50729768e95b1257a6db3c68e20985c0766eabaef23a41c05f5c90ca9e2c8e6e6a6348d90370d1eed9607618538ef7da054b01214535ee7124be448176bf12db7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c6a6348d90370d1eed9607618538ef7da054b01214535ee7124be448176bf12db7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030354a4d53546b76686f3978443341634f6470364a79504143396f6738344c5350697578324354375151736a48526a6c557866755455536c5336714f595a774437515a58684753566b623352516332417a355368517971777345616774764972397663675a5633647748446639706f7a5543434f373030386d67713333594861777337503359536e756a74747946536a366a5633374c5a685064384931464a6c594530507347314d4e6934614e4b68485232414f42705467745250696e6d75394f694d344e4448714c4258615148503151384766627057574c4b5268514b72336676536435574e336879335634494d4b4667504774417334383839504771474c4b6f4d46397179674d715a47577a68724755575a6b655368615055473471664543533742367446474a7564755369516376536953584b435234464f697269385449746d795470376e673731774b4977336f434a3964624f35457462547a3943367450756132706d386b6474564a504d56696d546a6c7863514f647a65613061724673737848457451464d4264716459776e46636e4d66546b467152575748464a4e4f326c63316f65707476526b3575476475554e7a42573250444f7a6169374c575a575750613034726a4a42663338676e51524b66444453366669346e664637327254487149434850623953333557654a45504d376734666851414d364f38454f3272696c4b734532694f645533585a5568315157545633786a4475584157417162497a4d5932453447474e787241697a70596c384a637651444e44337833687a4148626d7a4466333951727267784f766c5a74535a4d79716f75677548687a7365507a48397938614f4e6570374562646b443744746a3837426672386b506f6f754f55726151724e7475306f59327136766e414e777749564258544c43363057494965496f746a464c6155783261756c6e5357486575734769396649356e6e4b496e716c767a7a457361436c344c704647596c55507665464c3970556b4275524d4932353572416e7030776a424c4e35785951636b5547545254443069564856737a516e4f657a3334566274764f70534133544b4c70727436556866454f3055627367344d4e755369626a753772345768636b6c43326c4c51716c686a494747304e7a416f526a7753714f4e46477a4c4a4a57397a3549676c556c7371525767736c4547304e314732466a786347384a675347444e66485758536364795a684f384c6a5a707941795a31315971343276447863647a45436b383270707839454631485a55337067536737477531774f7352517668695670654c467438435743747472646d456a344a6679333654486e416d47487373567831714f595141713954466233376956476e6b366c6e72447268734e6f32756c4f52366944354a377a61775a4c45567a58647536714c7a46515267354841656a67627048365a457558596879743256653566616a50414e7666546f4c6974556d7561546f586d474b614e36744452787758774543576856696a597a7138744634384e30386d573169396c685a6f364f48636e6a6976356f44544e5450346d4a315a7a58616d4f696a5a7038646a4d4a6b5953716a4c464b766774386245493074354e7466727a6f674d6d68575851364c796b5361507474554b7254356c494d766c42576f4174344e36764d6e506c306c42437361756d694557737936306172397a656f5a76694470426641676f70704f50494d395355434361307959304f5971516364396b47704c4a4e5157303541464263466a56374d565638494a4b775a305a5a756c7178677668567155305159354b6157795575384643685934647855316c63617a7a6555475a386f4e4e64476e62714a554b4670634d62364f774f464651443565484e4b774d58377059444158533748734455746656705267326b4c494e454d5a4735484376456d6d5a545666574d314d584f6c6a69597a58636c675647484b63416845564a4f3577795141697472556533336e62524b5a555433447179637359685649527a4462566b423444514d464a47534c6e71793539727a70504247444770396c4e6d426f5a5471674d58366361774d42686b346d6349337751656b666e6c67597947646c6e72725a646c3064484146504b785a4c3353354a56664d387151574d6b58587964636c676f396854414b7738356c4a593245764e48374a594d747957666b696951776635516e4e495072787443375867353473574b7270494e434b68305659456633415665627254714e64514b30584456666e7475435a3635796454685a6f6d534d36574e6e45313048487a7675326578677751476c4b7a484c6a4f427631683756324969736f396e796d4179443844656e6559396367786d646b4d59666374313555616f36397a756c5a514d58684f386a44366d4a72774b43387848385179327977657577444f4873736964795763466e3650566e39765036536b3277485555335965707051567457624d794b796e643058527151644e7349316e4a3032454a4a4e4837476271726330504b6e304e644e74747477354b325758414b50326a6f46506b635179725470347443553544786f56514951714241645a39515267356e56646e4342436c517743674e53516c62577438695977446b51486a6a437777415461304a59345365633850564d3055796852473562616452466e5a364a6c77716c6b583765476268435230654649444e7039476f374b3642565678753454496634776436326362735231776e795a593344504a767a5239326c3472787952446d6c43325043595974686c486e74776755624e674175647347374833756f7647785678616e6c5a477338624672784a63796e6757466a636265483377556f3366396f676b7a35515133536a6964546941346f6b7853774a7a4b745a6337767a57373839416a3257643570384f5976714c306e554a487438684c586847684773654373444c6b704d64434b517133343255684d724f346e54463830626677726959484c7851596154724b7a464374786d79384261324f54764b5346547372797a4d446b58454f6d6749696a537a78715062575573636a6a32314f4a68333745467a4f71337443395a4b6a463845564e46477658494334797347377a7a33343471476c6a584e684c6d6f676b5330566c776537344831725a796d6d566667556e79324f75365161674569695434794a6d5842364a6f4135664236664d335a597050414b4d674951495258734a6c5a54367150464564414843764d666f7a334466746250794b763670676d577162466d736953556c67734c42325150734868765a69614d787546584f6a7a38727048475731357844347a384b665356325958593138796f73313935617933714f795779715254544b67506b6d7935656b5130624f6f7136677031654f53757166654d76557663754253454c657a516f64476e5254444c5852425a3768536b7431506f766e456d447052567530724643397359695436384a336a48385a50705175443949366c626c3358445263386a3972366838306647526d644e6253305061734f496f304978527430797658477465414161714547374f48494f6e79746f4f6a7943454c35665256634b67714632337a5a39585553556d6633395771464141313332435737694838534f6d6d45664a7464776254656d5a366c4c6d4f624b463243364e79636b75555745346f4942494a564873305468553551364a5146644735376a425a4868324c526a6c5138774273586375757672494c574274725a395576356a6943716162356a6d4d664764777265514d7a386938534a7339787254536b31594b685a4c6436564e6170517748556368693870675157794f684f7858596f4d7a7542387643656b7a4f5a3439464443697161425a367944475137346c62513845796774306b42705a716857554a6e325a6e744d6850664e76624648636a4646484b597855704c484453736e72466467517751586255797654333256627671493563344f72466a566e4d6d5a4b5479353754703344324b6378394f6c4d5733725a706f755434624f466e4266355a61324a6e55616473634172514b3141446a7052784979714a63565644595172584759617159654a59435943615132435a676a6b4f48796c486a3638384b7056626e5230364a41696f42764a743752725461333950505844764a6f4c49523948324f77586e5735436e6f39486d525933505132757450584f6d397054526d7148304d7563796f434b4342664d69314458487768596233436d32513548306c66525778546b42743562654653544c6e34625831446f716548754a776f70715a524966707a474973484e58717578426f796d665a417532354f4273325147527665574b4271685256554639653241726f4d7565614f363671786d69625358775648346b586232485476474b7945393358427856595838487874714f7a7550647131426c357830755974326b5632634a747873686a714f474a336b376c59387a507a4b4c56423348535751434d5139336472386d494c5266455a61504e396574794d32686456505546766d66626c3859575158754b587574583751564d776833344b6d6b52703767435846304d3650794d41516b6c384438356b524845597a78784c486331436974704e693248586f686e33727931547556316371765950516c726e6e6950757a333748544473354b445932316d7a31524d616b6a4a56725252676874614d47443756586350444f647642414830726d4170774a5766314556354c63336c487769736869354b5738336e7a42624f4e413238394f625969555452584d33733639496369454b3241456758336843474673436959626a6238343848446f62656146546f4b743469387949527145364330504a504f53514b4b4d6965596867594e30636e6a357466743156497452616b754a583771424830644e323256394f7958524a344d32373355537a6278416c5137384e6e78696350376e6d576a647a564435365778615549425765743671696564694a386c454f6752593030306e4b74684564454357613347656b43757347767a65734949364d6e534163494f4d3056653170474e6f7a6b734b4d4c3068366e6c6f56546976365a573678505673524f58416656367857326a52766e51473347676f4738624368525562774675646868436d3079484d6f51724a32376556436939386738416c50696d394f4762564c4236415844616269734c616e50565058534c3151616375696d72575273477152543770736233366351715470625a6b6561437a476f6f506f6e51374d753367643076765a6d705a31464a6545796f49784f3531326b4566766c61364633634853763246486976774c3242676f504d4a7549426b51356e39656f354b66376658733772596446307265483574596c304b304762427a4365455a704f68464b50535861354d4456314871585a66364e50586a516d47686f6136445062386e4f4f624d4b4c6676424c4d6d4150696273356c3668506476513757743655454a7a466c37667073473032536f6330795570654b74565262414d616371466b7243437045624761794c6d376e6e594a37624c4673786d7458587258625536746e794952796353554e34535a68457764463849587454656545763246665757716b743849764f74374739574d44675038636c7756305567343836623847426a4358595256573171545875685865423037456c517335576d34516c326e4e395079587569486c776f365176545357494e6f5475474d6551475632783846754c316933394e65743238386e5051386e736d344b52484f786234434e4e6a486e3674537769485034776a76594a39486c4731444958694f676367544e6e70306a4948464f656b497a72316c305a536174484232754a45424a49696e5678623435497a4b4c4967615a386c5158314f657a6636544d41696c387279524f796967466f4a617a6474484e704266327a3646724658496d715969645451707058745462325279333836486f784d67554a4a396577496f4b77774f666331735a6b625a63526e36506842334364376d4b486b4d33533043636b67666e357861667858666339674d32506a736d33746c55346575767a3337594b53694d4546396461414a43456c736b764c756d324634574b6d6837676457515632716e797071794e58596839677273504c4348667774504a7a4d504377746c70487a4e574e39784258457931554f487462777178766f6937597234514f666576346e5152534371514b5177774e756d4d4f4438395265374677316a38366f74597a384768415557397967743979474c633948634f4d37683659723453466c48346a623949545446685959676d755070726e70355871783649364c744f553847354b345934585863443178464c34574552376b506e484b54446a636733384d594a464c42717745546e316d585637724334436767394f5a425830464f596842784b63585a7972494a69567733514d754b63795162634541587541446473354d6c6d397a53346c7749753032634e55585a74486177503952527a6a555065765970736d376d78735550694b515675424b4f364c384c4b4f723758624d5a7542654d4e63576173454f4165756c7a5455625076396f334c46307746436d5a3368376b6d6d6a78785a364d4d4d5446633743416e637472506b4e445a67564c6e51547a3232556e50525a7372475874446e534f716235336d4878394e674b5957746c4e6a3630594c4f65326b5a6a4d64316f7233696b64504863714e4d6379336e62616a52463849644b6f545736726d345056626836514977384b584d4543727a70546753504d567030443955556b4e78354f435a75626c714c3730647a66434d5a47754569655337485052705a754d53376649706552474e4f77516341684f704e395257627a52447577766255364c6b664350345755764349594742335a3836586f396e6d4c4f473561465034675961474232736c6c5355376f6c596268555a775561477450636f4e4634484c5146666876777345656142726b71737261664e53676a62546a71754f695a4e454c45676f506e355a55326849665474783658537371565539683330736c4255573559614961337755564471596d4b6b6776327a4c4e684b556179616a5853335148336f46564970456146746b64447277764f3736564652553150334f795875334f487271416a754773494d326268566b464d6379685068726c445a436a717675664b494454303939774b5a78524b486b6c4b4773704d4a796679596d4d6845505361697a31667a6e506f4a775a6745614f6271314e5a70516c6430586a754331754b716a504e47426e6b656c7352577a4970686d3746624f524c486e4c6f646a6b39785773316c4462714e72357a51434f564f4a714f6f376e546b58376d36696c7232436a64336b7247416e34674e493272676733756366646d3238775965476536366e385a76707756777778654164485133576a35385364426c41514d31506d416d70724c483365326e7a364e434272776e7a706a68744a74527035493467386676704f3067535373674e3547656c30714b677a52783838636d324b6738486a725558685a455968497a6365446d34646a3743443832586d685343766a3158746576715452773841446f4e54794657494370397966584b6d4661464d327234364d6b5173464d53385974506e5742546d4f534c52466a32386b784a614f4436704c4b48676c6e633948526d72683345544d556a4d436f64534f58627364355775446e5a544a677763417a466e4c494d78745537543861424d564135577450675732334541383043796e364d5a456d6b58366845336636463075794d4f6551793448327546515632345243526c4f31374a367a4139747079684d4f444e74526d596f6f3947696644455a4b437a4c38326333765853496c5a6c59715766363633696b324e71356755544f6c677168387138726452307045396256546750513958595a416654465a416a38477866434f6553505447346e4635366d634a56786f486b36614245335a387349466834685037425130356e4e77344377446c545153314d5173674a66635a4d493647504a42656f726142337576745157457a436b716630486a7a4b6d6f6d5569517851684234787a7471544f4a7a796257316c64794b71575145753978383951746577484742646d716b7a42514e416463417341384a6b4f62434f79414c63545079706c597376634355446a78336b787442567038333239764776566679445555533349386f4c79386546743651516e6642446475766150427767676d5347506c426a343639484575463877684f416b5549486d4e46796332466a636c4e527865597039585844677341414165304957776738384c786142306a4262566a7958374d57547a6f5a504f706451644d4379514277705777504b45674c6e614c7049756844745562344f4e6c495a355a5064425636784679587741797a79374f347355784a45784368614e4e59474144495a6f456d533237637274425070654b4657356571734576726736644d78476b6d544d787a467342554d31783135377752315756766268716d465a547a4643385945364c307668584d614956594f4d45677970427a75524c5a45756d385569576d657662414359614175547038765263523444676f6951634c386d4a52767433784f34566651564639465337597a614774424b47497172526f354c6e30784b41625263764a6952343936646e6a52535635553678706c6442684f5035396e76613477774445627842357a4d6365745837625275713378536161763337497036444a7334647273446b50666d547939517852384f4975754773507a6f545730346d7866326d54544f44545848544b387777654a4242715845787951676947387534656e655834546f4c45567466535042576e306e424e50593976326930314355334e594f46463368384d7964756445676f73735134354333707639666b415839794747426367436c65474e66636a7659377048514f664e744d4f6a4b44394a31446471456853506c6f71716f7a4b63775a4862444d4d566e71345852317547767657584145434c51525a34677a35427043415164634271717662386c7443454d70726369776e475743394d4a33506a6c4257484d4c6969424f59494e37705a7961544575346166773850365a76666257304777424f4531727378346f4e554d4c42673676656251614f4d3039505a5444766633384b55703068686353314f7571536f4b567071565541586f59796c4563626b6f4a646f6d65724934376d38766550436c4a73697353354746725039724f6b446c6c53766e3732663465656e6a524e736f3679474d7361684a4e6831727075417961574b384f503051526358794e654e4a43686d55677273545859586e6d564e76743968476a4a7a75555269614a46534a62674e30584239496e57567a4677565974307444785356687a3368397758477832696c4e4a6a6c5735356b7a72336e4c544563676e566c4d4d744a38656775346f4448564d5246474d5035314a58346b6f70347a55746e47703778703967424575794b71596d563650674c7034447867537344424a5137574c73624b79416454574e394b595346445a6553524865586e77714f35354d52473451667265693830543579484e31394335506a4154344f64534a534d6d30577937707264314d393831414364596e58704e314f7670674e375075495a6b736e664846677966677736455937743955494c4a6b3459714955343073543849376466416b42446f597a534b7562496448684d51624236486c30784249763967546e4c6d4875436d56736d6d4f6f6a6633584a37754a6f5337344c4f4a3853716c7444524e3533776c664a587353326a447a6859377445326d664756646f616e46423467775643465a6273685269716a48783545527a773143304d45634b5248624a4e4e4e545751586242634574577567363073466d353168397250566d6d66546551755644394a43794a3653746f597063665470384b75375a3953396c57526f4339393338477478666e6477435a4d4532745230336359513945506a717778527775497331326c314c7975646e734176364c754a4b626d627438523866653948387256546d34495673315a466a703064306b4e796a587a4455664258687a73664f65583038744c726b7957734c4e764256365835536c7743715670766b497a594d6d4d4b446d5a4d4b4d7855583852357447543153374e4e4256514172476136396b674c6a305952416a426e67696a7a503072765732366c4e4b4c33684c586556335033524349684c39755267426856717765636f386e304957524e7945526876763861584566774578634b5a68716c4874303048775046476b326c747369595167644a694f34477058563939396b457361735875387431676a617a7a676f666b704e723146586774486471476e54586c624b4739317667387446787a52424934655a56484d31306a34665166594472586278584a6f49344a504e4a6e334658396e35525631496e3265554e61466e36634a524b5671457535683368397834384b5a4e744f6c45476e6e686d537667533459735063563835305a635a6d3558565379637849483156553935417561696d597a5a596b583470695361547448647267545a6d74666130716d507a4751777148666a6c4462794b547774623375733965676a766c686b7a745a5759476965646c6c6d4d6e496d3634453757596f563275336d44617730736c4d6750536b513176304447775142706b7949793876714c754d6c505866694a6671616c65765052684c524a61336a566850686662794f7438303756336673377674697a4d566654775571774e7a6955657058644c43784a7175746a784c675332706645386b6c763242524530586d336461364d417444486b72456f6a696a6f32487256654f45635352314a694845496b3976654f5a4a596764636e6b6b426350515654756e5663344c4d62676548716232735052324456334438644e786573655a627762567a357739364162445063773750625a6958524c54795a4b31386d754558497575676b566461505131347077694d386a506a3144485065794e6f5266636e417573496676495539784d7055535a515a455a523675773851376d78646d4c424733394c6d46756c3134794c4e6e70435165684d77424b637a5541765545574b6f5a4f466b314d41447271726d4a5569613042304455665a4655696e6d35584153423331714470535646393564546264484333396d3859505137323030507147656a78744c4d62776761726a52716b7054646d333961484e357844546254716d356c4f6a4978423279323550426a4c644c414f395630744446786f334f6166486a52515166664944354467774d50786c663969305a43727558466c7a4572374e364c7462525a434b734735326c736270736b64664b767978594a577359543456766c5745544255534332434e6a6a674a3441446a385279454542535564354f39676a455a4b6f496467385170665557616b716a6835464a7a35706a3869563770354265444e4b4755496c374f33554f63385668336f51736a357a66626a6471634374466733615954374c55426e55324d346e6e50563877545a653051613738734b777a6947363043464b33537354756d34463251456d7a72717137716c3447546f3532565a536c757163634956755451304c757558544a623747726a4157324e50537946414858514a306e6a5a656875767749746c5a714475746d4b6f4647316e35314267496e67427470707676485152673730356f7570464530543975496d6f414d75385a4178694f4d44396b69516f66456a72597857716c447146614152416362773141523965734264434852725a506a565658616433415939747344705572614f58534b4b324830476c525839753655675553684c6a354a436c63503675504966776a506f4f4453306c475a444348486b714f577a48765a547646504e696e534575795137317a5861354b4376683947795344467262776a655a4e7045303545777179553765684974334551503678624f3046335a3163334f4f696a45654c5973374a6e624f56764670626c6a776b566d504f394550326a74627156645a4a745767475953716a6f4469784e464877506c62505032534b7a5371364746586958674730526265524d4f765456744464733038375351486678586331715839653144324743346e65494758745a6f7768657663563948307573306c4a4c694c434a423862766d6532535a6c4765474e695a5133576c53684549316f6d445967457661316538664555447a4c7836486568784b4532697538376d6b6a4e377169737137786e615a37456f475a6a6534717a4353724b646f496e7950307433384d6b3337763457737761576c683064796e4467466368544975666e6c7a686837367146583872634f3141436f304d315533364e7056643550515638795173764b47597843647867345848684f6a38776334377250616c73513671654b47786b636a46456b324a6450676b7270694c71614a484f4851366d4d6e6f6d544b7555525a6d327552416b556272356c4d6830433465394f44684a67426d7264476c4666364c794e6249796158746a7879395a746558354634444a744e30776a62307037424c4a436a3542366d4b744c4b67324d315668566f516331477a62466e6f424f5861653633463050683874734448765434696c333744796a57774972574a486a4f54796e5455303051686a6a4f43304749617a4644584d6f696b443452626277537a4a4368797159467a356930554f795565326c5a457a374e33317532314f4b716d63774b746b6451646c33475077777939654b635277356c4252466c62646578394762626274695264396d52754964744b4c76723870427836364735394a7336667237674964564d6437727647754f67363877326e5870685257634f74754b794b464367496e514a6c3734507348304371547245424f56366e79474853596670327a687666466c3665514a48637a3974677258483547426934354e4e5552304b6735356a41666644564d615839386566705a4b697662706f34305a4f4850704e496955376e5a4138427955417757464c4d646430416b586d687944516c76576761316f427572746d654a794d746c5668525735663753706367515170634476617349424c5a555832736a454a756e4f39614a643572733777394e4c3965373978464238736a546b7a324d396d594e6b576c6e5243444d4e594e64673441544f6f75506c4f3047304a306d6a5752433279427a4a39526c58756d31704d4b31593447374775457734734862636f42354b30736b3039744c7346444666627733343130416a7356624c73614e45434763715a6d6757445165386a4a64594248466d34786e636e594367617379536e3571714c495734327276575932497078647a737a4b754d795651796466666f387443485a704352475643754c384a386138717a484a39357551737854784b524f63704472506b59794b67374a51354a4d6b3631764732355a6e6a446a6654677145766378766d5a4374596e75774a4557637569496b6276786b574671464c45393448757152695162363276727a5a647a686c37736d714e7663694a485564454d4959307136487233784b6b557a6c6a467865584875416651763545514c72693971504b5165546b486b636f635845786f3048526a32575a6c51745a72493870584c584450484c6b504c79517931644b504c725942634c4e5332433741796b6c37384d4e446e5669596b596b3930534f423841326162465133364e7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cd74288d087096fa6fabc20ba83244dee39517a723cde9d7d4efc7111613ce9590b6232e79736660ec90d6e40e325e06ee630f753a6b3c540077ae0564cd590339230e8ae8fc6bf801e73e232ce1fe6007c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cd65cd4647f61953d6fa26fd80d1646ec96822abb5d3a87bcf84fc33daf32c0754932b5ec9abcbda86a053ce11508c08281a2fa386ed87edbd442d71934a6450d7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c747275657c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c747275657c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477caa41923155c25d42474938bfbafb679230db914cd1dc0acc9bedc7b6edd6579730937f955e0b9aa2f34175644bb8757d2ea9824d6dbb720ddf776c3b79a9b5e47c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c8dd1395dda2041ea2b2c49b4dd9a1b631daf92c42b935bdf2915e6fdd0fde6dcd0b093749bdf2c6f29cb9c1faee7c584db36a23eee203eea6c8c4dd08abf08c27c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c324fdd1a8410265df339cade61d5fb0bac0e0a7ba62ed2b215e355051caed3cced9973057d63c20e99d585e64df30ea054876642a13b7252b5b5980ebc22d9e87c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c2093cdceb47fbe732d66033ca28703c67c98a04d8ccca2d7e7c763c9b5e13cd41726a5bde9805abb298f21e36b3939a1bd615f7357df92579748d683c9041fd17c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c95ba6e79ad687a54a020f802fdb397fb02b665aa65e52f801e1906d3f755e58c20721d4f35888c66b1a3ffae8707359ebf5a6fc364b7c7e372c38010bc5fe9ec7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cf886ff90b2250fd7f99d6b64c5cc7394f5d19a3223b9b4916401d046d60e97ce7690af0ac5991ea4a074ceb153422643c8aca58bc6abf43f9123d3a5c1761b337c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c8f9838bb7d19fa3172272e3d3b2822c3b34e9cadc0ae08c7f4cb0faf3a2fb8c8f7399437740690dd9dcdee87f324e752829716b211c773b2d75a28833e14bb037c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c809f7270d4451e20d8adbe540219e3450e7fb029562b2e62dfcf1c3d46faa4c696c2d06084e41ffb104548fcff856b7b5a5a3e4ee16cc07c4a58ccec28fe08f57c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cf5f85b3c75a56bdac96c9c5d79d7243109aecae9567956b787bea5aaef46a4643541e7e48768b2e13d606b3ddceb3460c920d35786237f62ba7c6183988b9d277c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c4cdd5a16d093573f8429911bfa281e70680ed4655c37d25de564035f714caf3ccadf12dae7cda45c0c55ce211bd88284ed80f8517e9ec2e50336d5825d7bdf577c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c9c014bf009e3cb77470f592e79f124a4e6182f4068feb1b127f85fad6f83d20bb9993e486ae271791437482d2435d4e33534c74ddfea4a995f33d5178c7659fc7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cfcf28ee3beaf4ffdbdb5a5a22bcb0c039d4d014c5e2699de50d125ba8db6bf896769b99b36be09e601189d456a4bd79447cf41d5facf4a6e71f853e9cfbef16f7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cbea74e82df4d0d15c29163e69c898a1e97d1a5d5687acc87084ed1a12a25f8681faa209764502353955819dcb33ef0469572445be6fe2db9390d1ac5816f4e757c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c8cc909ca4b82294baa3aad94f9cf9fe692f8547d76b68bd54efebb852c438137f5f4a0e2274ed331b5a111cb08980d85cf509b7db465f75187086714599236787c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c5f95ab231fda7460bc306c78a88d42055cc829f469b8f235617cbd253f3fa61ef341d693a057bea696c2fcf1e96b96365d1eeaaaf80589365a2408cf40d0022c7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c60d8e766b8c85ce260290dc21c25fa37780d3978bba0bde63d2e2ecf5be2663ae957fb6923489cd7f814e4c4d012113abd23e59f3f81ae6028049478ffcbf4057c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c78b2c366b9f94b1d76610828a146be686193bf2fdc94ed080ca6a13e7633146df983b8197e56946a05785c01d8475e2adb1b49c0381b13ed30396551201a7b357c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477ceff7ed59fd7b719a5b75141d7c3fc2a4fdf1ab714583c9c47e914a8d9f4e578fc023317a583604d29341143b40423f56dbf8ff80f04297a24ff09006308c0ade7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c5d40e99ff86d1d88983d8481ab830b581c28f8706894776d746f3ba250ae842d07dd462fd6eb6ed1952719b7cfb7831128b75b0c5f3690e3cbb073842ff43dcf7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cabe893fc2ec13815f7013831de4862c9676cef5c7eaf6f76d156fb079f1b65c975eebc475adaade59a2fb6e70cbe285e7c8417c41720ca0a3c4083e2e1464a947c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477ca1e98624e5901d4b28b9a951a2c1fdf6a1f6525f23e8773370d81bcfae4eb05038d05eff128133653d16fb2b2b57263a71df0d227acc0f17c87d06ff66086e957c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c2637e8487284ce518a6b8348ef1f01602b4f5afd7dc99ca3cf444a277309701968e9ee341d5c97e1d8951a9f5a623a31fb4abcc1b653257d2d678f5e0483e0ff7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477ca264d37fc2a5b2e3bd360562fdaef7a239a50621031155c1e99872e88a52642c1148cce4b390feb64466749e8d68df0da6c7d411b4bf4393f8258e6081a6dac57c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c842798c4d5fbe6f082f6a4de47d517d6b7fd3e567e8c4452813df9658993a38c6346fc0de96ff7f56a8050d2069b47943992f5d76007c5fbae9a1c1da133e1527c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c4459a84aaee5cd7da6f448ece69e7c1c8e55838c7da0ac0c2fc1e1764f173b120eece921c589e4e3dd3ec4b054a835313698aab431ca1dc56a3dfa1386c162337c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c5b15634311698aabaad8834053d56eab90b9701575c8ff05cb51282bcd4335a76a399375e4debfe259731e0872e6c22a5472a9299d5276ddf5837d0c615176387c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c7e710a8edc28c1197827da8641a0db98b252db83917cbae640950656cf957c4d0c6e38c8bf1b1a183a18119122b1e32daa32db512b46eac72942f35802f5d3e47c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c10a48808a8cffd11c2c65007c757fdcb539ea3c8acb1b539619e31fb321ac141419d0dfdec6ca73df3e6b9b7eb419358ad480a8259b95f8406297d397bf09ac37c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477ccb5dbab864ec23e527049d1c7e7b34f14e776a5f1b8e3b1844b3ad51b360f3fdf9e5adb17f2562830372a261a8ec66f21ef336ae7b59586311a151f7d85f69847c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c126bf372eeea825ca744e7f0555048e99861e213240187724065e6bb38f093c9328642cd32cbd97a7f7e3c91f09a3e8bb71e152902eb23bcdf14675f897915cc7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c540501eaf0ae87d20fd6c9a426f57ab7b3fd309e5528616d0e2e709c23c030f5552dac020558f9427e0322cb79acc6a7d4a38b377571d280aa31b2e1a932f1a67c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cb77d2ecd0fd13bd3f6090f3011b0741b32e2dfa941d5dfc7b9c88d7ab8910e70bf618d0d6b66d1a821adf4d36f6058e720f0c172bccec3ebd59fc9188a6575da7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c546e20e2a0e0aa0de3b439ad4682a26e7cecc536f177cb03b891ae5cec7921403d2e3f2a879d1b5d13aefcdcf8348b96452e6756de0a551520897bf48b93c6b27c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cfd97230150a97de7ddaed13c42fb8c640926f1f64fbde5870332737d58fe7f560f2073a1e2221d57ffe51fee52c97a8cd7d0da2e98967dab440358d819d09fc77c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c78393de0d93e83d2f94e218302bd5231cdb53c76cecfb62b06b824ada42b6e9b51b25559aebd26241c12e7505a83486c3627f66531bd966abd8d0f14ddaccee07c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477ccfa9c7653e5ca7b59c7d48b59ffc8aed5d346ca1714a6f1c19148626c2824b11612f8dc71f4bf7707b0acdc3a0c8af9f53128e5146505e39628583099d8615147c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c9a6c9cf6ca333e5c826bb0e7e81faebc1a3370371891d40b576633ddc74fdf610466cab2eec90fdcdad82108a6d03b5b962fc24099b8c65187246e4c9057be167c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c0f429799bf355c5557b5ad6725c4e8a24a26fa688430a63875bf49d831f4763f9964eb4e7e059e0dc2964aefbc6b0a4a4df66b0ef4734902413512d17b090be97c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477ce5608e5c3182aacda6dfc6ece03d8edd20ceab5ef3b6a3fa91338bb612c19876443ed66d32ca047bc2eddfb75645a5ca9e6b1a97432ac1a6d0a070a673eae4737c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c065d01ed1aec41406c14101a6b8032c699223318687acf7a09bd1c997f0f85848446432c24496672949fe8f8d6c74f51bf57b0b359594f81f28e856d7fea21e37c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cf531ab0c780950d1f787e478e24e5a09b52abe59f3d5fbc48a649a1dcaa491bfcb5be21662bae3871e4a41d9ac5710843705e24b08b1576c0d46943a5c3c77147c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cbf55a058ea8bba51a799cf4e1e8255b011f4d5bbaeb25543c36bbd4d4f43b10e8a300d99d414e65c4d20b031a9b40c67028c3b48f3a4a37a6fd64cc8c6c63a6d7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cfe0fa669eb9d3ed9ef94ad08b1f2a61df3f31b496630bd807be92b97c4ea7242a55293b9b3a65b546bc5f5bbabe0e2be4acb5426ef7d98ec3d57c56fb6321a927c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cd6f31f0bc1a1395385a40d60f48005513a2d8a5bd85c79c8f9bee7778c8828e1b493acef89701e6dcd5d7a9aacdc21523eb40858e018c3b955fe5b6fdc371c407c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cecc3af422a4c52fbb9964f27641639533954e61ae6a5bf4192f91e6d7c5b7f6977fe85fdc02638946ea11fdd84cebdb122a716d9e0b3bf7a9b1611414f6792de7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cada4f12bd80e320ae1a565e14fbac3b76cb307c95b3c9d4b76e23d988ae5c6b683638414bb2232505c689f3f7b2bbc6a92792404402dd9d092126caf5441a51e7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c83ffb5a862d68ca4522b09e3da8ce1bc2406add791ee777d4c0c9e6ede5f6961de4126d97a1116162ba90921d926030b2dcd3b23a62379c38247018e685f35637c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c50729768e95b1257a6db3c68e20985c0766eabaef23a41c05f5c90ca9e2c8e6e6a6348d90370d1eed9607618538ef7da054b01214535ee7124be448176bf12db7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c32865e2d9016299b089a27f53e39d2efb4ce7dfc04addb9464dc2fa32cefabdd82bf6288af7e62bd44038e38e45f87e462b2af9eb3a2ecc551f7cf8c49b2e2277c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477ce253b1ed6ddd95738991d8e01cbc6f04a199c6aa6fcea85dfdf1d8bafa088adc7531938049f00b8e9c190b4742e0c382106080bba4edd9c20def4071970991b37c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c705fe66426549c9e99a399ceeeb733539876fc90c01e0297c309c9c2d985a6c8a49f249e3fc327cb6d80f777da90d3d5dfbc2664df4268143d42ca4b3c37d93c7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cbbb808426e42564757e4e9df1c19f93edac8d57948f4e0be0d0e1b185915b3947d8199dc289149775758f75de6ac2de7b91b664a99acbe2a092e3e6bd49289a47c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cd60ba44c2da22211854a721f7afe2129f1c9631e314e8881d46db81f867e505c5097b01869d40c24f64a5ff014db088c99fbb9603956070448d48642c05c0e377c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cebdf5c54727a0b552cb19c339529d788b04f900754b4cdfc821a043c156ce7ff4eaee511d49f0d861281f3917173a4d84341568afadaea3da5e725ac2745d18b7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cac81b7dadea7873af6efab69c01ed0136a8aa9eded58821744d720a04b3391f6af141ac3c43b13bf9ec66b439e1846d3d7d51618bba39546631ca780506de36c7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc76725ac66c01c6fe1b9c2f118f6d9dde8d852127b6efc425d7b7e5c4cd77014227694d64606be78f9a9268da82c38aaa1a5e3d9358c7a305264153fc1c909c77c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cdae2df893be2526e4380dfd8a5b20c743f531de28dbc923c6e9725a4e9e75a43abe818088b0a41abc5982ff885578a531342acc2a628e1ae043d318425dc6d6f7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cea42402a949afd5528f5d28c321bf908a4bc758b88db45d268ff5dca8006226bdeb862d78244d1bddf6b3aefaedff950532d8dd255552fc0e9d4dc3835bd09287c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c717a4c1fabac77eb4fdb6cfa353abd3ec5200ecd2fc230dfbe293a3f725530e2e583e269f759dc07ad2b52d61612bbc9307cc08c7bfb0b02bdc04151c36f66fe7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cfcb7f671031fcfa17be1622320d762e1d1a736dd568439337c1c81cb62fd7fdd2a62a0c3bc91fa2bc017859645b05fdfad43f9c0a62c1175f011a2ddca29616c7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477ca36d6cbe5a2526957911d0a50bc31e512170a2630eb986c304792b253d7b145f849fda1a1b6026a872a18a670a973fc6c8ebe45a6a1a5effd5c501e097b588eb7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cccbb3d1635a2f6655bbc96d1c14f752195ada395a18b0cd28137e06ef5ad914168768d07da3884c1deeacca28892be9f88e0dc29d0f87da09898e0011d267ea07c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477ca745a239baec0408dd41ba01cbe66c4e216e566c481cdb7ebecee876112bfc38d3cf145bf976618db990c33bb76f51bc4afd11e7183965ecb814016d772afba97c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cd16a6f957f5d0cb9cf74b7a1d4368733ac06fa083143b3d292b6a416a3532b7417da9f9e3f03f627e55d202024b6f3115a3a165c1e235015bb8f6da1758fdc3f7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c9f4cd203b4aa1f386663dc176f6c80b3c29ec4ce8c09aa5c248a27739498c6b393686a2f1934f6b5ea2629b83c9155345ca93a8b9d4d4b282fe7b9a4c09862417c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c17d8645063e202c5be051c9c3e884befd222ff318ded21ab1d39ce87d01ef4e6dc1c875e69cc37fd0e34be64a4fd92ed483ceb0ccac4cfaa10887336522fdf827c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c6f49c60479d87901fd4fc3f48f169eeee616ef2bc233cd764f913631f03e64de04a868c440a37ddcb2942d0402fc22098742d09fe9a7e5fcee37ec885de8ceb07c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cff28364846c15cb373e181313e75ad4d212ca0c8e005915951498958be3bebbdc8f3104d9e6e2afcea2f7bb478f6208873de13e6a58d6a8f99a8f0c682a76c377c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477ce5145950154dc48a139ddc6116f8fd449d76425e9869396cf2cf7dbda339840836aa3f8d7ad3ef91ea898c4e4f10fc935186d4ec63d1432940cd05c7fbe048da7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cdf7c807b674ef4bc525b4e43d2d592eb7e7cb52f627353ae38321ef4bc8b841bd8b2edda01e597592052506299af9be1d37138825ac2e075fde15ab08267416c7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cbfc601565a77b1bb8fc9274fdc9cc029180a5ec6f5a1a4fe9290381ad8738b17e583e63bb39e6d588f87cd650eb7e4d7c8c8f19b3fdf1158c7761ef5d2fad6d27c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c4d3156e48c03300c305575496f32db1a3987269dc1d57c1825fbff214690a3120fb8294329744758fa467f74c064901f3daf4b2675c8e250e870a533fac495407c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c9712e616c11849095a830ffc57cbcbec5f8d6f07ce9323add389bd6f8cb680a29b20d2a9fb34341948b8e8840879d659632aee18bdc27e3181b4f257630443fd7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c1ae7fbd2699cb2e983609bfdd246fe2a81fe4654033dc732e9446931318888ca0935fd8cd4b9db46215df9c4b80d596f4a94e4930cc0d104611a0780f45bb68d7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c8e1d81e0cb147c2d047a2dc3f8f30cc392d8134b57a3e6fba3b2da1618524025815a84e0c8774e3aecb0d4c40fe509dbedb7f57c54c1e7f971c4a2747586fa7e7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c0ed601561370a6a089fac4aa276819f696cc94edd2f7505e87dba560035d048ff41b2273c390e98c92ae4f22a80a50c11bc8d3e2945e4b7f5db448420dbfe3877c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c9e2c191bd0de7c79114cd93fe51bca02efedff66e69792fd3588e208d0cc216ed9a29198c006d593822b284b92c75dd8737f6f626f3b9043a1eb9754c5f117087c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c035c662cea91fc16d08f93aae42c3679de94aa333623cdf7050cc03760f76462540935942b5ba09215dd72cd70bf6f1abdf197fcc59d94e208d6f4a830f1df367c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c6d5e746c01836bf3d384d38307de7f3a583d25b593c6d43af0d7f3b1bc8e692952d25ee4ce9e856aabb9cd86e7c216f79652d090aa5dad113103436c911067fe7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c9a9d7cba9e86e0a621fd19e592a0c1dbd87b050d124c6eae558f0f315deece7633f5d8ff0f84350c18fa9f6e0f8626d8532af913f57dc2ae406bde35e14317af7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c15e5d09c9887aee354d9c1a1bd7bc6aa2caaf9a08f78722c7b8268fe84b84f19f40a207cf108ba60164b5f78cafac7011e8aaf05441e14fe84c0b996b73c340f7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c34216e260d73228966312f636b0ef814b3b5d5a82d9342894bf8a9af64cd889773c8fa4e0ae3425245ccd7208856c94c02f54c065d803eca9ce27c034ad8994d7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c03a9f1f5e2c7550b637c02daf2ba07c67137b1121f381187cd55755babc9cd2d540cd998dba56754cea1e032f486460ae1ce4e7dfb5a414bb2ff5fb3460f54e97c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c5a84cbf22ee03bfbf4778952fb9be47d75ab65048525091e70ba41413fbec398a096cbe8f24f602f9df753ee289c3d505e56489f1b7314ceaf8726842ff1a7787c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc05f218fe8fab18051e8bda87a5b0eca8448fb25db70e9e54b0f8c9bbc3c5d7c78e73e7b50141515d0dd52a395d239e3bb2b92e7adf8ae497087102b3aea19c87c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c6bdf05e7b00d1b5670c8b1708e9336ef15fafb6c337ba9cbd35abde8823c236d3878fc828b2b7879a9353af19ba7a144d671411aeeeac3a94c56ade9bed1d6427c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c6e8506fd1a27e3ed31612f09e8833cb667afc63ccd4e87e89e75aa5363a829d023e76ffed8469dfb4945606d5f1dadef49f3d34fd43cc39b8118dea6b45c14f47c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cec4af60ab9fad68d2d48b91220fdb28bb68fdb150a10efd1cf4ce60b83f6e1ee56f6805c9411c390126c277317b80e8125f001979352028354d399d054d195307c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c75b2da64e17d260b4787c6bc61be505a694181c6d05b3aaf2bfb05a914449708309b4951ab5f42bf1dd86f3a43e07093c8cd59826683fa087d4e1d37c855077d7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cd1c6c593dff6282bf10f77c615f0c138ebaa7a63da206cb0e10a76d1ae05e080606b0881ebf2b2f3ffb76a36255b1236b4521bbbb3e9ffea64ed1efdc0365a587c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cb5caf865a97afb2c2536dcfda9e67899d30c4081e3dd2b26f7b00d418a89bc3fab9a92bb1cb8d687a154d42559a6e4d9fdff66038b7c83c5025cc6c32dd5ab3f7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c69a0c756b54b2544cda71d888fee6235616e7dd8c95479507716fe1eb0f0269827ad077327a64402ec370822b8a1e7309711b2711ba5086085867480daabc8b77c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c23c97f8b448212d367906ff427e0ee4869aa62e62ed4dc978e3b71c2a7592dca2e8e36a90f9a4a1993e001dc6ac569fd3a4e79ce480bad9c3be84b94c5d184a57c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cd3d001f08fb182d45da7e2d7aa52cdec47aa3e287eca05a2db9b4521d3f97da6d0692732d0a5e0ad1a98eee803581018daa36705d1d1a9300bb584a4a6b3f2357c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477ccd3313e98e775fdee149018d9ba3b002e1377a9343d7f570bac22dbec2e7070f198c1c92df831e28a243f92bc016ae97542a07136964b95e4bd0eaecc66c1eab7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c61a450e9351435c16e267cf85e704273609922ce1292c3ca01df5b53ceb06e2f5bcff2c6835c402130d3b8c62598032c88a2da9bad409edf8c2bb8935d134f237c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c532ddc5e20089576da891037dae041f45d7d1bc93c44dafeb7015cc77eb78dd00f4febfbffbba7e18144cfcca1d61d20661f359139cfb60d38e353bffdbb258f7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c08048580fedbdb21c2d41d48646750feadbff5e37ad109b37a87ca5db8625c40ffd90e4e42457c855e0650503c011e1b99f5f07d5d7b107827999d272e4fe1db7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cd78753e76c2a2cccc6776c3f955e2e05adb78d4637da6b4578423bd6aa0a6702025cdceec253ba08ac2468a032a4c4a78631dad46093ff07559f154cc01d93117c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477ccd4533d6eb31f694ec7495289b32e4385ca8e85a7a074bfb5e0edc925126c39d780959e473ce4804c00652d4824b5bffbd946259ffeed7e01928fb92ddd944fd7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c30937f955e0b9aa2f34175644bb8757d2ea9824d6dbb720ddf776c3b79a9b5e47c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cd0b093749bdf2c6f29cb9c1faee7c584db36a23eee203eea6c8c4dd08abf08c27c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477ced9973057d63c20e99d585e64df30ea054876642a13b7252b5b5980ebc22d9e87c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c1726a5bde9805abb298f21e36b3939a1bd615f7357df92579748d683c9041fd17c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c20721d4f35888c66b1a3ffae8707359ebf5a6fc364b7c7e372c38010bc5fe9ec7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c7690af0ac5991ea4a074ceb153422643c8aca58bc6abf43f9123d3a5c1761b337c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cf7399437740690dd9dcdee87f324e752829716b211c773b2d75a28833e14bb037c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c96c2d06084e41ffb104548fcff856b7b5a5a3e4ee16cc07c4a58ccec28fe08f57c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c3541e7e48768b2e13d606b3ddceb3460c920d35786237f62ba7c6183988b9d277c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477ccadf12dae7cda45c0c55ce211bd88284ed80f8517e9ec2e50336d5825d7bdf577c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cb9993e486ae271791437482d2435d4e33534c74ddfea4a995f33d5178c7659fc7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c6769b99b36be09e601189d456a4bd79447cf41d5facf4a6e71f853e9cfbef16f7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c1faa209764502353955819dcb33ef0469572445be6fe2db9390d1ac5816f4e757c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cf5f4a0e2274ed331b5a111cb08980d85cf509b7db465f75187086714599236787c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cf341d693a057bea696c2fcf1e96b96365d1eeaaaf80589365a2408cf40d0022c7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477ce957fb6923489cd7f814e4c4d012113abd23e59f3f81ae6028049478ffcbf4057c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cf983b8197e56946a05785c01d8475e2adb1b49c0381b13ed30396551201a7b357c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc023317a583604d29341143b40423f56dbf8ff80f04297a24ff09006308c0ade7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c07dd462fd6eb6ed1952719b7cfb7831128b75b0c5f3690e3cbb073842ff43dcf7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c75eebc475adaade59a2fb6e70cbe285e7c8417c41720ca0a3c4083e2e1464a947c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c38d05eff128133653d16fb2b2b57263a71df0d227acc0f17c87d06ff66086e957c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c68e9ee341d5c97e1d8951a9f5a623a31fb4abcc1b653257d2d678f5e0483e0ff7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c1148cce4b390feb64466749e8d68df0da6c7d411b4bf4393f8258e6081a6dac57c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c6346fc0de96ff7f56a8050d2069b47943992f5d76007c5fbae9a1c1da133e1527c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c0eece921c589e4e3dd3ec4b054a835313698aab431ca1dc56a3dfa1386c162337c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c6a399375e4debfe259731e0872e6c22a5472a9299d5276ddf5837d0c615176387c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c0c6e38c8bf1b1a183a18119122b1e32daa32db512b46eac72942f35802f5d3e47c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c419d0dfdec6ca73df3e6b9b7eb419358ad480a8259b95f8406297d397bf09ac37c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cf9e5adb17f2562830372a261a8ec66f21ef336ae7b59586311a151f7d85f69847c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c328642cd32cbd97a7f7e3c91f09a3e8bb71e152902eb23bcdf14675f897915cc7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c552dac020558f9427e0322cb79acc6a7d4a38b377571d280aa31b2e1a932f1a67c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cbf618d0d6b66d1a821adf4d36f6058e720f0c172bccec3ebd59fc9188a6575da7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c3d2e3f2a879d1b5d13aefcdcf8348b96452e6756de0a551520897bf48b93c6b27c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c0f2073a1e2221d57ffe51fee52c97a8cd7d0da2e98967dab440358d819d09fc77c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c51b25559aebd26241c12e7505a83486c3627f66531bd966abd8d0f14ddaccee07c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c612f8dc71f4bf7707b0acdc3a0c8af9f53128e5146505e39628583099d8615147c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c0466cab2eec90fdcdad82108a6d03b5b962fc24099b8c65187246e4c9057be167c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c9964eb4e7e059e0dc2964aefbc6b0a4a4df66b0ef4734902413512d17b090be97c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c443ed66d32ca047bc2eddfb75645a5ca9e6b1a97432ac1a6d0a070a673eae4737c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c8446432c24496672949fe8f8d6c74f51bf57b0b359594f81f28e856d7fea21e37c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477ccb5be21662bae3871e4a41d9ac5710843705e24b08b1576c0d46943a5c3c77147c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c8a300d99d414e65c4d20b031a9b40c67028c3b48f3a4a37a6fd64cc8c6c63a6d7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477ca55293b9b3a65b546bc5f5bbabe0e2be4acb5426ef7d98ec3d57c56fb6321a927c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cb493acef89701e6dcd5d7a9aacdc21523eb40858e018c3b955fe5b6fdc371c407c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c77fe85fdc02638946ea11fdd84cebdb122a716d9e0b3bf7a9b1611414f6792de7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c83638414bb2232505c689f3f7b2bbc6a92792404402dd9d092126caf5441a51e7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cde4126d97a1116162ba90921d926030b2dcd3b23a62379c38247018e685f35637c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c6a6348d90370d1eed9607618538ef7da054b01214535ee7124be448176bf12db7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c82bf6288af7e62bd44038e38e45f87e462b2af9eb3a2ecc551f7cf8c49b2e2277c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c7531938049f00b8e9c190b4742e0c382106080bba4edd9c20def4071970991b37c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477ca49f249e3fc327cb6d80f777da90d3d5dfbc2664df4268143d42ca4b3c37d93c7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c7d8199dc289149775758f75de6ac2de7b91b664a99acbe2a092e3e6bd49289a47c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c5097b01869d40c24f64a5ff014db088c99fbb9603956070448d48642c05c0e377c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c4eaee511d49f0d861281f3917173a4d84341568afadaea3da5e725ac2745d18b7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477caf141ac3c43b13bf9ec66b439e1846d3d7d51618bba39546631ca780506de36c7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c227694d64606be78f9a9268da82c38aaa1a5e3d9358c7a305264153fc1c909c77c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cabe818088b0a41abc5982ff885578a531342acc2a628e1ae043d318425dc6d6f7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cdeb862d78244d1bddf6b3aefaedff950532d8dd255552fc0e9d4dc3835bd09287c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477ce583e269f759dc07ad2b52d61612bbc9307cc08c7bfb0b02bdc04151c36f66fe7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c2a62a0c3bc91fa2bc017859645b05fdfad43f9c0a62c1175f011a2ddca29616c7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c849fda1a1b6026a872a18a670a973fc6c8ebe45a6a1a5effd5c501e097b588eb7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c68768d07da3884c1deeacca28892be9f88e0dc29d0f87da09898e0011d267ea07c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cd3cf145bf976618db990c33bb76f51bc4afd11e7183965ecb814016d772afba97c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c17da9f9e3f03f627e55d202024b6f3115a3a165c1e235015bb8f6da1758fdc3f7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c93686a2f1934f6b5ea2629b83c9155345ca93a8b9d4d4b282fe7b9a4c09862417c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cdc1c875e69cc37fd0e34be64a4fd92ed483ceb0ccac4cfaa10887336522fdf827c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c04a868c440a37ddcb2942d0402fc22098742d09fe9a7e5fcee37ec885de8ceb07c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc8f3104d9e6e2afcea2f7bb478f6208873de13e6a58d6a8f99a8f0c682a76c377c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c36aa3f8d7ad3ef91ea898c4e4f10fc935186d4ec63d1432940cd05c7fbe048da7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cd8b2edda01e597592052506299af9be1d37138825ac2e075fde15ab08267416c7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477ce583e63bb39e6d588f87cd650eb7e4d7c8c8f19b3fdf1158c7761ef5d2fad6d27c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c0fb8294329744758fa467f74c064901f3daf4b2675c8e250e870a533fac495407c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c9b20d2a9fb34341948b8e8840879d659632aee18bdc27e3181b4f257630443fd7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c0935fd8cd4b9db46215df9c4b80d596f4a94e4930cc0d104611a0780f45bb68d7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c815a84e0c8774e3aecb0d4c40fe509dbedb7f57c54c1e7f971c4a2747586fa7e7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cf41b2273c390e98c92ae4f22a80a50c11bc8d3e2945e4b7f5db448420dbfe3877c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cd9a29198c006d593822b284b92c75dd8737f6f626f3b9043a1eb9754c5f117087c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c540935942b5ba09215dd72cd70bf6f1abdf197fcc59d94e208d6f4a830f1df367c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c52d25ee4ce9e856aabb9cd86e7c216f79652d090aa5dad113103436c911067fe7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c33f5d8ff0f84350c18fa9f6e0f8626d8532af913f57dc2ae406bde35e14317af7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cf40a207cf108ba60164b5f78cafac7011e8aaf05441e14fe84c0b996b73c340f7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c73c8fa4e0ae3425245ccd7208856c94c02f54c065d803eca9ce27c034ad8994d7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c540cd998dba56754cea1e032f486460ae1ce4e7dfb5a414bb2ff5fb3460f54e97c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477ca096cbe8f24f602f9df753ee289c3d505e56489f1b7314ceaf8726842ff1a7787c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c78e73e7b50141515d0dd52a395d239e3bb2b92e7adf8ae497087102b3aea19c87c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c3878fc828b2b7879a9353af19ba7a144d671411aeeeac3a94c56ade9bed1d6427c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c23e76ffed8469dfb4945606d5f1dadef49f3d34fd43cc39b8118dea6b45c14f47c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c56f6805c9411c390126c277317b80e8125f001979352028354d399d054d195307c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c309b4951ab5f42bf1dd86f3a43e07093c8cd59826683fa087d4e1d37c855077d7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c606b0881ebf2b2f3ffb76a36255b1236b4521bbbb3e9ffea64ed1efdc0365a587c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cab9a92bb1cb8d687a154d42559a6e4d9fdff66038b7c83c5025cc6c32dd5ab3f7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c27ad077327a64402ec370822b8a1e7309711b2711ba5086085867480daabc8b77c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c2e8e36a90f9a4a1993e001dc6ac569fd3a4e79ce480bad9c3be84b94c5d184a57c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cd0692732d0a5e0ad1a98eee803581018daa36705d1d1a9300bb584a4a6b3f2357c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c198c1c92df831e28a243f92bc016ae97542a07136964b95e4bd0eaecc66c1eab7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c5bcff2c6835c402130d3b8c62598032c88a2da9bad409edf8c2bb8935d134f237c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c0f4febfbffbba7e18144cfcca1d61d20661f359139cfb60d38e353bffdbb258f7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cffd90e4e42457c855e0650503c011e1b99f5f07d5d7b107827999d272e4fe1db7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c025cdceec253ba08ac2468a032a4c4a78631dad46093ff07559f154cc01d93117c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c780959e473ce4804c00652d4824b5bffbd946259ffeed7e01928fb92ddd944fd7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c4a4d53546b76686f3978443341634f6470364a79504143396f6738344c5350697578324354375151736a48526a6c557866755455536c5336714f595a774437515a58684753566b623352516332417a355368517971777345616774764972397663675a567c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c33647748446639706f7a5543434f373030386d67713333594861777337503359536e756a74747946536a366a5633374c5a685064384931464a6c594530507347314d4e6934614e4b68485232414f42705467745250696e6d75394f694d344e4448714c427c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c58615148503151384766627057574c4b5268514b72336676536435574e336879335634494d4b4667504774417334383839504771474c4b6f4d46397179674d715a47577a68724755575a6b655368615055473471664543533742367446474a75647553697c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c516376536953584b435234464f697269385449746d795470376e673731774b4977336f434a3964624f35457462547a3943367450756132706d386b6474564a504d56696d546a6c7863514f647a65613061724673737848457451464d4264716459776e467c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c636e4d66546b467152575748464a4e4f326c63316f65707476526b3575476475554e7a42573250444f7a6169374c575a575750613034726a4a42663338676e51524b66444453366669346e664637327254487149434850623953333557654a45504d37677c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c34666851414d364f38454f3272696c4b734532694f645533585a5568315157545633786a4475584157417162497a4d5932453447474e787241697a70596c384a637651444e44337833687a4148626d7a4466333951727267784f766c5a74535a4d79716f7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c75677548687a7365507a48397938614f4e6570374562646b443744746a3837426672386b506f6f754f55726151724e7475306f59327136766e414e777749564258544c43363057494965496f746a464c6155783261756c6e5357486575734769396649357c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c6e6e4b496e716c767a7a457361436c344c704647596c55507665464c3970556b4275524d4932353572416e7030776a424c4e35785951636b5547545254443069564856737a516e4f657a3334566274764f70534133544b4c70727436556866454f3055627c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c7367344d4e755369626a753772345768636b6c43326c4c51716c686a494747304e7a416f526a7753714f4e46477a4c4a4a57397a3549676c556c7371525767736c4547304e314732466a786347384a675347444e66485758536364795a684f384c6a5a707c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c7941795a31315971343276447863647a45436b383270707839454631485a55337067536737477531774f7352517668695670654c467438435743747472646d456a344a6679333654486e416d47487373567831714f595141713954466233376956476e6b7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c366c6e72447268734e6f32756c4f52366944354a377a61775a4c45567a58647536714c7a46515267354841656a67627048365a457558596879743256653566616a50414e7666546f4c6974556d7561546f586d474b614e367444527877587745435768567c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c696a597a7138744634384e30386d573169396c685a6f364f48636e6a6976356f44544e5450346d4a315a7a58616d4f696a5a7038646a4d4a6b5953716a4c464b766774386245493074354e7466727a6f674d6d68575851364c796b5361507474554b72547c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c356c494d766c42576f4174344e36764d6e506c306c42437361756d694557737936306172397a656f5a76694470426641676f70704f50494d395355434361307959304f5971516364396b47704c4a4e5157303541464263466a56374d565638494a4b775a7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c305a5a756c7178677668567155305159354b6157795575384643685934647855316c63617a7a6555475a386f4e4e64476e62714a554b4670634d62364f774f464651443565484e4b774d58377059444158533748734455746656705267326b4c494e454d7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c5a4735484376456d6d5a545666574d314d584f6c6a69597a58636c675647484b63416845564a4f3577795141697472556533336e62524b5a555433447179637359685649527a4462566b423444514d464a47534c6e71793539727a70504247444770396c7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c4e6d426f5a5471674d58366361774d42686b346d6349337751656b666e6c67597947646c6e72725a646c3064484146504b785a4c3353354a56664d387151574d6b58587964636c676f396854414b7738356c4a593245764e48374a594d747957666b69697c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c51776635516e4e495072787443375867353473574b7270494e434b68305659456633415665627254714e64514b30584456666e7475435a3635796454685a6f6d534d36574e6e45313048487a7675326578677751476c4b7a484c6a4f42763168375632497c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c69736f396e796d4179443844656e6559396367786d646b4d59666374313555616f36397a756c5a514d58684f386a44366d4a72774b43387848385179327977657577444f4873736964795763466e3650566e39765036536b3277485555335965707051567c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c7457624d794b796e643058527151644e7349316e4a3032454a4a4e4837476271726330504b6e304e644e74747477354b325758414b50326a6f46506b635179725470347443553544786f56514951714241645a39515267356e56646e4342436c517743677c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c4e53516c62577438695977446b51486a6a437777415461304a59345365633850564d3055796852473562616452466e5a364a6c77716c6b583765476268435230654649444e7039476f374b3642565678753454496634776436326362735231776e795a597c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c3344504a767a5239326c3472787952446d6c43325043595974686c486e74776755624e674175647347374833756f7647785678616e6c5a477338624672784a63796e6757466a636265483377556f3366396f676b7a35515133536a6964546941346f6b787c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c53774a7a4b745a6337767a57373839416a3257643570384f5976714c306e554a487438684c586847684773654373444c6b704d64434b517133343255684d724f346e54463830626677726959484c7851596154724b7a464374786d79384261324f54764b7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c5346547372797a4d446b58454f6d6749696a537a78715062575573636a6a32314f4a68333745467a4f71337443395a4b6a463845564e46477658494334797347377a7a33343471476c6a584e684c6d6f676b5330566c776537344831725a796d6d5666677c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c556e79324f75365161674569695434794a6d5842364a6f4135664236664d335a597050414b4d674951495258734a6c5a54367150464564414843764d666f7a334466746250794b763670676d577162466d736953556c67734c42325150734868765a69617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c4d787546584f6a7a38727048475731357844347a384b665356325958593138796f73313935617933714f795779715254544b67506b6d7935656b5130624f6f7136677031654f53757166654d76557663754253454c657a516f64476e5254444c5852425a7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c3768536b7431506f766e456d447052567530724643397359695436384a336a48385a50705175443949366c626c3358445263386a3972366838306647526d644e6253305061734f496f304978527430797658477465414161714547374f48494f6e79746f7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c4f6a7943454c35665256634b67714632337a5a39585553556d6633395771464141313332435737694838534f6d6d45664a7464776254656d5a366c4c6d4f624b463243364e79636b75555745346f4942494a564873305468553551364a5146644735376a7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c425a4868324c526a6c5138774273586375757672494c574274725a395576356a6943716162356a6d4d664764777265514d7a386938534a7339787254536b31594b685a4c6436564e6170517748556368693870675157794f684f7858596f4d7a754238767c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c43656b7a4f5a3439464443697161425a367944475137346c62513845796774306b42705a716857554a6e325a6e744d6850664e76624648636a4646484b597855704c484453736e72466467517751586255797654333256627671493563344f72466a566e7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c4d6d5a4b5479353754703344324b6378394f6c4d5733725a706f755434624f466e4266355a61324a6e55616473634172514b3141446a7052784979714a63565644595172584759617159654a59435943615132435a676a6b4f48796c486a3638384b70567c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c626e5230364a41696f42764a743752725461333950505844764a6f4c49523948324f77586e5735436e6f39486d525933505132757450584f6d397054526d7148304d7563796f434b4342664d69314458487768596233436d32513548306c66525778546b7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c42743562654653544c6e34625831446f716548754a776f70715a524966707a474973484e58717578426f796d665a417532354f4273325147527665574b4271685256554639653241726f4d7565614f363671786d69625358775648346b586232485476477c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c4b7945393358427856595838487874714f7a7550647131426c357830755974326b5632634a747873686a714f474a336b376c59387a507a4b4c56423348535751434d5139336472386d494c5266455a61504e396574794d32686456505546766d66626c387c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c59575158754b587574583751564d776833344b6d6b52703767435846304d3650794d41516b6c384438356b524845597a78784c486331436974704e693248586f686e33727931547556316371765950516c726e6e6950757a333748544473354b445932317c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c6d7a31524d616b6a4a56725252676874614d47443756586350444f647642414830726d4170774a5766314556354c63336c487769736869354b5738336e7a42624f4e413238394f625969555452584d33733639496369454b3241456758336843474673437c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c6959626a6238343848446f62656146546f4b743469387949527145364330504a504f53514b4b4d6965596867594e30636e6a357466743156497452616b754a583771424830644e323256394f7958524a344d32373355537a6278416c5137384e6e7869637c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c50376e6d576a647a564435365778615549425765743671696564694a386c454f6752593030306e4b74684564454357613347656b43757347767a65734949364d6e534163494f4d3056653170474e6f7a6b734b4d4c3068366e6c6f56546976365a5736787c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c505673524f58416656367857326a52766e51473347676f4738624368525562774675646868436d3079484d6f51724a32376556436939386738416c50696d394f4762564c4236415844616269734c616e50565058534c3151616375696d725752734771527c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c543770736233366351715470625a6b6561437a476f6f506f6e51374d753367643076765a6d705a31464a6545796f49784f3531326b4566766c61364633634853763246486976774c3242676f504d4a7549426b51356e39656f354b6637665873377259647c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c46307265483574596c304b304762427a4365455a704f68464b50535861354d4456314871585a66364e50586a516d47686f6136445062386e4f4f624d4b4c6676424c4d6d4150696273356c3668506476513757743655454a7a466c37667073473032536f7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c6330795570654b74565262414d616371466b7243437045624761794c6d376e6e594a37624c4673786d7458587258625536746e794952796353554e34535a68457764463849587454656545763246665757716b743849764f74374739574d44675038636c7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c7756305567343836623847426a4358595256573171545875685865423037456c517335576d34516c326e4e395079587569486c776f365176545357494e6f5475474d6551475632783846754c316933394e65743238386e5051386e736d344b52484f78627c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c34434e4e6a486e3674537769485034776a76594a39486c4731444958694f676367544e6e70306a4948464f656b497a72316c305a536174484232754a45424a49696e5678623435497a4b4c4967615a386c5158314f657a6636544d41696c387279524f797c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c6967466f4a617a6474484e704266327a3646724658496d715969645451707058745462325279333836486f784d67554a4a396577496f4b77774f666331735a6b625a63526e36506842334364376d4b486b4d33533043636b67666e3578616678586663397c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c674d32506a736d33746c55346575767a3337594b53694d4546396461414a43456c736b764c756d324634574b6d6837676457515632716e797071794e58596839677273504c4348667774504a7a4d504377746c70487a4e574e39784258457931554f48747c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c62777178766f6937597234514f666576346e5152534371514b5177774e756d4d4f4438395265374677316a38366f74597a384768415557397967743979474c633948634f4d37683659723453466c48346a623949545446685959676d755070726e7035587c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c71783649364c744f553847354b345934585863443178464c34574552376b506e484b54446a636733384d594a464c42717745546e316d585637724334436767394f5a425830464f596842784b63585a7972494a69567733514d754b6379516263454158757c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c41446473354d6c6d397a53346c7749753032634e55585a74486177503952527a6a555065765970736d376d78735550694b515675424b4f364c384c4b4f723758624d5a7542654d4e63576173454f4165756c7a5455625076396f334c46307746436d5a337c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c68376b6d6d6a78785a364d4d4d5446633743416e637472506b4e445a67564c6e51547a3232556e50525a7372475874446e534f716235336d4878394e674b5957746c4e6a3630594c4f65326b5a6a4d64316f7233696b64504863714e4d6379336e62616a7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c52463849644b6f545736726d345056626836514977384b584d4543727a70546753504d567030443955556b4e78354f435a75626c714c3730647a66434d5a47754569655337485052705a754d53376649706552474e4f77516341684f704e395257627a527c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c447577766255364c6b664350345755764349594742335a3836586f396e6d4c4f473561465034675961474232736c6c5355376f6c596268555a775561477450636f4e4634484c5146666876777345656142726b71737261664e53676a62546a71754f695a7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c4e454c45676f506e355a55326849665474783658537371565539683330736c4255573559614961337755564471596d4b6b6776327a4c4e684b556179616a5853335148336f46564970456146746b64447277764f3736564652553150334f795875334f487c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c7271416a754773494d326268566b464d6379685068726c445a436a717675664b494454303939774b5a78524b486b6c4b4773704d4a796679596d4d6845505361697a31667a6e506f4a775a6745614f6271314e5a70516c6430586a754331754b716a504e7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c47426e6b656c7352577a4970686d3746624f524c486e4c6f646a6b39785773316c4462714e72357a51434f564f4a714f6f376e546b58376d36696c7232436a64336b7247416e34674e493272676733756366646d3238775965476536366e385a767077567c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c777778654164485133576a35385364426c41514d31506d416d70724c483365326e7a364e434272776e7a706a68744a74527035493467386676704f3067535373674e3547656c30714b677a52783838636d324b6738486a725558685a455968497a6365447c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c6d34646a3743443832586d685343766a3158746576715452773841446f4e54794657494370397966584b6d4661464d327234364d6b5173464d53385974506e5742546d4f534c52466a32386b784a614f4436704c4b48676c6e633948526d72683345544d7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c556a4d436f64534f58627364355775446e5a544a677763417a466e4c494d78745537543861424d564135577450675732334541383043796e364d5a456d6b58366845336636463075794d4f6551793448327546515632345243526c4f31374a367a4139747c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c7079684d4f444e74526d596f6f3947696644455a4b437a4c38326333765853496c5a6c59715766363633696b324e71356755544f6c677168387138726452307045396256546750513958595a416654465a416a38477866434f6553505447346e4635366d7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c634a56786f486b36614245335a387349466834685037425130356e4e77344377446c545153314d5173674a66635a4d493647504a42656f726142337576745157457a436b716630486a7a4b6d6f6d5569517851684234787a7471544f4a7a796257316c647c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c794b71575145753978383951746577484742646d716b7a42514e416463417341384a6b4f62434f79414c63545079706c597376634355446a78336b787442567038333239764776566679445555533349386f4c79386546743651516e66424464757661507c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c427767676d5347506c426a343639484575463877684f416b5549486d4e46796332466a636c4e527865597039585844677341414165304957776738384c786142306a4262566a7958374d57547a6f5a504f706451644d4379514277705777504b45674c6e7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c614c7049756844745562344f4e6c495a355a5064425636784679587741797a79374f347355784a45784368614e4e59474144495a6f456d533237637274425070654b4657356571734576726736644d78476b6d544d787a467342554d31783135377752317c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c5756766268716d465a547a4643385945364c307668584d614956594f4d45677970427a75524c5a45756d385569576d657662414359614175547038765263523444676f6951634c386d4a52767433784f34566651564639465337597a614774424b4749717c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c72526f354c6e30784b41625263764a6952343936646e6a52535635553678706c6442684f5035396e76613477774445627842357a4d6365745837625275713378536161763337497036444a7334647273446b50666d547939517852384f4975754773507a7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c6f545730346d7866326d54544f44545848544b387777654a4242715845787951676947387534656e655834546f4c45567466535042576e306e424e50593976326930314355334e594f46463368384d7964756445676f73735134354333707639666b41587c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c39794747426367436c65474e66636a7659377048514f664e744d4f6a4b44394a31446471456853506c6f71716f7a4b63775a4862444d4d566e71345852317547767657584145434c51525a34677a35427043415164634271717662386c7443454d7072637c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c69776e475743394d4a33506a6c4257484d4c6969424f59494e37705a7961544575346166773850365a76666257304777424f4531727378346f4e554d4c42673676656251614f4d3039505a5444766633384b55703068686353314f7571536f4b567071567c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c5541586f59796c4563626b6f4a646f6d65724934376d38766550436c4a73697353354746725039724f6b446c6c53766e3732663465656e6a524e736f3679474d7361684a4e6831727075417961574b384f503051526358794e654e4a43686d55677273547c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c5859586e6d564e76743968476a4a7a75555269614a46534a62674e30584239496e57567a4677565974307444785356687a3368397758477832696c4e4a6a6c5735356b7a72336e4c544563676e566c4d4d744a38656775346f4448564d5246474d5035317c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c4a58346b6f70347a55746e47703778703967424575794b71596d563650674c7034447867537344424a5137574c73624b79416454574e394b595346445a6553524865586e77714f35354d52473451667265693830543579484e31394335506a4154344f647c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c534a534d6d30577937707264314d393831414364596e58704e314f7670674e375075495a6b736e664846677966677736455937743955494c4a6b3459714955343073543849376466416b42446f597a534b7562496448684d51624236486c3078424976397c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c67546e4c6d4875436d56736d6d4f6f6a6633584a37754a6f5337344c4f4a3853716c7444524e3533776c664a587353326a447a6859377445326d664756646f616e46423467775643465a6273685269716a48783545527a773143304d45634b5248624a4e7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c4e4e545751586242634574577567363073466d353168397250566d6d66546551755644394a43794a3653746f597063665470384b75375a3953396c57526f4339393338477478666e6477435a4d4532745230336359513945506a717778527775497331327c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c6c314c7975646e734176364c754a4b626d627438523866653948387256546d34495673315a466a703064306b4e796a587a4455664258687a73664f65583038744c726b7957734c4e764256365835536c7743715670766b497a594d6d4d4b446d5a4d4b4d7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c7855583852357447543153374e4e4256514172476136396b674c6a305952416a426e67696a7a503072765732366c4e4b4c33684c586556335033524349684c39755267426856717765636f386e304957524e7945526876763861584566774578634b5a687c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c716c4874303048775046476b326c747369595167644a694f34477058563939396b457361735875387431676a617a7a676f666b704e723146586774486471476e54586c624b4739317667387446787a52424934655a56484d31306a3466516659447258627c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c78584a6f49344a504e4a6e334658396e35525631496e3265554e61466e36634a524b5671457535683368397834384b5a4e744f6c45476e6e686d537667533459735063563835305a635a6d3558565379637849483156553935417561696d597a5a596b587c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c3470695361547448647267545a6d74666130716d507a4751777148666a6c4462794b547774623375733965676a766c686b7a745a5759476965646c6c6d4d6e496d3634453757596f563275336d44617730736c4d6750536b513176304447775142706b797c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c49793876714c754d6c505866694a6671616c65765052684c524a61336a566850686662794f7438303756336673377674697a4d566654775571774e7a6955657058644c43784a7175746a784c675332706645386b6c763242524530586d336461364d41747c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c44486b72456f6a696a6f32487256654f45635352314a694845496b3976654f5a4a596764636e6b6b426350515654756e5663344c4d62676548716232735052324456334438644e786573655a627762567a357739364162445063773750625a6958524c547c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c795a4b31386d754558497575676b566461505131347077694d386a506a3144485065794e6f5266636e417573496676495539784d7055535a515a455a523675773851376d78646d4c424733394c6d46756c3134794c4e6e70435165684d77424b637a55417c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c765545574b6f5a4f466b314d41447271726d4a5569613042304455665a4655696e6d35584153423331714470535646393564546264484333396d3859505137323030507147656a78744c4d62776761726a52716b7054646d333961484e357844546254717c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c6d356c4f6a4978423279323550426a4c644c414f395630744446786f334f6166486a52515166664944354467774d50786c663969305a43727558466c7a4572374e364c7462525a434b734735326c736270736b64664b767978594a577359543456766c577c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c45544255534332434e6a6a674a3441446a385279454542535564354f39676a455a4b6f496467385170665557616b716a6835464a7a35706a3869563770354265444e4b4755496c374f33554f63385668336f51736a357a66626a647163437446673361597c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c54374c55426e55324d346e6e50563877545a653051613738734b777a6947363043464b33537354756d34463251456d7a72717137716c3447546f3532565a536c757163634956755451304c757558544a623747726a4157324e50537946414858514a306e7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c6a5a656875767749746c5a714475746d4b6f4647316e35314267496e67427470707676485152673730356f7570464530543975496d6f414d75385a4178694f4d44396b69516f66456a72597857716c4471466141524163627731415239657342644348527c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c725a506a565658616433415939747344705572614f58534b4b324830476c525839753655675553684c6a354a436c63503675504966776a506f4f4453306c475a444348486b714f577a48765a547646504e696e534575795137317a5861354b43766839477c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c795344467262776a655a4e7045303545777179553765684974334551503678624f3046335a3163334f4f696a45654c5973374a6e624f56764670626c6a776b566d504f394550326a74627156645a4a745767475953716a6f4469784e464877506c6250507c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c32534b7a5371364746586958674730526265524d4f765456744464733038375351486678586331715839653144324743346e65494758745a6f7768657663563948307573306c4a4c694c434a423862766d6532535a6c4765474e695a5133576c536845497c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c316f6d445967457661316538664555447a4c7836486568784b4532697538376d6b6a4e377169737137786e615a37456f475a6a6534717a4353724b646f496e7950307433384d6b3337763457737761576c683064796e4467466368544975666e6c7a68687c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c37367146583872634f3141436f304d315533364e7056643550515638795173764b47597843647867345848684f6a38776334377250616c73513671654b47786b636a46456b324a6450676b7270694c71614a484f4851366d4d6e6f6d544b7555525a6d327c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c7552416b556272356c4d6830433465394f44684a67426d7264476c4666364c794e6249796158746a7879395a746558354634444a744e30776a62307037424c4a436a3542366d4b744c4b67324d315668566f516331477a62466e6f424f586165363346307c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c50683874734448765434696c333744796a57774972574a486a4f54796e5455303051686a6a4f43304749617a4644584d6f696b443452626277537a4a4368797159467a356930554f795565326c5a457a374e33317532314f4b716d63774b746b6451646c7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c33475077777939654b635277356c4252466c62646578394762626274695264396d52754964744b4c76723870427836364735394a7336667237674964564d6437727647754f67363877326e5870685257634f74754b794b464367496e514a6c37345073487c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c304371547245424f56366e79474853596670327a687666466c3665514a48637a3974677258483547426934354e4e5552304b6735356a41666644564d615839386566705a4b697662706f34305a4f4850704e496955376e5a4138427955417757464c4d647c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c6430416b586d687944516c76576761316f427572746d654a794d746c5668525735663753706367515170634476617349424c5a555832736a454a756e4f39614a643572733777394e4c3965373978464238736a546b7a324d396d594e6b576c6e5243444d7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c4e594e64673441544f6f75506c4f3047304a306d6a5752433279427a4a39526c58756d31704d4b31593447374775457734734862636f42354b30736b3039744c7346444666627733343130416a7356624c73614e45434763715a6d6757445165386a4a647c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c594248466d34786e636e594367617379536e3571714c495734327276575932497078647a737a4b754d795651796466666f387443485a704352475643754c384a386138717a484a39357551737854784b524f63704472506b59794b67374a51354a4d6b367c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c31764732355a6e6a446a6654677145766378766d5a4374596e75774a4557637569496b6276786b574671464c45393448757152695162363276727a5a647a686c37736d714e7663694a485564454d4959307136487233784b6b557a6c6a467865584875417c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c6651763545514c72693971504b5165546b486b636f635845786f3048526a32575a6c51745a72493870584c584450484c6b504c79517931644b504c725942634c4e5332433741796b6c37384d4e446e5669596b596b3930534f423841326162465133364e7c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e475f5055424c49435f4b45597c616439386361646233623133323239633738373039383736393535323437636265663430643562313563343834326265363035623065386233306339376137617c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c00000000000000000000000000000000000000000000000000000000000000057c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c3133306466613538636131663666636362616331623335343362633263366163353061613939386562623934316633343634653036646333613464656236613336643132323933323635363135323739333438636232613538306463376637356635663830643461356264636634623232343837386639333031333261663863326335623537633064396531356334316162623564666238636334616433306137333066336436383163343235356365636662303635346664313834616437626634343434636464303034383937663965373664336163303663643735396362316366333631663864663766353961653036313266303433323838616466363438373763323530303639626666386237356133663261376530666239336163337c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c3133306466613538636131663666636362616331623335343362633263366163353061613939386562623934316633343634653036646333613464656236613336643132323933323635363135323739333438636232613538306463376637356635663830643461356264636634623232343837386639333031333261663863326335623537633064396531356334316162623564666238636334616433306137333066336436383163343235356365636662303635346664313834616437626634343434636464303034383937663965373664336163303663643735396362316366333631663864663766353961653036313266303433323838616466363438373763323530303639626666386237356133663261376530666239336163337c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c3133306466613538636131663666636362616331623335343362633263366163353061613939386562623934316633343634653036646333613464656236613336643132323933323635363135323739333438636232613538306463376637356635663830643461356264636634623232343837386639333031333261663863326335623537633064396531356334316162623564666238636334616433306137333066336436383163343235356365636662303635346664313834616437626634343434636464303034383937663965373664336163303663643735396362316366333631663864663766353961653036313266303433323838616466363438373763323530303639626666386237356133663261376530666239336163337c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477c3133306466613538636131663666636362616331623335343362633263366163353061613939386562623934316633343634653036646333613464656236613336643132323933323635363135323739333438636232613538306463376637356635663830643461356264636634623232343837386639333031333261663863326335623537633064396531356334316162623564666238636334616433306137333066336436383163343235356365636662303635346664313834616437626634343434636464303034383937663965373664336163303663643735396362316366333631663864663766353961653036313266303433323838616466363438373763323530303639626666386237356133663261376530666239336163337c424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f444154415f5345474d454e545f535452494e477cc424c4f434b434841494e5f52455345525645445f42595445535f454e447c000500000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000005"
#define NETWORK_BLOCK_HEIGHT "2813049"
#define VARINT_ENCODED_VALUE_RANDOM_VALUE 0xb2f58199a302 // random value
#define VARINT_ENCODED_VALUE_TEXT_RANDOM_VALUE "b2f58199a302" // random value
#define VARINT_DECODED_VALUE_RANDOM_VALUE 78167177906 // random value
#define VARINT_ENCODED_VALUE_NO_ENCODING_OR_DECODING 0x7d // no encoding or decoding
#define VARINT_ENCODED_VALUE_TEXT_NO_ENCODING_OR_DECODING "7d" // no encoding or decoding
#define VARINT_DECODED_VALUE_NO_ENCODING_OR_DECODING 125 // no encoding or decoding
#define VARINT_ENCODED_VALUE_START_1_BYTE 0x8002 // start of 1 byte length
#define VARINT_ENCODED_VALUE_TEXT_START_1_BYTE "8002" // start of 1 byte length
#define VARINT_DECODED_VALUE_START_1_BYTE 256 // start of 1 byte length
#define VARINT_ENCODED_VALUE_END_1_BYTE 0xff7f // end of 1 byte length
#define VARINT_ENCODED_VALUE_TEXT_END_1_BYTE "0xff7f" // end of 1 byte length
#define VARINT_DECODED_VALUE_END_1_BYTE 16383 // end of 1 byte length
#define VARINT_ENCODED_VALUE_START_2_BYTE 0x808001 // start of 2 byte length
#define VARINT_ENCODED_VALUE_TEXT_START_2_BYTE "808001" // start of 2 byte length
#define VARINT_DECODED_VALUE_START_2_BYTE 16384 // start of 2 byte length
#define VARINT_ENCODED_VALUE_END_2_BYTE 0xffff7f // end of 2 byte length
#define VARINT_ENCODED_VALUE_TEXT_END_2_BYTE "ffff7f" // end of 2 byte length
#define VARINT_DECODED_VALUE_END_2_BYTE 2097151 // end of 2 byte length
#define VARINT_ENCODED_VALUE_START_3_BYTE 0x80808001 // start of 3 byte length
#define VARINT_ENCODED_VALUE_TEXT_START_3_BYTE "80808001" // start of 3 byte length
#define VARINT_DECODED_VALUE_START_3_BYTE 2097152 // start of 3 byte length
#define VARINT_ENCODED_VALUE_END_3_BYTE 0xffffff7f // end of 3 byte length
#define VARINT_ENCODED_VALUE_TEXT_END_3_BYTE "ffffff7f" // end of 3 byte length
#define VARINT_DECODED_VALUE_END_3_BYTE 268435455 // end of 3 byte length
#define VARINT_ENCODED_VALUE_START_4_BYTE 0x8080808001 // start of 4 byte length
#define VARINT_ENCODED_VALUE_TEXT_START_4_BYTE "8080808001" // start of 4 byte length
#define VARINT_DECODED_VALUE_START_4_BYTE 268435456 // start of 4 byte length
#define VARINT_ENCODED_VALUE_END_4_BYTE 0xffffffff7f // end of 4 byte length
#define VARINT_ENCODED_VALUE_TEXT_END_4_BYTE "ffffffff7f" // end of 4 byte length
#define VARINT_DECODED_VALUE_END_4_BYTE 34359738367 // end of 4 byte length
#define VARINT_ENCODED_VALUE_START_5_BYTE 0x808080808001 // start of 5 byte length
#define VARINT_ENCODED_VALUE_TEXT_START_5_BYTE "808080808001" // start of 5 byte length
#define VARINT_DECODED_VALUE_START_5_BYTE 34359738368 // start of 5 byte length
#define VARINT_ENCODED_VALUE_END_5_BYTE 0xffffffffff7f // end of 5 byte length
#define VARINT_ENCODED_VALUE_TEXT_END_5_BYTE "ffffffffff7f" // end of 5 byte length
#define VARINT_DECODED_VALUE_END_5_BYTE 4398046511103 // end of 5 byte length
#define VARINT_ENCODED_VALUE_START_6_BYTE 0x80808080808001 // start of 6 byte length
#define VARINT_ENCODED_VALUE_TEXT_START_6_BYTE "80808080808001" // start of 6 byte length
#define VARINT_DECODED_VALUE_START_6_BYTE 4398046511104 // start of 6 byte length
#define VARINT_ENCODED_VALUE_END_6_BYTE 0xffffffffffff7f // end of 6 byte length
#define VARINT_ENCODED_VALUE_TEXT_END_6_BYTE "ffffffffffff7f" // end of 6 byte length
#define VARINT_DECODED_VALUE_END_6_BYTE 562949953421311 // end of 6 byte length
#define VARINT_ENCODED_VALUE_START_7_BYTE 0x8080808080808001 // start of 7 byte length
#define VARINT_ENCODED_VALUE_TEXT_START_7_BYTE "8080808080808001" // start of 7 byte length
#define VARINT_DECODED_VALUE_START_7_BYTE 562949953421312 // start of 7 byte length
#define VARINT_ENCODED_VALUE_END_7_BYTE 0xffffffffffffff7f // end of 7 byte length
#define VARINT_ENCODED_VALUE_TEXT_END_7_BYTE "ffffffffffffff7f" // end of 7 byte length
#define VARINT_DECODED_VALUE_END_7_BYTE 72057594037927935 // end of 7 byte length
#define NEXT_BLOCK_VERIFIERS_PUBLIC_KEY "ad98cadb3b13229c78709876955247cbef40d5b15c4842be605b0e8b30c97a7a"
#define BLOCK_VALIDATION_NODE_SIGNATURE "130dfa58ca1f6fccbac1b3543bc2c6ac50aa998ebb941f3464e06dc3a4deb6a36d12293265615279348cb2a580dc7f75f5f80d4a5bdcf4b224878f930132af8c2c5b57c0d9e15c41abb5dfb8cc4ad30a730f3d681c4255cecfb0654fd184ad7bf4444cdd004897f9e76d3ac06cd759cb1cf361f8df7f59ae0612f043288adf64877c250069bff8b75a3f2a7e0fb93ac3"

#define CREATE_BLOCK_DATA \
memcpy(blockchain_data.network_version_data,NETWORK_VERSION,sizeof(NETWORK_VERSION)-1); \
blockchain_data.timestamp = 1545366181; \
memcpy(blockchain_data.previous_block_hash_data,"0000000000000000000000000000000000000000000000000000000000000005",BLOCK_HASH_LENGTH); \
memcpy(blockchain_data.nonce_data,BLOCK_PRODUCER_NETWORK_BLOCK_NONCE,sizeof(BLOCK_PRODUCER_NETWORK_BLOCK_NONCE)-1); \
memcpy(blockchain_data.block_reward_transaction_version_data,BLOCK_REWARD_TRANSACTION_VERSION,sizeof(BLOCK_REWARD_TRANSACTION_VERSION)-1); \
blockchain_data.unlock_block = 2813109; \
memcpy(blockchain_data.block_reward_input_data,BLOCK_REWARD_INPUT,sizeof(BLOCK_REWARD_INPUT)-1); \
memcpy(blockchain_data.vin_type_data,VIN_TYPE,sizeof(VIN_TYPE)-1); \
blockchain_data.block_height = 2813049; \
memcpy(blockchain_data.block_reward_output_data,BLOCK_REWARD_OUTPUT,sizeof(BLOCK_REWARD_OUTPUT)-1); \
blockchain_data.block_reward = 78168745522; \
memcpy(blockchain_data.stealth_address_output_tag_data,STEALTH_ADDRESS_OUTPUT_TAG,sizeof(STEALTH_ADDRESS_OUTPUT_TAG)-1); \
memcpy(blockchain_data.stealth_address_output_data,"b1ae08c48f3b3e9ba6e22d9fdaf289eda8565179ebff7787883ecaf49f1ebdfb",64); \
memcpy(blockchain_data.transaction_public_key_tag_data,TRANSACTION_PUBLIC_KEY_TAG,sizeof(TRANSACTION_PUBLIC_KEY_TAG)-1); \
memcpy(blockchain_data.transaction_public_key_data,"01159a7ed6a1065b708355d900b06e4e1c47238397723f4d379945b3bcdf10f097",66); \
memcpy(blockchain_data.extra_nonce_tag_data,EXTRA_NONCE_TAG,sizeof(EXTRA_NONCE_TAG)-1); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_producer_delegates_name,"delegatename1",13); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_producer_public_address,TEST_WALLET,XCASH_WALLET_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_producer_public_address_data,"5843413176313851736635504b4c723847467231346a486b6a6766336d506d314d4156627377427339515037467747544c434534537759693831425270327672635631326d614d744377395445314e5a525679796e51336532633362376d78527733",XCASH_WALLET_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_producer_node_backup_count,"0",sizeof(char)); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_producer_backup_nodes_names,"delegate_backup_1,delegate_backup_2,delegate_backup_3,delegate_backup_4,delegate_backup_5",89); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_producer_backup_nodes_names_data,"64656c65676174655f6261636b75705f312c64656c65676174655f6261636b75705f322c64656c65676174655f6261636b75705f332c64656c65676174655f6261636b75705f342c64656c65676174655f6261636b75705f35",178); \
memcpy(blockchain_data.blockchain_reserve_bytes.vrf_secret_key_data,"50729768e95b1257a6db3c68e20985c0766eabaef23a41c05f5c90ca9e2c8e6e6a6348d90370d1eed9607618538ef7da054b01214535ee7124be448176bf12db",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.vrf_public_key_data,"6a6348d90370d1eed9607618538ef7da054b01214535ee7124be448176bf12db",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.vrf_alpha_string_data,"",((RANDOM_STRING_LENGTH*2)*BLOCK_VERIFIERS_TOTAL_AMOUNT) + 128); \
memcpy(blockchain_data.blockchain_reserve_bytes.vrf_proof_data,"d74288d087096fa6fabc20ba83244dee39517a723cde9d7d4efc7111613ce9590b6232e79736660ec90d6e40e325e06ee630f753a6b3c540077ae0564cd590339230e8ae8fc6bf801e73e232ce1fe600",VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.vrf_beta_string_data,"d65cd4647f61953d6fa26fd80d1646ec96822abb5d3a87bcf84fc33daf32c0754932b5ec9abcbda86a053ce11508c08281a2fa386ed87edbd442d71934a6450d",VRF_BETA_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[0],"aa41923155c25d42474938bfbafb679230db914cd1dc0acc9bedc7b6edd6579730937f955e0b9aa2f34175644bb8757d2ea9824d6dbb720ddf776c3b79a9b5e4",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[1],"8dd1395dda2041ea2b2c49b4dd9a1b631daf92c42b935bdf2915e6fdd0fde6dcd0b093749bdf2c6f29cb9c1faee7c584db36a23eee203eea6c8c4dd08abf08c2",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[2],"324fdd1a8410265df339cade61d5fb0bac0e0a7ba62ed2b215e355051caed3cced9973057d63c20e99d585e64df30ea054876642a13b7252b5b5980ebc22d9e8",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[3],"2093cdceb47fbe732d66033ca28703c67c98a04d8ccca2d7e7c763c9b5e13cd41726a5bde9805abb298f21e36b3939a1bd615f7357df92579748d683c9041fd1",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[4],"95ba6e79ad687a54a020f802fdb397fb02b665aa65e52f801e1906d3f755e58c20721d4f35888c66b1a3ffae8707359ebf5a6fc364b7c7e372c38010bc5fe9ec",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[5],"f886ff90b2250fd7f99d6b64c5cc7394f5d19a3223b9b4916401d046d60e97ce7690af0ac5991ea4a074ceb153422643c8aca58bc6abf43f9123d3a5c1761b33",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[6],"8f9838bb7d19fa3172272e3d3b2822c3b34e9cadc0ae08c7f4cb0faf3a2fb8c8f7399437740690dd9dcdee87f324e752829716b211c773b2d75a28833e14bb03",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[7],"809f7270d4451e20d8adbe540219e3450e7fb029562b2e62dfcf1c3d46faa4c696c2d06084e41ffb104548fcff856b7b5a5a3e4ee16cc07c4a58ccec28fe08f5",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[8],"f5f85b3c75a56bdac96c9c5d79d7243109aecae9567956b787bea5aaef46a4643541e7e48768b2e13d606b3ddceb3460c920d35786237f62ba7c6183988b9d27",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[9],"4cdd5a16d093573f8429911bfa281e70680ed4655c37d25de564035f714caf3ccadf12dae7cda45c0c55ce211bd88284ed80f8517e9ec2e50336d5825d7bdf57",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[10],"9c014bf009e3cb77470f592e79f124a4e6182f4068feb1b127f85fad6f83d20bb9993e486ae271791437482d2435d4e33534c74ddfea4a995f33d5178c7659fc",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[11],"fcf28ee3beaf4ffdbdb5a5a22bcb0c039d4d014c5e2699de50d125ba8db6bf896769b99b36be09e601189d456a4bd79447cf41d5facf4a6e71f853e9cfbef16f",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[12],"bea74e82df4d0d15c29163e69c898a1e97d1a5d5687acc87084ed1a12a25f8681faa209764502353955819dcb33ef0469572445be6fe2db9390d1ac5816f4e75",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[13],"8cc909ca4b82294baa3aad94f9cf9fe692f8547d76b68bd54efebb852c438137f5f4a0e2274ed331b5a111cb08980d85cf509b7db465f7518708671459923678",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[14],"5f95ab231fda7460bc306c78a88d42055cc829f469b8f235617cbd253f3fa61ef341d693a057bea696c2fcf1e96b96365d1eeaaaf80589365a2408cf40d0022c",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[15],"60d8e766b8c85ce260290dc21c25fa37780d3978bba0bde63d2e2ecf5be2663ae957fb6923489cd7f814e4c4d012113abd23e59f3f81ae6028049478ffcbf405",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[16],"78b2c366b9f94b1d76610828a146be686193bf2fdc94ed080ca6a13e7633146df983b8197e56946a05785c01d8475e2adb1b49c0381b13ed30396551201a7b35",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[17],"eff7ed59fd7b719a5b75141d7c3fc2a4fdf1ab714583c9c47e914a8d9f4e578fc023317a583604d29341143b40423f56dbf8ff80f04297a24ff09006308c0ade",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[18],"5d40e99ff86d1d88983d8481ab830b581c28f8706894776d746f3ba250ae842d07dd462fd6eb6ed1952719b7cfb7831128b75b0c5f3690e3cbb073842ff43dcf",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[19],"abe893fc2ec13815f7013831de4862c9676cef5c7eaf6f76d156fb079f1b65c975eebc475adaade59a2fb6e70cbe285e7c8417c41720ca0a3c4083e2e1464a94",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[20],"a1e98624e5901d4b28b9a951a2c1fdf6a1f6525f23e8773370d81bcfae4eb05038d05eff128133653d16fb2b2b57263a71df0d227acc0f17c87d06ff66086e95",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[21],"2637e8487284ce518a6b8348ef1f01602b4f5afd7dc99ca3cf444a277309701968e9ee341d5c97e1d8951a9f5a623a31fb4abcc1b653257d2d678f5e0483e0ff",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[22],"a264d37fc2a5b2e3bd360562fdaef7a239a50621031155c1e99872e88a52642c1148cce4b390feb64466749e8d68df0da6c7d411b4bf4393f8258e6081a6dac5",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[23],"842798c4d5fbe6f082f6a4de47d517d6b7fd3e567e8c4452813df9658993a38c6346fc0de96ff7f56a8050d2069b47943992f5d76007c5fbae9a1c1da133e152",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[24],"4459a84aaee5cd7da6f448ece69e7c1c8e55838c7da0ac0c2fc1e1764f173b120eece921c589e4e3dd3ec4b054a835313698aab431ca1dc56a3dfa1386c16233",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[25],"5b15634311698aabaad8834053d56eab90b9701575c8ff05cb51282bcd4335a76a399375e4debfe259731e0872e6c22a5472a9299d5276ddf5837d0c61517638",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[26],"7e710a8edc28c1197827da8641a0db98b252db83917cbae640950656cf957c4d0c6e38c8bf1b1a183a18119122b1e32daa32db512b46eac72942f35802f5d3e4",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[27],"10a48808a8cffd11c2c65007c757fdcb539ea3c8acb1b539619e31fb321ac141419d0dfdec6ca73df3e6b9b7eb419358ad480a8259b95f8406297d397bf09ac3",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[28],"cb5dbab864ec23e527049d1c7e7b34f14e776a5f1b8e3b1844b3ad51b360f3fdf9e5adb17f2562830372a261a8ec66f21ef336ae7b59586311a151f7d85f6984",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[29],"126bf372eeea825ca744e7f0555048e99861e213240187724065e6bb38f093c9328642cd32cbd97a7f7e3c91f09a3e8bb71e152902eb23bcdf14675f897915cc",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[30],"540501eaf0ae87d20fd6c9a426f57ab7b3fd309e5528616d0e2e709c23c030f5552dac020558f9427e0322cb79acc6a7d4a38b377571d280aa31b2e1a932f1a6",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[31],"b77d2ecd0fd13bd3f6090f3011b0741b32e2dfa941d5dfc7b9c88d7ab8910e70bf618d0d6b66d1a821adf4d36f6058e720f0c172bccec3ebd59fc9188a6575da",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[32],"546e20e2a0e0aa0de3b439ad4682a26e7cecc536f177cb03b891ae5cec7921403d2e3f2a879d1b5d13aefcdcf8348b96452e6756de0a551520897bf48b93c6b2",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[33],"fd97230150a97de7ddaed13c42fb8c640926f1f64fbde5870332737d58fe7f560f2073a1e2221d57ffe51fee52c97a8cd7d0da2e98967dab440358d819d09fc7",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[34],"78393de0d93e83d2f94e218302bd5231cdb53c76cecfb62b06b824ada42b6e9b51b25559aebd26241c12e7505a83486c3627f66531bd966abd8d0f14ddaccee0",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[35],"cfa9c7653e5ca7b59c7d48b59ffc8aed5d346ca1714a6f1c19148626c2824b11612f8dc71f4bf7707b0acdc3a0c8af9f53128e5146505e39628583099d861514",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[36],"9a6c9cf6ca333e5c826bb0e7e81faebc1a3370371891d40b576633ddc74fdf610466cab2eec90fdcdad82108a6d03b5b962fc24099b8c65187246e4c9057be16",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[37],"0f429799bf355c5557b5ad6725c4e8a24a26fa688430a63875bf49d831f4763f9964eb4e7e059e0dc2964aefbc6b0a4a4df66b0ef4734902413512d17b090be9",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[38],"e5608e5c3182aacda6dfc6ece03d8edd20ceab5ef3b6a3fa91338bb612c19876443ed66d32ca047bc2eddfb75645a5ca9e6b1a97432ac1a6d0a070a673eae473",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[39],"065d01ed1aec41406c14101a6b8032c699223318687acf7a09bd1c997f0f85848446432c24496672949fe8f8d6c74f51bf57b0b359594f81f28e856d7fea21e3",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[40],"f531ab0c780950d1f787e478e24e5a09b52abe59f3d5fbc48a649a1dcaa491bfcb5be21662bae3871e4a41d9ac5710843705e24b08b1576c0d46943a5c3c7714",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[41],"bf55a058ea8bba51a799cf4e1e8255b011f4d5bbaeb25543c36bbd4d4f43b10e8a300d99d414e65c4d20b031a9b40c67028c3b48f3a4a37a6fd64cc8c6c63a6d",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[42],"fe0fa669eb9d3ed9ef94ad08b1f2a61df3f31b496630bd807be92b97c4ea7242a55293b9b3a65b546bc5f5bbabe0e2be4acb5426ef7d98ec3d57c56fb6321a92",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[43],"d6f31f0bc1a1395385a40d60f48005513a2d8a5bd85c79c8f9bee7778c8828e1b493acef89701e6dcd5d7a9aacdc21523eb40858e018c3b955fe5b6fdc371c40",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[44],"ecc3af422a4c52fbb9964f27641639533954e61ae6a5bf4192f91e6d7c5b7f6977fe85fdc02638946ea11fdd84cebdb122a716d9e0b3bf7a9b1611414f6792de",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[45],"ada4f12bd80e320ae1a565e14fbac3b76cb307c95b3c9d4b76e23d988ae5c6b683638414bb2232505c689f3f7b2bbc6a92792404402dd9d092126caf5441a51e",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[46],"83ffb5a862d68ca4522b09e3da8ce1bc2406add791ee777d4c0c9e6ede5f6961de4126d97a1116162ba90921d926030b2dcd3b23a62379c38247018e685f3563",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[47],"50729768e95b1257a6db3c68e20985c0766eabaef23a41c05f5c90ca9e2c8e6e6a6348d90370d1eed9607618538ef7da054b01214535ee7124be448176bf12db",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[48],"32865e2d9016299b089a27f53e39d2efb4ce7dfc04addb9464dc2fa32cefabdd82bf6288af7e62bd44038e38e45f87e462b2af9eb3a2ecc551f7cf8c49b2e227",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[49],"e253b1ed6ddd95738991d8e01cbc6f04a199c6aa6fcea85dfdf1d8bafa088adc7531938049f00b8e9c190b4742e0c382106080bba4edd9c20def4071970991b3",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[50],"705fe66426549c9e99a399ceeeb733539876fc90c01e0297c309c9c2d985a6c8a49f249e3fc327cb6d80f777da90d3d5dfbc2664df4268143d42ca4b3c37d93c",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[51],"bbb808426e42564757e4e9df1c19f93edac8d57948f4e0be0d0e1b185915b3947d8199dc289149775758f75de6ac2de7b91b664a99acbe2a092e3e6bd49289a4",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[52],"d60ba44c2da22211854a721f7afe2129f1c9631e314e8881d46db81f867e505c5097b01869d40c24f64a5ff014db088c99fbb9603956070448d48642c05c0e37",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[53],"ebdf5c54727a0b552cb19c339529d788b04f900754b4cdfc821a043c156ce7ff4eaee511d49f0d861281f3917173a4d84341568afadaea3da5e725ac2745d18b",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[54],"ac81b7dadea7873af6efab69c01ed0136a8aa9eded58821744d720a04b3391f6af141ac3c43b13bf9ec66b439e1846d3d7d51618bba39546631ca780506de36c",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[55],"c76725ac66c01c6fe1b9c2f118f6d9dde8d852127b6efc425d7b7e5c4cd77014227694d64606be78f9a9268da82c38aaa1a5e3d9358c7a305264153fc1c909c7",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[56],"dae2df893be2526e4380dfd8a5b20c743f531de28dbc923c6e9725a4e9e75a43abe818088b0a41abc5982ff885578a531342acc2a628e1ae043d318425dc6d6f",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[57],"ea42402a949afd5528f5d28c321bf908a4bc758b88db45d268ff5dca8006226bdeb862d78244d1bddf6b3aefaedff950532d8dd255552fc0e9d4dc3835bd0928",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[58],"717a4c1fabac77eb4fdb6cfa353abd3ec5200ecd2fc230dfbe293a3f725530e2e583e269f759dc07ad2b52d61612bbc9307cc08c7bfb0b02bdc04151c36f66fe",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[59],"fcb7f671031fcfa17be1622320d762e1d1a736dd568439337c1c81cb62fd7fdd2a62a0c3bc91fa2bc017859645b05fdfad43f9c0a62c1175f011a2ddca29616c",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[60],"a36d6cbe5a2526957911d0a50bc31e512170a2630eb986c304792b253d7b145f849fda1a1b6026a872a18a670a973fc6c8ebe45a6a1a5effd5c501e097b588eb",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[61],"ccbb3d1635a2f6655bbc96d1c14f752195ada395a18b0cd28137e06ef5ad914168768d07da3884c1deeacca28892be9f88e0dc29d0f87da09898e0011d267ea0",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[62],"a745a239baec0408dd41ba01cbe66c4e216e566c481cdb7ebecee876112bfc38d3cf145bf976618db990c33bb76f51bc4afd11e7183965ecb814016d772afba9",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[63],"d16a6f957f5d0cb9cf74b7a1d4368733ac06fa083143b3d292b6a416a3532b7417da9f9e3f03f627e55d202024b6f3115a3a165c1e235015bb8f6da1758fdc3f",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[64],"9f4cd203b4aa1f386663dc176f6c80b3c29ec4ce8c09aa5c248a27739498c6b393686a2f1934f6b5ea2629b83c9155345ca93a8b9d4d4b282fe7b9a4c0986241",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[65],"17d8645063e202c5be051c9c3e884befd222ff318ded21ab1d39ce87d01ef4e6dc1c875e69cc37fd0e34be64a4fd92ed483ceb0ccac4cfaa10887336522fdf82",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[66],"6f49c60479d87901fd4fc3f48f169eeee616ef2bc233cd764f913631f03e64de04a868c440a37ddcb2942d0402fc22098742d09fe9a7e5fcee37ec885de8ceb0",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[67],"ff28364846c15cb373e181313e75ad4d212ca0c8e005915951498958be3bebbdc8f3104d9e6e2afcea2f7bb478f6208873de13e6a58d6a8f99a8f0c682a76c37",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[68],"e5145950154dc48a139ddc6116f8fd449d76425e9869396cf2cf7dbda339840836aa3f8d7ad3ef91ea898c4e4f10fc935186d4ec63d1432940cd05c7fbe048da",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[69],"df7c807b674ef4bc525b4e43d2d592eb7e7cb52f627353ae38321ef4bc8b841bd8b2edda01e597592052506299af9be1d37138825ac2e075fde15ab08267416c",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[70],"bfc601565a77b1bb8fc9274fdc9cc029180a5ec6f5a1a4fe9290381ad8738b17e583e63bb39e6d588f87cd650eb7e4d7c8c8f19b3fdf1158c7761ef5d2fad6d2",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[71],"4d3156e48c03300c305575496f32db1a3987269dc1d57c1825fbff214690a3120fb8294329744758fa467f74c064901f3daf4b2675c8e250e870a533fac49540",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[72],"9712e616c11849095a830ffc57cbcbec5f8d6f07ce9323add389bd6f8cb680a29b20d2a9fb34341948b8e8840879d659632aee18bdc27e3181b4f257630443fd",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[73],"1ae7fbd2699cb2e983609bfdd246fe2a81fe4654033dc732e9446931318888ca0935fd8cd4b9db46215df9c4b80d596f4a94e4930cc0d104611a0780f45bb68d",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[74],"8e1d81e0cb147c2d047a2dc3f8f30cc392d8134b57a3e6fba3b2da1618524025815a84e0c8774e3aecb0d4c40fe509dbedb7f57c54c1e7f971c4a2747586fa7e",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[75],"0ed601561370a6a089fac4aa276819f696cc94edd2f7505e87dba560035d048ff41b2273c390e98c92ae4f22a80a50c11bc8d3e2945e4b7f5db448420dbfe387",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[76],"9e2c191bd0de7c79114cd93fe51bca02efedff66e69792fd3588e208d0cc216ed9a29198c006d593822b284b92c75dd8737f6f626f3b9043a1eb9754c5f11708",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[77],"035c662cea91fc16d08f93aae42c3679de94aa333623cdf7050cc03760f76462540935942b5ba09215dd72cd70bf6f1abdf197fcc59d94e208d6f4a830f1df36",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[78],"6d5e746c01836bf3d384d38307de7f3a583d25b593c6d43af0d7f3b1bc8e692952d25ee4ce9e856aabb9cd86e7c216f79652d090aa5dad113103436c911067fe",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[79],"9a9d7cba9e86e0a621fd19e592a0c1dbd87b050d124c6eae558f0f315deece7633f5d8ff0f84350c18fa9f6e0f8626d8532af913f57dc2ae406bde35e14317af",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[80],"15e5d09c9887aee354d9c1a1bd7bc6aa2caaf9a08f78722c7b8268fe84b84f19f40a207cf108ba60164b5f78cafac7011e8aaf05441e14fe84c0b996b73c340f",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[81],"34216e260d73228966312f636b0ef814b3b5d5a82d9342894bf8a9af64cd889773c8fa4e0ae3425245ccd7208856c94c02f54c065d803eca9ce27c034ad8994d",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[82],"03a9f1f5e2c7550b637c02daf2ba07c67137b1121f381187cd55755babc9cd2d540cd998dba56754cea1e032f486460ae1ce4e7dfb5a414bb2ff5fb3460f54e9",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[83],"5a84cbf22ee03bfbf4778952fb9be47d75ab65048525091e70ba41413fbec398a096cbe8f24f602f9df753ee289c3d505e56489f1b7314ceaf8726842ff1a778",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[84],"c05f218fe8fab18051e8bda87a5b0eca8448fb25db70e9e54b0f8c9bbc3c5d7c78e73e7b50141515d0dd52a395d239e3bb2b92e7adf8ae497087102b3aea19c8",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[85],"6bdf05e7b00d1b5670c8b1708e9336ef15fafb6c337ba9cbd35abde8823c236d3878fc828b2b7879a9353af19ba7a144d671411aeeeac3a94c56ade9bed1d642",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[86],"6e8506fd1a27e3ed31612f09e8833cb667afc63ccd4e87e89e75aa5363a829d023e76ffed8469dfb4945606d5f1dadef49f3d34fd43cc39b8118dea6b45c14f4",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[87],"ec4af60ab9fad68d2d48b91220fdb28bb68fdb150a10efd1cf4ce60b83f6e1ee56f6805c9411c390126c277317b80e8125f001979352028354d399d054d19530",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[88],"75b2da64e17d260b4787c6bc61be505a694181c6d05b3aaf2bfb05a914449708309b4951ab5f42bf1dd86f3a43e07093c8cd59826683fa087d4e1d37c855077d",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[89],"d1c6c593dff6282bf10f77c615f0c138ebaa7a63da206cb0e10a76d1ae05e080606b0881ebf2b2f3ffb76a36255b1236b4521bbbb3e9ffea64ed1efdc0365a58",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[90],"b5caf865a97afb2c2536dcfda9e67899d30c4081e3dd2b26f7b00d418a89bc3fab9a92bb1cb8d687a154d42559a6e4d9fdff66038b7c83c5025cc6c32dd5ab3f",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[91],"69a0c756b54b2544cda71d888fee6235616e7dd8c95479507716fe1eb0f0269827ad077327a64402ec370822b8a1e7309711b2711ba5086085867480daabc8b7",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[92],"23c97f8b448212d367906ff427e0ee4869aa62e62ed4dc978e3b71c2a7592dca2e8e36a90f9a4a1993e001dc6ac569fd3a4e79ce480bad9c3be84b94c5d184a5",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[93],"d3d001f08fb182d45da7e2d7aa52cdec47aa3e287eca05a2db9b4521d3f97da6d0692732d0a5e0ad1a98eee803581018daa36705d1d1a9300bb584a4a6b3f235",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[94],"cd3313e98e775fdee149018d9ba3b002e1377a9343d7f570bac22dbec2e7070f198c1c92df831e28a243f92bc016ae97542a07136964b95e4bd0eaecc66c1eab",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[95],"61a450e9351435c16e267cf85e704273609922ce1292c3ca01df5b53ceb06e2f5bcff2c6835c402130d3b8c62598032c88a2da9bad409edf8c2bb8935d134f23",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[96],"532ddc5e20089576da891037dae041f45d7d1bc93c44dafeb7015cc77eb78dd00f4febfbffbba7e18144cfcca1d61d20661f359139cfb60d38e353bffdbb258f",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[97],"08048580fedbdb21c2d41d48646750feadbff5e37ad109b37a87ca5db8625c40ffd90e4e42457c855e0650503c011e1b99f5f07d5d7b107827999d272e4fe1db",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[98],"d78753e76c2a2cccc6776c3f955e2e05adb78d4637da6b4578423bd6aa0a6702025cdceec253ba08ac2468a032a4c4a78631dad46093ff07559f154cc01d9311",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_secret_key_data[99],"cd4533d6eb31f694ec7495289b32e4385ca8e85a7a074bfb5e0edc925126c39d780959e473ce4804c00652d4824b5bffbd946259ffeed7e01928fb92ddd944fd",VRF_SECRET_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[0],"30937f955e0b9aa2f34175644bb8757d2ea9824d6dbb720ddf776c3b79a9b5e4",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[1],"d0b093749bdf2c6f29cb9c1faee7c584db36a23eee203eea6c8c4dd08abf08c2",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[2],"ed9973057d63c20e99d585e64df30ea054876642a13b7252b5b5980ebc22d9e8",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[3],"1726a5bde9805abb298f21e36b3939a1bd615f7357df92579748d683c9041fd1",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[4],"20721d4f35888c66b1a3ffae8707359ebf5a6fc364b7c7e372c38010bc5fe9ec",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[5],"7690af0ac5991ea4a074ceb153422643c8aca58bc6abf43f9123d3a5c1761b33",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[6],"f7399437740690dd9dcdee87f324e752829716b211c773b2d75a28833e14bb03",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[7],"96c2d06084e41ffb104548fcff856b7b5a5a3e4ee16cc07c4a58ccec28fe08f5",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[8],"3541e7e48768b2e13d606b3ddceb3460c920d35786237f62ba7c6183988b9d27",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[9],"cadf12dae7cda45c0c55ce211bd88284ed80f8517e9ec2e50336d5825d7bdf57",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[10],"b9993e486ae271791437482d2435d4e33534c74ddfea4a995f33d5178c7659fc",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[11],"6769b99b36be09e601189d456a4bd79447cf41d5facf4a6e71f853e9cfbef16f",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[12],"1faa209764502353955819dcb33ef0469572445be6fe2db9390d1ac5816f4e75",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[13],"f5f4a0e2274ed331b5a111cb08980d85cf509b7db465f7518708671459923678",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[14],"f341d693a057bea696c2fcf1e96b96365d1eeaaaf80589365a2408cf40d0022c",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[15],"e957fb6923489cd7f814e4c4d012113abd23e59f3f81ae6028049478ffcbf405",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[16],"f983b8197e56946a05785c01d8475e2adb1b49c0381b13ed30396551201a7b35",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[17],"c023317a583604d29341143b40423f56dbf8ff80f04297a24ff09006308c0ade",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[18],"07dd462fd6eb6ed1952719b7cfb7831128b75b0c5f3690e3cbb073842ff43dcf",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[19],"75eebc475adaade59a2fb6e70cbe285e7c8417c41720ca0a3c4083e2e1464a94",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[20],"38d05eff128133653d16fb2b2b57263a71df0d227acc0f17c87d06ff66086e95",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[21],"68e9ee341d5c97e1d8951a9f5a623a31fb4abcc1b653257d2d678f5e0483e0ff",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[22],"1148cce4b390feb64466749e8d68df0da6c7d411b4bf4393f8258e6081a6dac5",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[23],"6346fc0de96ff7f56a8050d2069b47943992f5d76007c5fbae9a1c1da133e152",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[24],"0eece921c589e4e3dd3ec4b054a835313698aab431ca1dc56a3dfa1386c16233",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[25],"6a399375e4debfe259731e0872e6c22a5472a9299d5276ddf5837d0c61517638",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[26],"0c6e38c8bf1b1a183a18119122b1e32daa32db512b46eac72942f35802f5d3e4",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[27],"419d0dfdec6ca73df3e6b9b7eb419358ad480a8259b95f8406297d397bf09ac3",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[28],"f9e5adb17f2562830372a261a8ec66f21ef336ae7b59586311a151f7d85f6984",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[29],"328642cd32cbd97a7f7e3c91f09a3e8bb71e152902eb23bcdf14675f897915cc",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[30],"552dac020558f9427e0322cb79acc6a7d4a38b377571d280aa31b2e1a932f1a6",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[31],"bf618d0d6b66d1a821adf4d36f6058e720f0c172bccec3ebd59fc9188a6575da",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[32],"3d2e3f2a879d1b5d13aefcdcf8348b96452e6756de0a551520897bf48b93c6b2",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[33],"0f2073a1e2221d57ffe51fee52c97a8cd7d0da2e98967dab440358d819d09fc7",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[34],"51b25559aebd26241c12e7505a83486c3627f66531bd966abd8d0f14ddaccee0",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[35],"612f8dc71f4bf7707b0acdc3a0c8af9f53128e5146505e39628583099d861514",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[36],"0466cab2eec90fdcdad82108a6d03b5b962fc24099b8c65187246e4c9057be16",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[37],"9964eb4e7e059e0dc2964aefbc6b0a4a4df66b0ef4734902413512d17b090be9",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[38],"443ed66d32ca047bc2eddfb75645a5ca9e6b1a97432ac1a6d0a070a673eae473",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[39],"8446432c24496672949fe8f8d6c74f51bf57b0b359594f81f28e856d7fea21e3",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[40],"cb5be21662bae3871e4a41d9ac5710843705e24b08b1576c0d46943a5c3c7714",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[41],"8a300d99d414e65c4d20b031a9b40c67028c3b48f3a4a37a6fd64cc8c6c63a6d",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[42],"a55293b9b3a65b546bc5f5bbabe0e2be4acb5426ef7d98ec3d57c56fb6321a92",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[43],"b493acef89701e6dcd5d7a9aacdc21523eb40858e018c3b955fe5b6fdc371c40",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[44],"77fe85fdc02638946ea11fdd84cebdb122a716d9e0b3bf7a9b1611414f6792de",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[45],"83638414bb2232505c689f3f7b2bbc6a92792404402dd9d092126caf5441a51e",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[46],"de4126d97a1116162ba90921d926030b2dcd3b23a62379c38247018e685f3563",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[47],"6a6348d90370d1eed9607618538ef7da054b01214535ee7124be448176bf12db",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[48],"82bf6288af7e62bd44038e38e45f87e462b2af9eb3a2ecc551f7cf8c49b2e227",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[49],"7531938049f00b8e9c190b4742e0c382106080bba4edd9c20def4071970991b3",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[50],"a49f249e3fc327cb6d80f777da90d3d5dfbc2664df4268143d42ca4b3c37d93c",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[51],"7d8199dc289149775758f75de6ac2de7b91b664a99acbe2a092e3e6bd49289a4",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[52],"5097b01869d40c24f64a5ff014db088c99fbb9603956070448d48642c05c0e37",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[53],"4eaee511d49f0d861281f3917173a4d84341568afadaea3da5e725ac2745d18b",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[54],"af141ac3c43b13bf9ec66b439e1846d3d7d51618bba39546631ca780506de36c",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[55],"227694d64606be78f9a9268da82c38aaa1a5e3d9358c7a305264153fc1c909c7",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[56],"abe818088b0a41abc5982ff885578a531342acc2a628e1ae043d318425dc6d6f",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[57],"deb862d78244d1bddf6b3aefaedff950532d8dd255552fc0e9d4dc3835bd0928",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[58],"e583e269f759dc07ad2b52d61612bbc9307cc08c7bfb0b02bdc04151c36f66fe",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[59],"2a62a0c3bc91fa2bc017859645b05fdfad43f9c0a62c1175f011a2ddca29616c",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[60],"849fda1a1b6026a872a18a670a973fc6c8ebe45a6a1a5effd5c501e097b588eb",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[61],"68768d07da3884c1deeacca28892be9f88e0dc29d0f87da09898e0011d267ea0",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[62],"d3cf145bf976618db990c33bb76f51bc4afd11e7183965ecb814016d772afba9",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[63],"17da9f9e3f03f627e55d202024b6f3115a3a165c1e235015bb8f6da1758fdc3f",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[64],"93686a2f1934f6b5ea2629b83c9155345ca93a8b9d4d4b282fe7b9a4c0986241",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[65],"dc1c875e69cc37fd0e34be64a4fd92ed483ceb0ccac4cfaa10887336522fdf82",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[66],"04a868c440a37ddcb2942d0402fc22098742d09fe9a7e5fcee37ec885de8ceb0",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[67],"c8f3104d9e6e2afcea2f7bb478f6208873de13e6a58d6a8f99a8f0c682a76c37",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[68],"36aa3f8d7ad3ef91ea898c4e4f10fc935186d4ec63d1432940cd05c7fbe048da",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[69],"d8b2edda01e597592052506299af9be1d37138825ac2e075fde15ab08267416c",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[70],"e583e63bb39e6d588f87cd650eb7e4d7c8c8f19b3fdf1158c7761ef5d2fad6d2",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[71],"0fb8294329744758fa467f74c064901f3daf4b2675c8e250e870a533fac49540",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[72],"9b20d2a9fb34341948b8e8840879d659632aee18bdc27e3181b4f257630443fd",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[73],"0935fd8cd4b9db46215df9c4b80d596f4a94e4930cc0d104611a0780f45bb68d",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[74],"815a84e0c8774e3aecb0d4c40fe509dbedb7f57c54c1e7f971c4a2747586fa7e",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[75],"f41b2273c390e98c92ae4f22a80a50c11bc8d3e2945e4b7f5db448420dbfe387",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[76],"d9a29198c006d593822b284b92c75dd8737f6f626f3b9043a1eb9754c5f11708",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[77],"540935942b5ba09215dd72cd70bf6f1abdf197fcc59d94e208d6f4a830f1df36",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[78],"52d25ee4ce9e856aabb9cd86e7c216f79652d090aa5dad113103436c911067fe",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[79],"33f5d8ff0f84350c18fa9f6e0f8626d8532af913f57dc2ae406bde35e14317af",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[80],"f40a207cf108ba60164b5f78cafac7011e8aaf05441e14fe84c0b996b73c340f",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[81],"73c8fa4e0ae3425245ccd7208856c94c02f54c065d803eca9ce27c034ad8994d",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[82],"540cd998dba56754cea1e032f486460ae1ce4e7dfb5a414bb2ff5fb3460f54e9",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[83],"a096cbe8f24f602f9df753ee289c3d505e56489f1b7314ceaf8726842ff1a778",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[84],"78e73e7b50141515d0dd52a395d239e3bb2b92e7adf8ae497087102b3aea19c8",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[85],"3878fc828b2b7879a9353af19ba7a144d671411aeeeac3a94c56ade9bed1d642",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[86],"23e76ffed8469dfb4945606d5f1dadef49f3d34fd43cc39b8118dea6b45c14f4",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[87],"56f6805c9411c390126c277317b80e8125f001979352028354d399d054d19530",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[88],"309b4951ab5f42bf1dd86f3a43e07093c8cd59826683fa087d4e1d37c855077d",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[89],"606b0881ebf2b2f3ffb76a36255b1236b4521bbbb3e9ffea64ed1efdc0365a58",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[90],"ab9a92bb1cb8d687a154d42559a6e4d9fdff66038b7c83c5025cc6c32dd5ab3f",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[91],"27ad077327a64402ec370822b8a1e7309711b2711ba5086085867480daabc8b7",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[92],"2e8e36a90f9a4a1993e001dc6ac569fd3a4e79ce480bad9c3be84b94c5d184a5",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[93],"d0692732d0a5e0ad1a98eee803581018daa36705d1d1a9300bb584a4a6b3f235",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[94],"198c1c92df831e28a243f92bc016ae97542a07136964b95e4bd0eaecc66c1eab",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[95],"5bcff2c6835c402130d3b8c62598032c88a2da9bad409edf8c2bb8935d134f23",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[96],"0f4febfbffbba7e18144cfcca1d61d20661f359139cfb60d38e353bffdbb258f",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[97],"ffd90e4e42457c855e0650503c011e1b99f5f07d5d7b107827999d272e4fe1db",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[98],"025cdceec253ba08ac2468a032a4c4a78631dad46093ff07559f154cc01d9311",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_vrf_public_key_data[99],"780959e473ce4804c00652d4824b5bffbd946259ffeed7e01928fb92ddd944fd",VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[0],"4a4d53546b76686f3978443341634f6470364a79504143396f6738344c5350697578324354375151736a48526a6c557866755455536c5336714f595a774437515a58684753566b623352516332417a355368517971777345616774764972397663675a56",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[1],"33647748446639706f7a5543434f373030386d67713333594861777337503359536e756a74747946536a366a5633374c5a685064384931464a6c594530507347314d4e6934614e4b68485232414f42705467745250696e6d75394f694d344e4448714c42",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[2],"58615148503151384766627057574c4b5268514b72336676536435574e336879335634494d4b4667504774417334383839504771474c4b6f4d46397179674d715a47577a68724755575a6b655368615055473471664543533742367446474a7564755369",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[3],"516376536953584b435234464f697269385449746d795470376e673731774b4977336f434a3964624f35457462547a3943367450756132706d386b6474564a504d56696d546a6c7863514f647a65613061724673737848457451464d4264716459776e46",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[4],"636e4d66546b467152575748464a4e4f326c63316f65707476526b3575476475554e7a42573250444f7a6169374c575a575750613034726a4a42663338676e51524b66444453366669346e664637327254487149434850623953333557654a45504d3767",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[5],"34666851414d364f38454f3272696c4b734532694f645533585a5568315157545633786a4475584157417162497a4d5932453447474e787241697a70596c384a637651444e44337833687a4148626d7a4466333951727267784f766c5a74535a4d79716f",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[6],"75677548687a7365507a48397938614f4e6570374562646b443744746a3837426672386b506f6f754f55726151724e7475306f59327136766e414e777749564258544c43363057494965496f746a464c6155783261756c6e535748657573476939664935",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[7],"6e6e4b496e716c767a7a457361436c344c704647596c55507665464c3970556b4275524d4932353572416e7030776a424c4e35785951636b5547545254443069564856737a516e4f657a3334566274764f70534133544b4c70727436556866454f305562",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[8],"7367344d4e755369626a753772345768636b6c43326c4c51716c686a494747304e7a416f526a7753714f4e46477a4c4a4a57397a3549676c556c7371525767736c4547304e314732466a786347384a675347444e66485758536364795a684f384c6a5a70",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[9],"7941795a31315971343276447863647a45436b383270707839454631485a55337067536737477531774f7352517668695670654c467438435743747472646d456a344a6679333654486e416d47487373567831714f595141713954466233376956476e6b",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[10],"366c6e72447268734e6f32756c4f52366944354a377a61775a4c45567a58647536714c7a46515267354841656a67627048365a457558596879743256653566616a50414e7666546f4c6974556d7561546f586d474b614e36744452787758774543576856",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[11],"696a597a7138744634384e30386d573169396c685a6f364f48636e6a6976356f44544e5450346d4a315a7a58616d4f696a5a7038646a4d4a6b5953716a4c464b766774386245493074354e7466727a6f674d6d68575851364c796b5361507474554b7254",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[12],"356c494d766c42576f4174344e36764d6e506c306c42437361756d694557737936306172397a656f5a76694470426641676f70704f50494d395355434361307959304f5971516364396b47704c4a4e5157303541464263466a56374d565638494a4b775a",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[13],"305a5a756c7178677668567155305159354b6157795575384643685934647855316c63617a7a6555475a386f4e4e64476e62714a554b4670634d62364f774f464651443565484e4b774d58377059444158533748734455746656705267326b4c494e454d",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[14],"5a4735484376456d6d5a545666574d314d584f6c6a69597a58636c675647484b63416845564a4f3577795141697472556533336e62524b5a555433447179637359685649527a4462566b423444514d464a47534c6e71793539727a70504247444770396c",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[15],"4e6d426f5a5471674d58366361774d42686b346d6349337751656b666e6c67597947646c6e72725a646c3064484146504b785a4c3353354a56664d387151574d6b58587964636c676f396854414b7738356c4a593245764e48374a594d747957666b6969",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[16],"51776635516e4e495072787443375867353473574b7270494e434b68305659456633415665627254714e64514b30584456666e7475435a3635796454685a6f6d534d36574e6e45313048487a7675326578677751476c4b7a484c6a4f4276316837563249",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[17],"69736f396e796d4179443844656e6559396367786d646b4d59666374313555616f36397a756c5a514d58684f386a44366d4a72774b43387848385179327977657577444f4873736964795763466e3650566e39765036536b327748555533596570705156",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[18],"7457624d794b796e643058527151644e7349316e4a3032454a4a4e4837476271726330504b6e304e644e74747477354b325758414b50326a6f46506b635179725470347443553544786f56514951714241645a39515267356e56646e4342436c51774367",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[19],"4e53516c62577438695977446b51486a6a437777415461304a59345365633850564d3055796852473562616452466e5a364a6c77716c6b583765476268435230654649444e7039476f374b3642565678753454496634776436326362735231776e795a59",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[20],"3344504a767a5239326c3472787952446d6c43325043595974686c486e74776755624e674175647347374833756f7647785678616e6c5a477338624672784a63796e6757466a636265483377556f3366396f676b7a35515133536a6964546941346f6b78",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[21],"53774a7a4b745a6337767a57373839416a3257643570384f5976714c306e554a487438684c586847684773654373444c6b704d64434b517133343255684d724f346e54463830626677726959484c7851596154724b7a464374786d79384261324f54764b",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[22],"5346547372797a4d446b58454f6d6749696a537a78715062575573636a6a32314f4a68333745467a4f71337443395a4b6a463845564e46477658494334797347377a7a33343471476c6a584e684c6d6f676b5330566c776537344831725a796d6d566667",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[23],"556e79324f75365161674569695434794a6d5842364a6f4135664236664d335a597050414b4d674951495258734a6c5a54367150464564414843764d666f7a334466746250794b763670676d577162466d736953556c67734c42325150734868765a6961",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[24],"4d787546584f6a7a38727048475731357844347a384b665356325958593138796f73313935617933714f795779715254544b67506b6d7935656b5130624f6f7136677031654f53757166654d76557663754253454c657a516f64476e5254444c5852425a",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[25],"3768536b7431506f766e456d447052567530724643397359695436384a336a48385a50705175443949366c626c3358445263386a3972366838306647526d644e6253305061734f496f304978527430797658477465414161714547374f48494f6e79746f",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[26],"4f6a7943454c35665256634b67714632337a5a39585553556d6633395771464141313332435737694838534f6d6d45664a7464776254656d5a366c4c6d4f624b463243364e79636b75555745346f4942494a564873305468553551364a5146644735376a",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[27],"425a4868324c526a6c5138774273586375757672494c574274725a395576356a6943716162356a6d4d664764777265514d7a386938534a7339787254536b31594b685a4c6436564e6170517748556368693870675157794f684f7858596f4d7a75423876",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[28],"43656b7a4f5a3439464443697161425a367944475137346c62513845796774306b42705a716857554a6e325a6e744d6850664e76624648636a4646484b597855704c484453736e72466467517751586255797654333256627671493563344f72466a566e",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[29],"4d6d5a4b5479353754703344324b6378394f6c4d5733725a706f755434624f466e4266355a61324a6e55616473634172514b3141446a7052784979714a63565644595172584759617159654a59435943615132435a676a6b4f48796c486a3638384b7056",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[30],"626e5230364a41696f42764a743752725461333950505844764a6f4c49523948324f77586e5735436e6f39486d525933505132757450584f6d397054526d7148304d7563796f434b4342664d69314458487768596233436d32513548306c66525778546b",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[31],"42743562654653544c6e34625831446f716548754a776f70715a524966707a474973484e58717578426f796d665a417532354f4273325147527665574b4271685256554639653241726f4d7565614f363671786d69625358775648346b58623248547647",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[32],"4b7945393358427856595838487874714f7a7550647131426c357830755974326b5632634a747873686a714f474a336b376c59387a507a4b4c56423348535751434d5139336472386d494c5266455a61504e396574794d32686456505546766d66626c38",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[33],"59575158754b587574583751564d776833344b6d6b52703767435846304d3650794d41516b6c384438356b524845597a78784c486331436974704e693248586f686e33727931547556316371765950516c726e6e6950757a333748544473354b44593231",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[34],"6d7a31524d616b6a4a56725252676874614d47443756586350444f647642414830726d4170774a5766314556354c63336c487769736869354b5738336e7a42624f4e413238394f625969555452584d33733639496369454b324145675833684347467343",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[35],"6959626a6238343848446f62656146546f4b743469387949527145364330504a504f53514b4b4d6965596867594e30636e6a357466743156497452616b754a583771424830644e323256394f7958524a344d32373355537a6278416c5137384e6e786963",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[36],"50376e6d576a647a564435365778615549425765743671696564694a386c454f6752593030306e4b74684564454357613347656b43757347767a65734949364d6e534163494f4d3056653170474e6f7a6b734b4d4c3068366e6c6f56546976365a573678",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[37],"505673524f58416656367857326a52766e51473347676f4738624368525562774675646868436d3079484d6f51724a32376556436939386738416c50696d394f4762564c4236415844616269734c616e50565058534c3151616375696d72575273477152",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[38],"543770736233366351715470625a6b6561437a476f6f506f6e51374d753367643076765a6d705a31464a6545796f49784f3531326b4566766c61364633634853763246486976774c3242676f504d4a7549426b51356e39656f354b663766587337725964",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[39],"46307265483574596c304b304762427a4365455a704f68464b50535861354d4456314871585a66364e50586a516d47686f6136445062386e4f4f624d4b4c6676424c4d6d4150696273356c3668506476513757743655454a7a466c37667073473032536f",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[40],"6330795570654b74565262414d616371466b7243437045624761794c6d376e6e594a37624c4673786d7458587258625536746e794952796353554e34535a68457764463849587454656545763246665757716b743849764f74374739574d44675038636c",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[41],"7756305567343836623847426a4358595256573171545875685865423037456c517335576d34516c326e4e395079587569486c776f365176545357494e6f5475474d6551475632783846754c316933394e65743238386e5051386e736d344b52484f7862",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[42],"34434e4e6a486e3674537769485034776a76594a39486c4731444958694f676367544e6e70306a4948464f656b497a72316c305a536174484232754a45424a49696e5678623435497a4b4c4967615a386c5158314f657a6636544d41696c387279524f79",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[43],"6967466f4a617a6474484e704266327a3646724658496d715969645451707058745462325279333836486f784d67554a4a396577496f4b77774f666331735a6b625a63526e36506842334364376d4b486b4d33533043636b67666e357861667858666339",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[44],"674d32506a736d33746c55346575767a3337594b53694d4546396461414a43456c736b764c756d324634574b6d6837676457515632716e797071794e58596839677273504c4348667774504a7a4d504377746c70487a4e574e39784258457931554f4874",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[45],"62777178766f6937597234514f666576346e5152534371514b5177774e756d4d4f4438395265374677316a38366f74597a384768415557397967743979474c633948634f4d37683659723453466c48346a623949545446685959676d755070726e703558",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[46],"71783649364c744f553847354b345934585863443178464c34574552376b506e484b54446a636733384d594a464c42717745546e316d585637724334436767394f5a425830464f596842784b63585a7972494a69567733514d754b637951626345415875",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[47],"41446473354d6c6d397a53346c7749753032634e55585a74486177503952527a6a555065765970736d376d78735550694b515675424b4f364c384c4b4f723758624d5a7542654d4e63576173454f4165756c7a5455625076396f334c46307746436d5a33",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[48],"68376b6d6d6a78785a364d4d4d5446633743416e637472506b4e445a67564c6e51547a3232556e50525a7372475874446e534f716235336d4878394e674b5957746c4e6a3630594c4f65326b5a6a4d64316f7233696b64504863714e4d6379336e62616a",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[49],"52463849644b6f545736726d345056626836514977384b584d4543727a70546753504d567030443955556b4e78354f435a75626c714c3730647a66434d5a47754569655337485052705a754d53376649706552474e4f77516341684f704e395257627a52",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[50],"447577766255364c6b664350345755764349594742335a3836586f396e6d4c4f473561465034675961474232736c6c5355376f6c596268555a775561477450636f4e4634484c5146666876777345656142726b71737261664e53676a62546a71754f695a",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[51],"4e454c45676f506e355a55326849665474783658537371565539683330736c4255573559614961337755564471596d4b6b6776327a4c4e684b556179616a5853335148336f46564970456146746b64447277764f3736564652553150334f795875334f48",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[52],"7271416a754773494d326268566b464d6379685068726c445a436a717675664b494454303939774b5a78524b486b6c4b4773704d4a796679596d4d6845505361697a31667a6e506f4a775a6745614f6271314e5a70516c6430586a754331754b716a504e",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[53],"47426e6b656c7352577a4970686d3746624f524c486e4c6f646a6b39785773316c4462714e72357a51434f564f4a714f6f376e546b58376d36696c7232436a64336b7247416e34674e493272676733756366646d3238775965476536366e385a76707756",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[54],"777778654164485133576a35385364426c41514d31506d416d70724c483365326e7a364e434272776e7a706a68744a74527035493467386676704f3067535373674e3547656c30714b677a52783838636d324b6738486a725558685a455968497a636544",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[55],"6d34646a3743443832586d685343766a3158746576715452773841446f4e54794657494370397966584b6d4661464d327234364d6b5173464d53385974506e5742546d4f534c52466a32386b784a614f4436704c4b48676c6e633948526d72683345544d",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[56],"556a4d436f64534f58627364355775446e5a544a677763417a466e4c494d78745537543861424d564135577450675732334541383043796e364d5a456d6b58366845336636463075794d4f6551793448327546515632345243526c4f31374a367a413974",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[57],"7079684d4f444e74526d596f6f3947696644455a4b437a4c38326333765853496c5a6c59715766363633696b324e71356755544f6c677168387138726452307045396256546750513958595a416654465a416a38477866434f6553505447346e4635366d",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[58],"634a56786f486b36614245335a387349466834685037425130356e4e77344377446c545153314d5173674a66635a4d493647504a42656f726142337576745157457a436b716630486a7a4b6d6f6d5569517851684234787a7471544f4a7a796257316c64",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[59],"794b71575145753978383951746577484742646d716b7a42514e416463417341384a6b4f62434f79414c63545079706c597376634355446a78336b787442567038333239764776566679445555533349386f4c79386546743651516e6642446475766150",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[60],"427767676d5347506c426a343639484575463877684f416b5549486d4e46796332466a636c4e527865597039585844677341414165304957776738384c786142306a4262566a7958374d57547a6f5a504f706451644d4379514277705777504b45674c6e",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[61],"614c7049756844745562344f4e6c495a355a5064425636784679587741797a79374f347355784a45784368614e4e59474144495a6f456d533237637274425070654b4657356571734576726736644d78476b6d544d787a467342554d3178313537775231",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[62],"5756766268716d465a547a4643385945364c307668584d614956594f4d45677970427a75524c5a45756d385569576d657662414359614175547038765263523444676f6951634c386d4a52767433784f34566651564639465337597a614774424b474971",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[63],"72526f354c6e30784b41625263764a6952343936646e6a52535635553678706c6442684f5035396e76613477774445627842357a4d6365745837625275713378536161763337497036444a7334647273446b50666d547939517852384f4975754773507a",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[64],"6f545730346d7866326d54544f44545848544b387777654a4242715845787951676947387534656e655834546f4c45567466535042576e306e424e50593976326930314355334e594f46463368384d7964756445676f73735134354333707639666b4158",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[65],"39794747426367436c65474e66636a7659377048514f664e744d4f6a4b44394a31446471456853506c6f71716f7a4b63775a4862444d4d566e71345852317547767657584145434c51525a34677a35427043415164634271717662386c7443454d707263",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[66],"69776e475743394d4a33506a6c4257484d4c6969424f59494e37705a7961544575346166773850365a76666257304777424f4531727378346f4e554d4c42673676656251614f4d3039505a5444766633384b55703068686353314f7571536f4b56707156",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[67],"5541586f59796c4563626b6f4a646f6d65724934376d38766550436c4a73697353354746725039724f6b446c6c53766e3732663465656e6a524e736f3679474d7361684a4e6831727075417961574b384f503051526358794e654e4a43686d5567727354",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[68],"5859586e6d564e76743968476a4a7a75555269614a46534a62674e30584239496e57567a4677565974307444785356687a3368397758477832696c4e4a6a6c5735356b7a72336e4c544563676e566c4d4d744a38656775346f4448564d5246474d503531",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[69],"4a58346b6f70347a55746e47703778703967424575794b71596d563650674c7034447867537344424a5137574c73624b79416454574e394b595346445a6553524865586e77714f35354d52473451667265693830543579484e31394335506a4154344f64",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[70],"534a534d6d30577937707264314d393831414364596e58704e314f7670674e375075495a6b736e664846677966677736455937743955494c4a6b3459714955343073543849376466416b42446f597a534b7562496448684d51624236486c307842497639",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[71],"67546e4c6d4875436d56736d6d4f6f6a6633584a37754a6f5337344c4f4a3853716c7444524e3533776c664a587353326a447a6859377445326d664756646f616e46423467775643465a6273685269716a48783545527a773143304d45634b5248624a4e",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[72],"4e4e545751586242634574577567363073466d353168397250566d6d66546551755644394a43794a3653746f597063665470384b75375a3953396c57526f4339393338477478666e6477435a4d4532745230336359513945506a71777852777549733132",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[73],"6c314c7975646e734176364c754a4b626d627438523866653948387256546d34495673315a466a703064306b4e796a587a4455664258687a73664f65583038744c726b7957734c4e764256365835536c7743715670766b497a594d6d4d4b446d5a4d4b4d",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[74],"7855583852357447543153374e4e4256514172476136396b674c6a305952416a426e67696a7a503072765732366c4e4b4c33684c586556335033524349684c39755267426856717765636f386e304957524e7945526876763861584566774578634b5a68",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[75],"716c4874303048775046476b326c747369595167644a694f34477058563939396b457361735875387431676a617a7a676f666b704e723146586774486471476e54586c624b4739317667387446787a52424934655a56484d31306a346651665944725862",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[76],"78584a6f49344a504e4a6e334658396e35525631496e3265554e61466e36634a524b5671457535683368397834384b5a4e744f6c45476e6e686d537667533459735063563835305a635a6d3558565379637849483156553935417561696d597a5a596b58",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[77],"3470695361547448647267545a6d74666130716d507a4751777148666a6c4462794b547774623375733965676a766c686b7a745a5759476965646c6c6d4d6e496d3634453757596f563275336d44617730736c4d6750536b513176304447775142706b79",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[78],"49793876714c754d6c505866694a6671616c65765052684c524a61336a566850686662794f7438303756336673377674697a4d566654775571774e7a6955657058644c43784a7175746a784c675332706645386b6c763242524530586d336461364d4174",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[79],"44486b72456f6a696a6f32487256654f45635352314a694845496b3976654f5a4a596764636e6b6b426350515654756e5663344c4d62676548716232735052324456334438644e786573655a627762567a357739364162445063773750625a6958524c54",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[80],"795a4b31386d754558497575676b566461505131347077694d386a506a3144485065794e6f5266636e417573496676495539784d7055535a515a455a523675773851376d78646d4c424733394c6d46756c3134794c4e6e70435165684d77424b637a5541",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[81],"765545574b6f5a4f466b314d41447271726d4a5569613042304455665a4655696e6d35584153423331714470535646393564546264484333396d3859505137323030507147656a78744c4d62776761726a52716b7054646d333961484e35784454625471",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[82],"6d356c4f6a4978423279323550426a4c644c414f395630744446786f334f6166486a52515166664944354467774d50786c663969305a43727558466c7a4572374e364c7462525a434b734735326c736270736b64664b767978594a577359543456766c57",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[83],"45544255534332434e6a6a674a3441446a385279454542535564354f39676a455a4b6f496467385170665557616b716a6835464a7a35706a3869563770354265444e4b4755496c374f33554f63385668336f51736a357a66626a64716343744667336159",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[84],"54374c55426e55324d346e6e50563877545a653051613738734b777a6947363043464b33537354756d34463251456d7a72717137716c3447546f3532565a536c757163634956755451304c757558544a623747726a4157324e50537946414858514a306e",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[85],"6a5a656875767749746c5a714475746d4b6f4647316e35314267496e67427470707676485152673730356f7570464530543975496d6f414d75385a4178694f4d44396b69516f66456a72597857716c447146614152416362773141523965734264434852",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[86],"725a506a565658616433415939747344705572614f58534b4b324830476c525839753655675553684c6a354a436c63503675504966776a506f4f4453306c475a444348486b714f577a48765a547646504e696e534575795137317a5861354b4376683947",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[87],"795344467262776a655a4e7045303545777179553765684974334551503678624f3046335a3163334f4f696a45654c5973374a6e624f56764670626c6a776b566d504f394550326a74627156645a4a745767475953716a6f4469784e464877506c625050",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[88],"32534b7a5371364746586958674730526265524d4f765456744464733038375351486678586331715839653144324743346e65494758745a6f7768657663563948307573306c4a4c694c434a423862766d6532535a6c4765474e695a5133576c53684549",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[89],"316f6d445967457661316538664555447a4c7836486568784b4532697538376d6b6a4e377169737137786e615a37456f475a6a6534717a4353724b646f496e7950307433384d6b3337763457737761576c683064796e4467466368544975666e6c7a6868",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[90],"37367146583872634f3141436f304d315533364e7056643550515638795173764b47597843647867345848684f6a38776334377250616c73513671654b47786b636a46456b324a6450676b7270694c71614a484f4851366d4d6e6f6d544b7555525a6d32",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[91],"7552416b556272356c4d6830433465394f44684a67426d7264476c4666364c794e6249796158746a7879395a746558354634444a744e30776a62307037424c4a436a3542366d4b744c4b67324d315668566f516331477a62466e6f424f58616536334630",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[92],"50683874734448765434696c333744796a57774972574a486a4f54796e5455303051686a6a4f43304749617a4644584d6f696b443452626277537a4a4368797159467a356930554f795565326c5a457a374e33317532314f4b716d63774b746b6451646c",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[93],"33475077777939654b635277356c4252466c62646578394762626274695264396d52754964744b4c76723870427836364735394a7336667237674964564d6437727647754f67363877326e5870685257634f74754b794b464367496e514a6c3734507348",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[94],"304371547245424f56366e79474853596670327a687666466c3665514a48637a3974677258483547426934354e4e5552304b6735356a41666644564d615839386566705a4b697662706f34305a4f4850704e496955376e5a4138427955417757464c4d64",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[95],"6430416b586d687944516c76576761316f427572746d654a794d746c5668525735663753706367515170634476617349424c5a555832736a454a756e4f39614a643572733777394e4c3965373978464238736a546b7a324d396d594e6b576c6e5243444d",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[96],"4e594e64673441544f6f75506c4f3047304a306d6a5752433279427a4a39526c58756d31704d4b31593447374775457734734862636f42354b30736b3039744c7346444666627733343130416a7356624c73614e45434763715a6d6757445165386a4a64",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[97],"594248466d34786e636e594367617379536e3571714c495734327276575932497078647a737a4b754d795651796466666f387443485a704352475643754c384a386138717a484a39357551737854784b524f63704472506b59794b67374a51354a4d6b36",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[98],"31764732355a6e6a446a6654677145766378766d5a4374596e75774a4557637569496b6276786b574671464c45393448757152695162363276727a5a647a686c37736d714e7663694a485564454d4959307136487233784b6b557a6c6a46786558487541",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_verifiers_random_data[99],"6651763545514c72693971504b5165546b486b636f635845786f3048526a32575a6c51745a72493870584c584450484c6b504c79517931644b504c725942634c4e5332433741796b6c37384d4e446e5669596b596b3930534f423841326162465133364e",RANDOM_STRING_LENGTH*2); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[0],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[1],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[2],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[3],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[4],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[5],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[6],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[7],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[8],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[9],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[10],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[11],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[12],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[13],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[14],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[15],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[16],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[17],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[18],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[19],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[20],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[21],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[22],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[23],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[24],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[25],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[26],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[27],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[28],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[29],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[30],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[31],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[32],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[33],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[34],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[35],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[36],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[37],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[38],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[39],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[40],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[41],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[42],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[43],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[44],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[45],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[46],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[47],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[48],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[49],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[50],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[51],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[52],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[53],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[54],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[55],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[56],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[57],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[58],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[59],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[60],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[61],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[62],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[63],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[64],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[65],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[66],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[67],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[68],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[69],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[70],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[71],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[72],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[73],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[74],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[75],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[76],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[77],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[78],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[79],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[80],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[81],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[82],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[83],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[84],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[85],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[86],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[87],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[88],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[89],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[90],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[91],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[92],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[93],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[94],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[95],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[96],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[97],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[98],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.next_block_verifiers_public_address[99],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.previous_block_hash_data,"0000000000000000000000000000000000000000000000000000000000000005",BLOCK_HASH_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[0],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[1],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[2],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[3],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[4],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[5],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[6],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[7],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[8],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[9],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[10],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[11],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[12],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[13],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[14],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[15],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[16],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[17],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[18],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[19],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[20],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[21],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[22],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[23],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[24],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[25],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[26],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[27],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[28],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[29],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[30],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[31],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[32],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[33],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[34],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[35],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[36],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[37],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[38],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[39],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[40],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[41],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[42],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[43],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[44],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[45],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[46],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[47],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[48],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[49],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[50],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[51],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[52],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[53],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[54],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[55],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[56],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[57],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[58],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[59],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[60],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[61],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[62],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[63],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[64],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[65],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[66],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[67],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[68],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[69],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[70],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[71],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[72],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[73],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[74],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[75],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[76],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[77],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[78],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[79],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[80],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[81],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[82],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[83],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[84],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[85],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[86],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[87],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[88],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[89],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[90],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[91],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[92],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[93],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[94],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[95],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[96],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[97],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[98],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.blockchain_reserve_bytes.block_validation_node_signature[99],BLOCK_VALIDATION_NODE_SIGNATURE,VRF_BETA_LENGTH+VRF_PROOF_LENGTH); \
memcpy(blockchain_data.ringct_version_data,RINGCT_VERSION,sizeof(RINGCT_VERSION)-1); \
blockchain_data.transaction_amount = 5; \
memcpy(blockchain_data.transactions[0],"0000000000000000000000000000000000000000000000000000000000000001",TRANSACTION_HASH_LENGTH); \
memcpy(blockchain_data.transactions[1],"0000000000000000000000000000000000000000000000000000000000000002",TRANSACTION_HASH_LENGTH); \
memcpy(blockchain_data.transactions[2],"0000000000000000000000000000000000000000000000000000000000000003",TRANSACTION_HASH_LENGTH); \
memcpy(blockchain_data.transactions[3],"0000000000000000000000000000000000000000000000000000000000000004",TRANSACTION_HASH_LENGTH); \
memcpy(blockchain_data.transactions[4],"0000000000000000000000000000000000000000000000000000000000000005",TRANSACTION_HASH_LENGTH);

#define CHECK_RESERVE_PROOF_TEST_PUBLIC_ADDRESS "XCA1va68ZVYVDRzX3mpqVD8iWbxviCsUigMkyogxAWSQR5rk16g7dYjbcKDwsAggp8Z1dNjPgcCzkcV7hDg99Wtk8nyUBBK4K7"
#define CHECK_RESERVE_PROOF_TEST_RESERVE_PROOF "ReserveProofV11BZ23sBt9sZJeGccf84mzyAmNCP3KzYbE1111112VKmH111118PRh4AT7VvXjWBm8SAPTf55QJP1E3fkm8f3oe3VWeT5o8YybH9113USPdfBXLfpWTHYMCJAmGa2CcFiyHn5Gj9PCuHaKB3VHdqTEy6shyi4bW8FuTLyhTpDcnS7uEAyQcijSuHEUcgTwUSNSwuzvT113ka91zQXMcjYwZ39zAJVS16DuJZNRWnQaiNJVsracFDmUsXCCWcMx5HpKDNn5N3H1qSCxhV4CdUN2cB8Z2iirSgiL2frFA1DrVCKJm5kNHSANEGjHe4mw5L6L2Yeabna74FLszbBPKso42fpctQ8Djj25hqj6pEQqHY4tTaAYfkVRuB4m8DU4aNZN1Ak9vkBxvZtVDRzX3mpqVD8iWbxviCsUigMkyogxAWSQR5rjh4uUTRP7QHCpCm1o34Qc1vrDsLzXWbvcwC1g1VUh3S5dDKX2FXGJT4DX2REwtCNCZX2MZE2wGcbLRZ3vj4jQ6NzwTqT"
#define CHECK_RESERVE_PROOF_TEST_AMOUNT "10"
#define HTTP_RESPONSE_DATA "HTTP/1.1 200 OK\nConnection: close\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept\nContent-Length: 329\nContent-Language: en\nContent-Type: application/json\nServer: xcash-dpops version 1.0.0\nDate: Sun, 09 Feb 2020 02:16:07 GMT\n\n{\"public_address\":\"XCA1pEWxj2q7gn7TJjae7JfsDhtnhydxsHhtADhDm4LbdE11rHVZqbX5MPGZ9tM7jQbDF4VKK89jSAqgL9Nxxjdh8RM5JEpZZP\",\"current_delegate_rank\":\"2\",\"total_votes\":\"0\",\"online_percentage\":\"0\",\"total_blocks_found\":\"1\",\"total_xcash_from_blocks_found\":\"15\",\"total_payments\":\"1\",\"total_voters\":\"0\",\"fee\":\"0.000000\",\"minimum_amount\":\"0\"}"
#define DATABASE_NAME_TEST "XCASH_PROOF_OF_STAKE_TEST"
#define DATABASE_COLLECTION_TEST "XCASH_PROOF_OF_STAKE_TEST_DATA"
#define DATABASE_COLLECTION_STATISTICS_TEST_DATA "{\"username\":\"XCASH\",\"most_total_rounds_delegate_name\":\"DELEGATE_NAME\",\"most_total_rounds\":\"5\",\"best_block_verifier_online_percentage_delegate_name\":\"DELEGATE_NAME\",\"best_block_verifier_online_percentage\":\"10\",\"most_block_producer_total_rounds_delegate_name\":\"DELEGATE_NAME\",\"most_block_producer_total_rounds\":\"15\"}"
#define DATABASE_COLLECTION_DELEGATES_TEST_DATA "{\"public_address\":\"XCA\",\"total_vote_count\":\"XCA\",\"IP_address\":\"127.0.0.1\",\"delegate_name\":\"XCA\",\"about\":\"XCA\",\"website\":\"XCA\",\"team\":\"XCA\",\"shared_delegate_status\":\"XCA\",\"delegate_fee\":\"XCA\",\"server_specs\":\"XCA\",\"block_verifier_score\":\"XCA\",\"online_status\":\"XCA\",\"block_verifier_total_rounds\":\"XCA\",\"block_verifier_online_total_rounds\":\"XCA\",\"block_verifier_online_percentage\":\"XCA\",\"block_producer_total_rounds\":\"XCA\",\"block_producer_block_heights\":\"XCA\"}"
#define DATABASE_COLLECTION_STATISTICS_PARSE_JSON_TEST_DATA "{ \"_id\" : { \"$oid\" : \"5\", \"username\" : \"XCASH\", \"most_total_rounds_delegate_name\" : \"DELEGATE_NAME\", \"most_total_rounds\" : \"5\", \"best_block_verifier_online_percentage_delegate_name\" : \"DELEGATE_NAME\", \"best_block_verifier_online_percentage\" : \"10\", \"most_block_producer_total_rounds_delegate_name\" : \"DELEGATE_NAME\", \"most_block_producer_total_rounds\" : \"15\" }"
#define ORGANIZE_DELEGATES_TEST_DATA_1 "{\"public_address\":\"" TEST_WALLET "\",\"total_vote_count\":\"15\",\"IP_address\":\"delegates.xcash.foundation\",\"delegate_name\":\"delegates_xcash_foundation\",\"about\":\"Official X-Network node\",\"website\":\"delegates.xcash.foundation\",\"team\":\"X-Network Team\",\"shared_delegate_status\":\"solo\",\"delegate_fee\":\"\",\"server_specs\":\"Operating System = Ubuntu 18.04 CPU = 32 threads (Intel 2xE5 - 2660 - 2.2GHz RAM = 256GB DDR3 Hard drive = 2x240 GB SSD + 4x2TB SATA Bandwidth Transfer = Unlimited Bandwidth Speed = 500 Mbps upload and 500 Mbps download\",\"block_verifier_score\":\"0\",\"online_status\":\"false\",\"block_verifier_total_rounds\":\"0\",\"block_verifier_online_total_rounds\":\"0\",\"block_verifier_online_percentage\":\"0\",\"block_producer_total_rounds\":\"0\",\"block_producer_block_heights\":\"\",\"public_key\":\"ad98cadb3b13229c78709876955247cbef40d5b15c4842be605b0e8b30c97a7a\"}"
#define ORGANIZE_DELEGATES_TEST_DATA_2 "{\"public_address\":\"" TEST_WALLET "\",\"total_vote_count\":\"5\",\"IP_address\":\"delegates.xcash.foundation\",\"delegate_name\":\"delegates_xcash_foundation\",\"about\":\"Official X-Network node\",\"website\":\"delegates.xcash.foundation\",\"team\":\"X-Network Team\",\"shared_delegate_status\":\"solo\",\"delegate_fee\":\"\",\"server_specs\":\"Operating System = Ubuntu 18.04 CPU = 32 threads (Intel 2xE5 - 2660 - 2.2GHz RAM = 256GB DDR3 Hard drive = 2x240 GB SSD + 4x2TB SATA Bandwidth Transfer = Unlimited Bandwidth Speed = 500 Mbps upload and 500 Mbps download\",\"block_verifier_score\":\"0\",\"online_status\":\"true\",\"block_verifier_total_rounds\":\"0\",\"block_verifier_online_total_rounds\":\"0\",\"block_verifier_online_percentage\":\"0\",\"block_producer_total_rounds\":\"0\",\"block_producer_block_heights\":\"\",\"public_key\":\"ad98cadb3b13229c78709876955247cbef40d5b15c4842be605b0e8b30c97a7a\"}"
#define ORGANIZE_DELEGATES_TEST_DATA_3 "{\"public_address\":\"" TEST_WALLET "\",\"total_vote_count\":\"10\",\"IP_address\":\"delegates.xcash.foundation\",\"delegate_name\":\"delegates_xcash_foundation\",\"about\":\"Official X-Network node\",\"website\":\"delegates.xcash.foundation\",\"team\":\"X-Network Team\",\"shared_delegate_status\":\"solo\",\"delegate_fee\":\"\",\"server_specs\":\"Operating System = Ubuntu 18.04 CPU = 32 threads (Intel 2xE5 - 2660 - 2.2GHz RAM = 256GB DDR3 Hard drive = 2x240 GB SSD + 4x2TB SATA Bandwidth Transfer = Unlimited Bandwidth Speed = 500 Mbps upload and 500 Mbps download\",\"block_verifier_score\":\"0\",\"online_status\":\"true\",\"block_verifier_total_rounds\":\"0\",\"block_verifier_online_total_rounds\":\"0\",\"block_verifier_online_percentage\":\"0\",\"block_producer_total_rounds\":\"0\",\"block_producer_block_heights\":\"\",\"public_key\":\"ad98cadb3b13229c78709876955247cbef40d5b15c4842be605b0e8b30c97a7a\"}"
#define RESERVE_BYTES_TEST_DATA "{\"block_height\":\"521850\",\"reserve_bytes_data_hash\":\"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\"reserve_bytes\":\"DATA\"}"

#define XCASH_DPOPS_TOTAL_TEST 466
#define BLOCKCHAIN_TOTAL_TEST 32
#define DATABASE_FUNCTIONS_TEST 10
#define INSERT_DATABASE_FUNCTIONS_TEST 6
#define READ_DATABASE_FUNCTIONS_TEST 18
#define UPDATE_DATABASE_FUNCTIONS_TEST 9
#define DELETE_DATABASE_FUNCTIONS_TEST 8
#define COUNT_DATABASE_FUNCTIONS_TEST 7
#define FILE_FUNCTIONS_TOTAL_TEST 7
#define NETWORK_DAEMON_FUNCTIONS_TEST 7
#define NETWORK_FUNCTIONS_TEST 12
#define NETWORK_SECURITY_FUNCTIONS_TEST 41
#define NETWORK_WALLET_FUNCTIONS_TEST 3
#define OPTIMIZATIONS_TOTAL_TEST 7
#define ORGANIZE_FUNCTIONS_TOTAL_TEST 3
#define STRING_FUNCTIONS_TOTAL_TEST 10
#define VRF_TOTAL_TEST 8
#define BLOCK_VERIFIERS_SERVER_FUNCTIONS_TOTAL_TEST 18
#define BLOCK_VERIFIERS_SYNCHRONIZE_CHECK_FUNCTIONS_TOTAL_TEST 12
#define BLOCK_VERIFIERS_SYNCHRONIZE_SERVER_FUNCTIONS_TOTAL_TEST 21
#define BLOCK_VERIFIERS_SYNCHRONIZE_FUNCTIONS_TOTAL_TEST 8
#define BLOCK_VERIFIERS_THREAD_SERVER_FUNCTIONS_TOTAL_TEST 12
#define BLOCK_VERIFIERS_UPDATE_FUNCTIONS_TOTAL_TEST 5
#define DELEGATE_SERVER_FUNCTIONS_TOTAL_TEST 32
#define DELEGATE_WEBSITE_FUNCTIONS_TOTAL_TEST 17
#define SHARED_DELEGATE_WEBSITE_THREAD_SERVER_FUNCTIONS_TOTAL_TEST 12
#define SHARED_DELEGATE_WEBSITE_FUNCTIONS_TOTAL_TEST 8
#define RESET_VARAIBLES_ALLOCATED_ON_THE_HEAP_TEST 133

#define INITIALIZE_NETWORK_DATA_NODES_TEST \
for (count = 0; count < NETWORK_DATA_NODES_AMOUNT; count++) \
{ \
  memset(network_data_nodes_list.network_data_nodes_public_address[count],0,sizeof(network_data_nodes_list.network_data_nodes_public_address[count])); \
  memset(network_data_nodes_list.network_data_nodes_IP_address[count],0,sizeof(network_data_nodes_list.network_data_nodes_IP_address[count])); \
} \
memcpy(network_data_nodes_list.network_data_nodes_public_address[0],TEST_WALLET,XCASH_WALLET_LENGTH); \
memcpy(network_data_nodes_list.network_data_nodes_IP_address[0],XCASH_DPOPS_delegates_IP_address,strlen(XCASH_DPOPS_delegates_IP_address)); \
memcpy(network_data_nodes_list.network_data_nodes_public_address[1],TEST_WALLET,XCASH_WALLET_LENGTH); \
memcpy(network_data_nodes_list.network_data_nodes_IP_address[1],XCASH_DPOPS_delegates_IP_address,strlen(XCASH_DPOPS_delegates_IP_address)); \
memcpy(network_data_nodes_list.network_data_nodes_public_address[2],TEST_WALLET,XCASH_WALLET_LENGTH); \
memcpy(network_data_nodes_list.network_data_nodes_IP_address[2],XCASH_DPOPS_delegates_IP_address,strlen(XCASH_DPOPS_delegates_IP_address)); \
memcpy(network_data_nodes_list.network_data_nodes_public_address[3],TEST_WALLET,XCASH_WALLET_LENGTH); \
memcpy(network_data_nodes_list.network_data_nodes_IP_address[3],XCASH_DPOPS_delegates_IP_address,strlen(XCASH_DPOPS_delegates_IP_address)); \
memcpy(network_data_nodes_list.network_data_nodes_public_address[4],TEST_WALLET,XCASH_WALLET_LENGTH); \
memcpy(network_data_nodes_list.network_data_nodes_IP_address[4],XCASH_DPOPS_delegates_IP_address,strlen(XCASH_DPOPS_delegates_IP_address)); \

#define INITIALIZE_PREVIOUS_CURRENT_NEXT_BLOCK_VERIFIERS_TEST \
for (count = 0; count < BLOCK_VERIFIERS_TOTAL_AMOUNT; count++) \
{ \
  memset(previous_block_verifiers_list.block_verifiers_name[count],0,sizeof(previous_block_verifiers_list.block_verifiers_name[count])); \
  memset(previous_block_verifiers_list.block_verifiers_public_address[count],0,sizeof(previous_block_verifiers_list.block_verifiers_public_address[count])); \
  memset(previous_block_verifiers_list.block_verifiers_public_key[count],0,sizeof(previous_block_verifiers_list.block_verifiers_public_key[count])); \
  memset(previous_block_verifiers_list.block_verifiers_IP_address[count],0,sizeof(previous_block_verifiers_list.block_verifiers_IP_address[count])); \
  memset(current_block_verifiers_list.block_verifiers_name[count],0,sizeof(current_block_verifiers_list.block_verifiers_name[count])); \
  memset(current_block_verifiers_list.block_verifiers_public_address[count],0,sizeof(current_block_verifiers_list.block_verifiers_public_address[count])); \
  memset(current_block_verifiers_list.block_verifiers_public_key[count],0,sizeof(current_block_verifiers_list.block_verifiers_public_key[count])); \
  memset(current_block_verifiers_list.block_verifiers_IP_address[count],0,sizeof(current_block_verifiers_list.block_verifiers_IP_address[count])); \
  memset(next_block_verifiers_list.block_verifiers_name[count],0,sizeof(next_block_verifiers_list.block_verifiers_name[count])); \
  memset(next_block_verifiers_list.block_verifiers_public_address[count],0,sizeof(next_block_verifiers_list.block_verifiers_public_address[count])); \
  memset(next_block_verifiers_list.block_verifiers_public_key[count],0,sizeof(next_block_verifiers_list.block_verifiers_public_key[count])); \
  memset(next_block_verifiers_list.block_verifiers_IP_address[count],0,sizeof(next_block_verifiers_list.block_verifiers_IP_address[count])); \
} \
memcpy(previous_block_verifiers_list.block_verifiers_name[0],"delegate_1",10); \
memcpy(previous_block_verifiers_list.block_verifiers_public_address[0],TEST_WALLET,XCASH_WALLET_LENGTH); \
memcpy(previous_block_verifiers_list.block_verifiers_IP_address[0],XCASH_DPOPS_delegates_IP_address,strlen(XCASH_DPOPS_delegates_IP_address)); \
memcpy(previous_block_verifiers_list.block_verifiers_public_key[0],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(previous_block_verifiers_list.block_verifiers_name[1],"delegate_1",10); \
memcpy(previous_block_verifiers_list.block_verifiers_public_address[1],TEST_WALLET,XCASH_WALLET_LENGTH); \
memcpy(previous_block_verifiers_list.block_verifiers_IP_address[1],XCASH_DPOPS_delegates_IP_address,strlen(XCASH_DPOPS_delegates_IP_address)); \
memcpy(previous_block_verifiers_list.block_verifiers_public_key[1],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(current_block_verifiers_list.block_verifiers_name[0],"delegate_1",10); \
memcpy(current_block_verifiers_list.block_verifiers_public_address[0],TEST_WALLET,XCASH_WALLET_LENGTH); \
memcpy(current_block_verifiers_list.block_verifiers_IP_address[0],XCASH_DPOPS_delegates_IP_address,strlen(XCASH_DPOPS_delegates_IP_address)); \
memcpy(current_block_verifiers_list.block_verifiers_public_key[0],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(current_block_verifiers_list.block_verifiers_name[1],"delegate_1",10); \
memcpy(current_block_verifiers_list.block_verifiers_public_address[1],TEST_WALLET,XCASH_WALLET_LENGTH); \
memcpy(current_block_verifiers_list.block_verifiers_IP_address[1],XCASH_DPOPS_delegates_IP_address,strlen(XCASH_DPOPS_delegates_IP_address)); \
memcpy(current_block_verifiers_list.block_verifiers_public_key[1],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(next_block_verifiers_list.block_verifiers_name[0],"delegate_1",10); \
memcpy(next_block_verifiers_list.block_verifiers_public_address[0],TEST_WALLET,XCASH_WALLET_LENGTH); \
memcpy(next_block_verifiers_list.block_verifiers_IP_address[0],XCASH_DPOPS_delegates_IP_address,strlen(XCASH_DPOPS_delegates_IP_address)); \
memcpy(next_block_verifiers_list.block_verifiers_public_key[0],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH); \
memcpy(next_block_verifiers_list.block_verifiers_name[1],"delegate_1",10); \
memcpy(next_block_verifiers_list.block_verifiers_public_address[1],TEST_WALLET,XCASH_WALLET_LENGTH); \
memcpy(next_block_verifiers_list.block_verifiers_IP_address[1],XCASH_DPOPS_delegates_IP_address,strlen(XCASH_DPOPS_delegates_IP_address)); \
memcpy(next_block_verifiers_list.block_verifiers_public_key[1],NEXT_BLOCK_VERIFIERS_PUBLIC_KEY,VRF_PUBLIC_KEY_LENGTH);


#define INITIALIZE_DELEGATES_STRUCT_TEST_DATA \
for (count = 0; (int)count < MAXIMUM_AMOUNT_OF_DELEGATES; count++) \
{ \
  delegates[count].public_address = (char*)calloc(XCASH_WALLET_LENGTH+1,sizeof(char)); \
  delegates[count].total_vote_count = (char*)calloc(100,sizeof(char)); \
  delegates[count].IP_address = (char*)calloc(256,sizeof(char)); \
  delegates[count].delegate_name = (char*)calloc(MAXIMUM_BUFFER_SIZE_DELEGATES_NAME+1,sizeof(char)); \
  delegates[count].about = (char*)calloc(1025,sizeof(char)); \
  delegates[count].website = (char*)calloc(256,sizeof(char)); \
  delegates[count].team = (char*)calloc(256,sizeof(char)); \
  delegates[count].shared_delegate_status = (char*)calloc(10,sizeof(char)); \
  delegates[count].delegate_fee = (char*)calloc(11,sizeof(char)); \
  delegates[count].server_specs = (char*)calloc(1025,sizeof(char)); \
  delegates[count].block_verifier_score = (char*)calloc(10,sizeof(char)); \
  delegates[count].online_status = (char*)calloc(10,sizeof(char)); \
  delegates[count].block_verifier_total_rounds = (char*)calloc(10,sizeof(char)); \
  delegates[count].block_verifier_online_total_rounds = (char*)calloc(10,sizeof(char)); \
  delegates[count].block_verifier_online_percentage = (char*)calloc(10,sizeof(char)); \
  delegates[count].block_producer_total_rounds = (char*)calloc(10,sizeof(char)); \
  delegates[count].block_producer_block_heights = (char*)calloc(BUFFER_SIZE_BLOCK_HEIGHTS_DATA,sizeof(char)); \
  delegates[count].public_key = (char*)calloc(VRF_PUBLIC_KEY_LENGTH+1,sizeof(char)); \
  if (delegates[count].public_address == NULL || delegates[count].total_vote_count == NULL || delegates[count].IP_address == NULL || delegates[count].delegate_name == NULL || delegates[count].about == NULL || delegates[count].website == NULL || delegates[count].team == NULL || delegates[count].shared_delegate_status == NULL || delegates[count].delegate_fee == NULL || delegates[count].server_specs == NULL || delegates[count].block_verifier_score == NULL || delegates[count].online_status == NULL || delegates[count].block_verifier_total_rounds == NULL || delegates[count].block_verifier_online_total_rounds == NULL || delegates[count].block_verifier_online_percentage == NULL || delegates[count].block_producer_total_rounds == NULL || delegates[count].block_producer_block_heights == NULL || delegates[count].public_key == NULL) \
  { \
    color_print("Could not allocate the memory needed on the heap","red"); \
    exit(0); \
  } \
} \
memcpy(delegates[0].public_address,"XCA1h3yJ318hJGTFeXfYyEcyE7G4hX7jrCbvz21VecJGhf64Tw51yWii2Q1e76fJbB26Ea8CRipmdW6ZHQcRrLKx3cxRkr5M12",XCASH_WALLET_LENGTH); \
memcpy(delegates[0].total_vote_count,"0",sizeof(char)); \
memcpy(delegates[0].IP_address,"delegates.xcash.foundation",26); \
memcpy(delegates[0].delegate_name,"delegates_xcash_foundation",26); \
memcpy(delegates[0].about,"Official X-Network node",23); \
memcpy(delegates[0].website,"delegates.xcash.foundation",26); \
memcpy(delegates[0].team,"X-Network Team",14); \
memcpy(delegates[0].shared_delegate_status,"solo",4); \
memcpy(delegates[0].delegate_fee,"0",sizeof(char)); \
memcpy(delegates[0].server_specs,"Operating System = Ubuntu 18.04 CPU = 32 threads (Intel 2xE5 - 2660 - 2.2GHz RAM = 256GB DDR3 Hard drive = 2x240 GB SSD + 4x2TB SATA Bandwidth Transfer = Unlimited Bandwidth Speed = 500 Mbps upload and 500 Mbps download",219); \
memcpy(delegates[0].block_verifier_score,"0",sizeof(char)); \
memcpy(delegates[0].online_status,"true",4); \
memcpy(delegates[0].block_verifier_total_rounds,"0",sizeof(char)); \
memcpy(delegates[0].block_verifier_online_total_rounds,"0",sizeof(char)); \
memcpy(delegates[0].block_verifier_online_percentage,"0",sizeof(char)); \
memcpy(delegates[0].block_producer_total_rounds,"0",sizeof(char)); \
memcpy(delegates[0].block_producer_block_heights,"0",sizeof(char)); \
memcpy(delegates[0].public_key,"ad98cadb3b13229c78709876955247cbef40d5b15c4842be605b0e8b30c97a7a",VRF_PUBLIC_KEY_LENGTH); \
memcpy(delegates[1].public_address,"XCA1kkdrRQ9SC7wfJ3F329giei31r13wKEKiD1ZMYf6nBiU8KE6a6LDJTZobfJ58o8A3vtGrAkzfHDd815kac7F17iPhK9zYGG",XCASH_WALLET_LENGTH); \
memcpy(delegates[1].total_vote_count,"0",sizeof(char)); \
memcpy(delegates[1].IP_address,"officialdelegate.xcash.foundation",33); \
memcpy(delegates[1].delegate_name,"officialdelegate_xcash_foundation",33); \
memcpy(delegates[1].about,"Official X-Network Shared Delegate",34); \
memcpy(delegates[1].website,"officialdelegate.xcash.foundation",33); \
memcpy(delegates[1].team,"X-Network Team",14); \
memcpy(delegates[1].shared_delegate_status,"shared",6); \
memcpy(delegates[1].delegate_fee,"0",sizeof(char)); \
memcpy(delegates[1].server_specs,"Operating System = Ubuntu 18.04 CPU = 8 threads (Intel E3-1246 v3 - 3.50GHz RAM = 32GB DDR3 Hard drive = 2x HDD SATA 2 TB Bandwidth Transfer = Unlimited Bandwidth Speed = 1 Gbps upload and 1 Gbps download",204); \
memcpy(delegates[1].block_verifier_score,"0",sizeof(char)); \
memcpy(delegates[1].online_status,"true",4); \
memcpy(delegates[1].block_verifier_total_rounds,"0",sizeof(char)); \
memcpy(delegates[1].block_verifier_online_total_rounds,"0",sizeof(char)); \
memcpy(delegates[1].block_verifier_online_percentage,"0",sizeof(char)); \
memcpy(delegates[1].block_producer_total_rounds,"0",sizeof(char)); \
memcpy(delegates[1].block_producer_block_heights,"0",sizeof(char)); \
memcpy(delegates[1].public_key,"ad98cadb3b13229c78709876955247cbef40d5b15c4842be605b0e8b30c97a7a",VRF_PUBLIC_KEY_LENGTH);

#define INITIALIZE_VOTES_STRUCT_TEST_DATA \
for (count = 0; count < MAXIMUM_AMOUNT_OF_DELEGATES; count++) \
{ \
  votes[count].public_address_created_reserve_proof = (char*)calloc(XCASH_WALLET_LENGTH+1,sizeof(char)); \
  votes[count].public_address_voted_for = (char*)calloc(XCASH_WALLET_LENGTH+1,sizeof(char)); \
  votes[count].total = (char*)calloc(100,sizeof(char)); \
  votes[count].reserve_proof = (char*)calloc(BUFFER_SIZE_RESERVE_PROOF+1,sizeof(char)); \
  if (votes[count].public_address_created_reserve_proof == NULL || votes[count].public_address_voted_for == NULL || votes[count].total == NULL || votes[count].reserve_proof == NULL) \
  { \
    color_print("Could not allocate the memory needed on the heap","red"); \
    exit(0); \
  } \
} \
memcpy(votes[0].public_address_created_reserve_proof,CHECK_RESERVE_PROOF_TEST_PUBLIC_ADDRESS,sizeof(CHECK_RESERVE_PROOF_TEST_PUBLIC_ADDRESS)-1); \
memcpy(votes[0].public_address_voted_for,CHECK_RESERVE_PROOF_TEST_PUBLIC_ADDRESS,sizeof(CHECK_RESERVE_PROOF_TEST_PUBLIC_ADDRESS)-1); \
memcpy(votes[0].total,"0",sizeof(char)); \
memcpy(votes[0].reserve_proof,CHECK_RESERVE_PROOF_TEST_RESERVE_PROOF,sizeof(CHECK_RESERVE_PROOF_TEST_RESERVE_PROOF)-1); \
memcpy(votes[1].public_address_created_reserve_proof,CHECK_RESERVE_PROOF_TEST_PUBLIC_ADDRESS,sizeof(CHECK_RESERVE_PROOF_TEST_PUBLIC_ADDRESS)-1); \
memcpy(votes[1].public_address_voted_for,CHECK_RESERVE_PROOF_TEST_PUBLIC_ADDRESS,sizeof(CHECK_RESERVE_PROOF_TEST_PUBLIC_ADDRESS)-1); \
memcpy(votes[1].total,"0",sizeof(char)); \
memcpy(votes[1].reserve_proof,CHECK_RESERVE_PROOF_TEST_RESERVE_PROOF,sizeof(CHECK_RESERVE_PROOF_TEST_RESERVE_PROOF)-1);

#define RESET_DELEGATES_STRUCT \
for (count = 0; (int)count < MAXIMUM_AMOUNT_OF_DELEGATES; count++) \
{ \
  memset(delegates[count].public_address,0,strlen(delegates[count].public_address)); \
  memset(delegates[count].total_vote_count,0,strlen(delegates[count].total_vote_count)); \
  memset(delegates[count].IP_address,0,strlen(delegates[count].IP_address)); \
  memset(delegates[count].delegate_name,0,strlen(delegates[count].delegate_name)); \
  memset(delegates[count].about,0,strlen(delegates[count].about)); \
  memset(delegates[count].website,0,strlen(delegates[count].website)); \
  memset(delegates[count].team,0,strlen(delegates[count].team)); \
  memset(delegates[count].shared_delegate_status,0,strlen(delegates[count].shared_delegate_status)); \
  memset(delegates[count].delegate_fee,0,strlen(delegates[count].delegate_fee)); \
  memset(delegates[count].server_specs,0,strlen(delegates[count].server_specs)); \
  memset(delegates[count].block_verifier_score,0,strlen(delegates[count].block_verifier_score)); \
  memset(delegates[count].online_status,0,strlen(delegates[count].online_status)); \
  memset(delegates[count].block_verifier_total_rounds,0,strlen(delegates[count].block_verifier_total_rounds)); \
  memset(delegates[count].block_verifier_online_total_rounds,0,strlen(delegates[count].block_verifier_online_total_rounds)); \
  memset(delegates[count].block_verifier_online_percentage,0,strlen(delegates[count].block_verifier_online_percentage)); \
  memset(delegates[count].block_producer_total_rounds,0,strlen(delegates[count].block_producer_total_rounds)); \
  memset(delegates[count].block_producer_block_heights,0,strlen(delegates[count].block_producer_block_heights)); \
  memset(delegates[count].public_key,0,strlen(delegates[count].public_key)); \
}

#define R0ESET_INVALID_RESERVE_PROOFS \
for (count = 0; (int)count <= invalid_reserve_proofs.count; count++) \
{ \
  memset(invalid_reserve_proofs.public_address_voted_for[count],0,strlen(invalid_reserve_proofs.public_address_voted_for[count])); \
  memset(invalid_reserve_proofs.public_address_created_reserve_proof[count],0,strlen(invalid_reserve_proofs.public_address_created_reserve_proof[count])); \
  memset(invalid_reserve_proofs.reserve_proof[count],0,strlen(invalid_reserve_proofs.reserve_proof[count])); \
} \
invalid_reserve_proofs.count = 0; \

#define CHECK_SERVER_FUNCTIONS(FUNCTION_NAME,MESSAGE) \
memset(result_test,0,sizeof(result_test)); \
memcpy(result_test,MESSAGE,sizeof(MESSAGE)-1); \
if (sign_data(result_test) == 1 && send_data_socket(XCASH_DPOPS_delegates_IP_address,SEND_DATA_PORT,result_test,SEND_OR_RECEIVE_SOCKET_DATA_TIMEOUT_SETTINGS) == 1) \
{ \
  sleep(5); \
  if (error_message.total == 0) \
  { \
    fprintf(stderr,"\033[1;32mPASSED! Test for %s\033[0m\n",FUNCTION_NAME); \
    count_test++; \
  } \
  else \
  { \
  color_print(error_message.data[0],"yellow"); \
    fprintf(stderr,"\033[1;31mFAILED! Test for %s\033[0m\n",FUNCTION_NAME); \
  } \
} \
else \
{ \
  fprintf(stderr,"\033[1;31mFAILED! Test for %s\033[0m\n",FUNCTION_NAME); \
} \
RESET_ERROR_MESSAGES;

#define CHECK_SERVER_FUNCTIONS_ERROR(FUNCTION_NAME,MESSAGE,STRING_REPLACE_SETTINGS,CURRENT_STRING,NEW_STRING,TEST) \
memset(result_test,0,sizeof(result_test)); \
memcpy(result_test,MESSAGE,sizeof(MESSAGE)-1); \
if ((STRING_REPLACE_SETTINGS) == 1) \
{ \
  if (sign_data(result_test) == 1) \
  { \
    string_replace(result_test,sizeof(result_test),CURRENT_STRING,NEW_STRING); \
    send_data_socket(XCASH_DPOPS_delegates_IP_address,SEND_DATA_PORT,result_test,SEND_OR_RECEIVE_SOCKET_DATA_TIMEOUT_SETTINGS); \
    sleep(5); \
    for (count = 0; count < error_message.total; count++) \
    { \
      if (strncmp(error_message.data[count],TEST,BUFFER_SIZE) == 0) \
      { \
        break; \
      } \
    } \
    if (count != error_message.total) \
    { \
      fprintf(stderr,"\033[1;32mPASSED! Test for %s checking for %s\033[0m\n",FUNCTION_NAME,TEST); \
      count_test++; \
    } \
    else \
    { \
      fprintf(stderr,"\033[1;31mFAILED! Test for %s checking for %s\033[0m\n",FUNCTION_NAME,TEST); \
    } \
  } \
  else \
  { \
    fprintf(stderr,"\033[1;31mFAILED! Test for %s checking for %s\033[0m\n",FUNCTION_NAME,TEST); \
  } \
} \
else \
{ \
  if (sign_data(result_test) == 1 && send_data_socket(XCASH_DPOPS_delegates_IP_address,SEND_DATA_PORT,result_test,SEND_OR_RECEIVE_SOCKET_DATA_TIMEOUT_SETTINGS) == 1) \
  { \
    sleep(5); \
    for (count = 0; count < error_message.total; count++) \
    { \
      if (strncmp(error_message.data[count],TEST,BUFFER_SIZE) == 0) \
      { \
        break; \
      } \
    } \
    if (count != error_message.total) \
    { \
      fprintf(stderr,"\033[1;32mPASSED! Test for %s checking for %s\033[0m\n",FUNCTION_NAME,TEST); \
      count_test++; \
    } \
    else \
    { \
      fprintf(stderr,"\033[1;31mFAILED! Test for %s checking for %s\033[0m\n",FUNCTION_NAME,TEST); \
    } \
  } \
  else \
  { \
    fprintf(stderr,"\033[1;31mFAILED! Test for %s checking for %s\033[0m\n",FUNCTION_NAME,TEST); \
  } \
} \
RESET_ERROR_MESSAGES;

#define CHECK_WEBSITE_SERVER_FUNCTIONS(FUNCTION_NAME,MESSAGE) \
if (send_data_socket(XCASH_DPOPS_delegates_IP_address,SEND_DATA_PORT,MESSAGE,SEND_OR_RECEIVE_SOCKET_DATA_TIMEOUT_SETTINGS) == 1) \
{ \
  sleep(5); \
  if (error_message.total == 0) \
  { \
    fprintf(stderr,"\033[1;32mPASSED! Test for %s\033[0m\n",FUNCTION_NAME); \
    count_test++; \
  } \
  else \
  { \
  color_print(error_message.data[0],"yellow"); \
    fprintf(stderr,"\033[1;31mFAILED! Test for %s\033[0m\n",FUNCTION_NAME); \
  } \
} \
else \
{ \
  fprintf(stderr,"\033[1;31mFAILED! Test for %s\033[0m\n",FUNCTION_NAME); \
} \
RESET_ERROR_MESSAGES;

#define CHECK_WEBSITE_SERVER_FUNCTIONS_ERROR(DATA,FUNCTION_NAME,TEST) \
memcpy(result_test,DATA,sizeof(DATA)-1); \
send_data_socket(XCASH_DPOPS_delegates_IP_address,SEND_DATA_PORT,result_test,SEND_OR_RECEIVE_SOCKET_DATA_TIMEOUT_SETTINGS); \
sleep(5); \
for (count = 0; count < error_message.total; count++) \
{ \
  if (strncmp(error_message.data[count],TEST,BUFFER_SIZE) == 0) \
  { \
    break; \
  } \
} \
if (count != error_message.total) \
{ \
  fprintf(stderr,"\033[1;32mPASSED! Test for %s checking for %s\033[0m\n",FUNCTION_NAME,TEST); \
  count_test++; \
} \
else \
{ \
  fprintf(stderr,"\033[1;31mFAILED! Test for %s checking for %s\033[0m\n",FUNCTION_NAME,TEST); \
} \
memset(result_test,0,sizeof(result_test)); \
memset(data_test,0,sizeof(data_test));

#define SERVER_RECEIVE_DATA_SOCKET_BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_INVALID_RESERVE_PROOFS_TEST_DATA "{\r\n \"message_settings\": \"BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_INVALID_RESERVE_PROOFS\",\r\n \"public_address_that_created_the_reserve_proof\": \"" TEST_WALLET "\",\r\n,\r\n \"reserve_proof\": \"ReserveProofV11BZ23sBt9sZJeGccf84mzyAmNCP3KzYbE1111112VKmH111118PRh4AT7VvXjWBm8SAPTf55QJP1E3fkm8f3oe3VWeT5o8YybH9113USPdfBXLfpWTHYMCJAmGa2CcFiyHn5Gj9PCuHaKB3VHdqTEy6shyi4bW8FuTLyhTpDcnS7uEAyQcijSuHEUcgTwUSNSwuzvT113ka91zQXMcjYwZ39zAJVS16DuJZNRWnQaiNJVsracFDmUsXCCWcMx5HpKDNn5N3H1qSCxhV4CdUN2cB8Z2iirSgiL2frFA1DrVCKJm5kNHSANEGjHe4mw5L6L2Yeabna74FLszbBPKso42fpctQ8Djj25hqj6pEQqHY4tTaAYfkVRuB4m8DU4aNZN1Ak9vkBxvZtVDRzX3mpqVD8iWbxviCsUigMkyogxAWSQR5rjh4uUTRP7QHCpCm1o34Qc1vrDsLzXWbvcwC1g1VUh3S5dDKX2FXGJT4DX2REwtCNCZX2MZE2wGcbLRZ3vj4jQ6NzwTqT\",\r\n}"
#define SERVER_RECEIVE_DATA_SOCKET_BLOCK_VERIFIERS_TO_NETWORK_DATA_NODES_BLOCK_VERIFIERS_CURRENT_TIME_TEST_DATA "{\r\n \"message_settings\": \"BLOCK_VERIFIERS_TO_NETWORK_DATA_NODE_BLOCK_VERIFIERS_CURRENT_TIME\",\r\n}"
#define SERVER_RECEIVE_DATA_SOCKET_BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_ONLINE_STATUS_TEST_DATA "{\r\n \"message_settings\": \"BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_ONLINE_STATUS\",\r\n}"
#define SERVER_RECEIVE_DATA_SOCKET_MAIN_NETWORK_DATA_NODE_TO_BLOCK_VERIFIER_START_BLOCK_TEST_DATA "{\r\n \"message_settings\": \"MAIN_NETWORK_DATA_NODE_TO_BLOCK_VERIFIERS_START_BLOCK\",\r\n \"database_data\": \"{\"block_height\":\"" XCASH_PROOF_OF_STAKE_BLOCK_HEIGHT_TEST "\",\"reserve_bytes_data_hash\":\"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\"reserve_bytes\":\"data\"}\",\r\n \"reserve_bytes_data_hash\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n}"
#define SERVER_RECEIVE_DATA_SOCKET_MAIN_NETWORK_DATA_NODE_TO_BLOCK_VERIFIER_CREATE_NEW_BLOCK_TEST_DATA "{\r\n \"message_settings\": \"MAIN_NETWORK_DATA_NODE_TO_BLOCK_VERIFIERS_CREATE_NEW_BLOCK\",\r\n \"block_blob\": \"" NETWORK_BLOCK "\",\r\n}"
#define SERVER_RECEIVE_DATA_SOCKET_BLOCK_VERIFIER_TO_MAIN_NETWORK_DATA_NODE_CREATE_NEW_BLOCK_TEST_DATA "{\r\n \"message_settings\": \"BLOCK_VERIFIERS_TO_MAIN_NETWORK_DATA_NODE_CREATE_NEW_BLOCK\",\r\n \"block_blob_signature\": \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n}"
#define SERVER_RECEIVE_DATA_SOCKET_MAIN_NODE_TO_NODE_MESSAGE_PART_4_TEST_DATA "{\r\n \"message_settings\": \"MAIN_NODES_TO_NODES_PART_4_OF_ROUND_CREATE_NEW_BLOCK\",\r\n \"block_blob\": \"" NETWORK_BLOCK "\",\r\n}"
#define SERVER_RECEIVE_DATA_SOCKET_NODE_TO_NODE_TEST_DATA "{\r\n \"message_settings\": \"NODES_TO_NODES_VOTE_RESULTS\",\r\n \"vote_settings\": \"valid\",\r\n \"vote_data\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n}"
#define SERVER_RECEIVE_DATA_SOCKET_BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_VRF_DATA_TEST_DATA "{\r\n \"message_settings\": \"BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_VRF_DATA\",\r\n \"vrf_secret_key\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vrf_public_key\": \"0000000000000000000000000000000000000000000000000000000000000000\",\r\n \"random_data\": \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n}"
#define SERVER_RECEIVE_DATA_SOCKET_BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_BLOCK_BLOB_SIGNATURE_TEST_DATA "{\r\n \"message_settings\": \"BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_BLOCK_BLOB_SIGNATURE\",\r\n \"block_blob_signature\": \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n}"

#define SERVER_RECEIVE_DATA_SOCKET_NODE_TO_NETWORK_DATA_NODES_GET_PREVIOUS_CURRENT_NEXT_BLOCK_VERIFIERS_LIST_TEST_DATA "{\r\n \"message_settings\": \"NODE_TO_NETWORK_DATA_NODES_GET_PREVIOUS_CURRENT_NEXT_BLOCK_VERIFIERS_LIST\",\r\n}"
#define SERVER_RECEIVE_DATA_SOCKET_NODE_TO_NETWORK_DATA_NODES_GET_CURRENT_BLOCK_VERIFIERS_LIST_TEST_DATA "{\r\n \"message_settings\": \"NODE_TO_NETWORK_DATA_NODES_GET_CURRENT_BLOCK_VERIFIERS_LIST\",\r\n}"
#define SERVER_RECEIVE_DATA_SOCKET_NETWORK_DATA_NODES_TO_NETWORK_DATA_NODES_DATABASE_SYNC_CHECK_TEST_DATA "{\r\n \"message_settings\": \"NETWORK_DATA_NODES_TO_NETWORK_DATA_NODES_DATABASE_SYNC_CHECK\",\r\n \"data_hash\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"previous_blocks_reserve_bytes\": \"true\",\r\n}"
#define SERVER_RECEIVE_DATA_SOCKET_NODE_TO_BLOCK_VERIFIERS_GET_RESERVE_BYTES_DATABASE_HASH_TEST_DATA "{\r\n \"message_settings\": \"NODE_TO_BLOCK_VERIFIERS_GET_RESERVE_BYTES_DATABASE_HASH\",\r\n \"block_height\": \"" XCASH_PROOF_OF_STAKE_BLOCK_HEIGHT_TEST "\",\r\n}"
#define SERVER_RECEIVE_DATA_SOCKET_NODE_TO_BLOCK_VERIFIERS_CHECK_IF_CURRENT_BLOCK_VERIFIER_TEST_DATA "{\r\n \"message_settings\": \"NODE_TO_BLOCK_VERIFIERS_CHECK_IF_CURRENT_BLOCK_VERIFIER\",\r\n}"
#define SERVER_RECEIVE_DATA_SOCKET_BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_RESERVE_PROOFS_DATABASE_SYNC_CHECK_ALL_UPDATE_TEST_DATA "{\r\n \"message_settings\": \"BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_RESERVE_PROOFS_DATABASE_SYNC_CHECK_ALL_UPDATE\",\r\n \"reserve_proofs_data_hash\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_1\": \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b4145b54c3ec86de911eb2bfbc3bfd09\",\r\n \"reserve_proofs_data_hash_2\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_3\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_4\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_5\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_6\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_7\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_8\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_9\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_10\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_11\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_12\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_13\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_14\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_15\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_16\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_17\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_18\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_19\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_20\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_21\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_22\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_23\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_24\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_25\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_26\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_27\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_28\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_29\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_30\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_31\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_32\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_33\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_34\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_35\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_36\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_37\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_38\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_39\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_40\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_41\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_42\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_43\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_44\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_45\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_46\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_47\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_48\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_49\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_50\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n}"
#define SERVER_RECEIVE_DATA_SOCKET_BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_RESERVE_PROOFS_DATABASE_DOWNLOAD_FILE_UPDATE_TEST_DATA "{\r\n \"message_settings\": \"BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_RESERVE_PROOFS_DATABASE_DOWNLOAD_FILE_UPDATE\",\r\n \"file\": \"reserve_proofs_1\",\r\n}"
#define SERVER_RECEIVE_DATA_SOCKET_BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_RESERVE_BYTES_DATABASE_SYNC_CHECK_ALL_UPDATE_TEST_DATA "{\r\n \"message_settings\": \"BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_RESERVE_BYTES_DATABASE_SYNC_CHECK_ALL_UPDATE\",\r\n \"reserve_bytes_settings\": \"0\",\r\n \"reserve_bytes_data_hash\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_bytes_data_hash_1\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064bfb449381660ce9f2f70fe58234921\",\r\n}"
#define SERVER_RECEIVE_DATA_SOCKET_BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_RESERVE_BYTES_DATABASE_DOWNLOAD_FILE_UPDATE_TEST_DATA "{\r\n \"message_settings\": \"BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_RESERVE_BYTES_DATABASE_DOWNLOAD_FILE_UPDATE\",\r\n \"file\": \"reserve_bytes_1\",\r\n}"
#define SERVER_RECEIVE_DATA_SOCKET_BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_DELEGATES_DATABASE_SYNC_CHECK_UPDATE_TEST_DATA "{\r\n \"message_settings\": \"BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_DELEGATES_DATABASE_SYNC_CHECK_UPDATE\",\r\n \"data_hash\": \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006c235911fe801f05bf7a7a179e6c0da1\",\r\n}"
#define SERVER_RECEIVE_DATA_SOCKET_BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_DELEGATES_DATABASE_DOWNLOAD_FILE_UPDATE_TEST_DATA "{\r\n \"message_settings\": \"BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_DELEGATES_DATABASE_DOWNLOAD_FILE_UPDATE\",\r\n}"
#define SERVER_RECEIVE_DATA_SOCKET_BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_STATISTICS_DATABASE_SYNC_CHECK_UPDATE_TEST_DATA "{\r\n \"message_settings\": \"BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_STATISTICS_DATABASE_SYNC_CHECK_UPDATE\",\r\n \"data_hash\": \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a7acbe295605ef75b73129d637178ca6\",\r\n}"
#define SERVER_RECEIVE_DATA_SOCKET_BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_STATISTICS_DATABASE_DOWNLOAD_FILE_UPDATE_TEST_DATA "{\r\n \"message_settings\": \"BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_STATISTICS_DATABASE_DOWNLOAD_FILE_UPDATE\",\r\n}"

#define RESERVE_PROOFS_TEST_DATA "{\"public_address_created_reserve_proof\":\"" TEST_WALLET "\",\"public_address_voted_for\":\"" TEST_WALLET "\",\"total\":\"0\",\"reserve_proof\":\"DATA\"}"
#define DELEGATES_TEST_DATA "{\"public_address\":\"" TEST_WALLET "\",\"total_vote_count\":\"0\",\"IP_address\":\"127.0.0.1\",\"delegate_name\":\"delegate_name_1\",\"about\":\"about\",\"website\":\"website\",\"team\":\"team\",\"shared_delegate_status\":\"solo\",\"delegate_fee\":\"0\",\"server_specs\":\"server settings\",\"block_verifier_score\":\"0\",\"online_status\":\"true\",\"block_verifier_total_rounds\":\"0\",\"block_verifier_online_total_rounds\":\"0\",\"block_verifier_online_percentage\":\"0\",\"block_producer_total_rounds\":\"0\",\"block_producer_block_heights\":\"" XCASH_PROOF_OF_STAKE_BLOCK_HEIGHT_TEST "\",\"public_key\":\"ad98cadb3b13229c78709876955247cbef40d5b15c4842be605b0e8b30c97a7a\"}"
#define SERVER_RECEIVE_DATA_SOCKET_DELEGATES_WEBSITE_GET_STATISTICS_TEST_DATA "GET /delegateswebsitegetstatistics HTTP/ " TEST_WALLET
#define SERVER_RECEIVE_DATA_SOCKET_GET_DELEGATES_TEST_DATA "GET /getdelegates HTTP/ " TEST_WALLET
#define SERVER_RECEIVE_DATA_SOCKET_GET_DELEGATES_STATISTICS_TEST_DATA "GET /getdelegatesstatistics?parameter1=XCA1pEWxj2q7gn7TJjae7JfsDhtnhydxsHhtADhDm4LbdE11rHVZqbX5MPGZ9tM7jQbDF4VKK89jSAqgL9Nxxjdh8RM5JEpZZP HTTP/"
#define SERVER_RECEIVE_DATA_SOCKET_GET_DELEGATES_INFORMATION_TEST_DATA "GET /getdelegatesinformation?parameter1=XCA1pEWxj2q7gn7TJjae7JfsDhtnhydxsHhtADhDm4LbdE11rHVZqbX5MPGZ9tM7jQbDF4VKK89jSAqgL9Nxxjdh8RM5JEpZZP HTTP/"
#define SERVER_RECEIVE_DATA_SOCKET_CHECK_VOTE_STATUS_TEST_DATA "GET /checkvotestatus?parameter1=" TEST_WALLET_1 " HTTP/"
#define SERVER_RECEIVE_DATA_SOCKET_GET_DELEGATES_VOTERS_LIST_TEST_DATA "GET /getdelegatesvoterslist?parameter1=XCA1pEWxj2q7gn7TJjae7JfsDhtnhydxsHhtADhDm4LbdE11rHVZqbX5MPGZ9tM7jQbDF4VKK89jSAqgL9Nxxjdh8RM5JEpZZP HTTP/"
#define SERVER_RECEIVE_DATA_SOCKET_GET_ROUND_STATISTICS_TEST_DATA "GET /getroundstatistics?parameter1=" XCASH_PROOF_OF_STAKE_BLOCK_HEIGHT_TEST " HTTP/ " TEST_WALLET

#define SERVER_RECEIVE_DATA_SOCKET_SHARED_DELEGATES_WEBSITE_GET_STATISTICS_TEST_DATA "GET /shareddelegateswebsitegetstatistics HTTP/ " TEST_WALLET
#define SERVER_RECEIVE_DATA_SOCKET_GET_BLOCKS_FOUND_TEST_DATA "GET /getblocksfound HTTP/ " TEST_WALLET
#define SERVER_RECEIVE_DATA_SOCKET_GET_PUBLIC_ADDRESS_INFORMATION_TEST_DATA "GET /getpublicaddressinformation?public_address=" TEST_WALLET " HTTP/"
#define SERVER_RECEIVE_DATA_SOCKET_GET_PUBLIC_ADDRESS_PAYMENT_INFORMATION_TEST_DATA "GET /getpublicaddresspaymentinformation?public_address=" TEST_WALLET " HTTP/"

// Message Templates
// Block verifiers verification process messages

/* 
  The purpose of this message is to get the current block height
 
  message_settings - The type of the message
  */
  #define GET_CURRENT_BLOCK_HEIGHT "{\r\n \"message_settings\": \"GET_CURRENT_BLOCK_HEIGHT\",\r\n}"



/* 
  The purpose of this message is to send the current block height
 
  message_settings - The type of the message
  block_height - The block_height.
  previous_block_hash - The previous block hash.
  current_round_part - The current round part (always 1)
  current_round_part_backup_node - The current main node in the current round part (0-2)
  data - A random 100 character string. This is the data that the XCASH_DPOPS_signature is used for. The random data  will create a different XCASH_DPOPS_signature for every message, even if the message data is the same.
  XCASH_DPOPS_signature - The XCASH_DPOPS_signature of the data, used for verifying that the sender of the message is the sender.
  */
  #define SEND_CURRENT_BLOCK_HEIGHT "{\r\n \"message_settings\": \"SEND_CURRENT_BLOCK_HEIGHT\",\r\n \"block_height\": \"DATA\",\r\n \"public_address\": \"" TEST_WALLET "\",\r\n \"previous_block_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\",\r\n \"current_round_part\": \"1\",\r\n \"current_round_part_backup_node\": \"0\",\r\n \"data\": \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"XCASH_DPOPS_signature\": \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n}"


 
/* 
  The purpose of this message is for the block producer to send the created block for the part of the round to the nodes, so they can verify the block.
 
  message_settings - The type of the message
  block_blob - The block_blob.
  public_address - The public address of the node that is sending the data.
  previous_block_hash - The previous block hash.
  current_round_part - The current round part (always 1)
  current_round_part_backup_node - The current main node in the current round part (0-2)
  data - A random 100 character string. This is the data that the XCASH_DPOPS_signature is used for. The random data  will create a different XCASH_DPOPS_signature for every message, even if the message data is the same.
  XCASH_DPOPS_signature - The XCASH_DPOPS_signature of the data, used for verifying that the sender of the message is the sender.
  */
  #define MAIN_NODES_TO_NODES_PART_4_OF_ROUND_CREATE_NEW_BLOCK "{\r\n \"message_settings\": \"MAIN_NODES_TO_NODES_PART_4_OF_ROUND_CREATE_NEW_BLOCK\",\r\n \"block_blob\": \"DATA\",\r\n \"public_address\": \"" TEST_WALLET "\",\r\n \"previous_block_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\",\r\n \"current_round_part\": \"1\",\r\n \"current_round_part_backup_node\": \"0\",\r\n \"data\": \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"XCASH_DPOPS_signature\": \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n}"



/* 
  The purpose of this message is for the main network data node to send the network block string and database data to the block verifiers for the start block
 
  message_settings - The type of the message
  database_data - The database data
  reserve_bytes_data_hash - The reserve bytes data hash
  public_address - The public address of the node that is sending the data.
  previous_block_hash - The previous block hash.
  current_round_part - The current round part (always 1)
  current_round_part_backup_node - The current main node in the current round part (0-2)
  data - A random 100 character string. This is the data that the XCASH_DPOPS_signature is used for. The random data  will create a different XCASH_DPOPS_signature for every message, even if the message data is the same.
  XCASH_DPOPS_signature - The XCASH_DPOPS_signature of the data, used for verifying that the sender of the message is the sender.
  */
  #define MAIN_NETWORK_DATA_NODE_TO_BLOCK_VERIFIERS_START_BLOCK "{\r\n \"message_settings\": \"MAIN_NETWORK_DATA_NODE_TO_BLOCK_VERIFIERS_START_BLOCK\",\r\n \"database_data\": \"DATA\",\r\n \"reserve_bytes_data_hash\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"public_address\": \"" TEST_WALLET "\",\r\n \"previous_block_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\",\r\n \"current_round_part\": \"1\",\r\n \"current_round_part_backup_node\": \"0\",\r\n \"data\": \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"XCASH_DPOPS_signature\": \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n}"



 /* 
  The purpose of this message is for the main node to send the created VRF data to the block verifiers so they can verify all of the block verifiers data
 
  message_settings - The type of the message
  vrf_secret_key - The VRF secret key
  vrf_public_key - The VRF public key
  random_data - The random data
  public_address - The public address of the node that is sending the data.
  previous_block_hash - The previous block hash.
  current_round_part - The current round part (always 1)
  current_round_part_backup_node - The current main node in the current round part (0-2)
  data - A random 100 character string. This is the data that the XCASH_DPOPS_signature is used for. The random data  will create a different XCASH_DPOPS_signature for every message, even if the message data is the same.
  XCASH_DPOPS_signature - The XCASH_DPOPS_signature of the data, used for verifying that the sender of the message is the sender.
  */
  #define BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_VRF_DATA "{\r\n \"message_settings\": \"BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_VRF_DATA\",\r\n \"vrf_secret_key\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vrf_public_key\": \"0000000000000000000000000000000000000000000000000000000000000000\",\r\n \"random_data\": \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"public_address\": \"" TEST_WALLET "\",\r\n \"previous_block_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\",\r\n \"current_round_part\": \"1\",\r\n \"current_round_part_backup_node\": \"0\",\r\n \"data\": \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"XCASH_DPOPS_signature\": \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n}"
 

 
/*
  This message is sent from the nodes in the mainnode_to_node_message_part_1 - 4 function and received by the nodes in the node_to_node function.
 
  The purpose of this message is for the nodes to verify that each delegate sent a majority data
 
  message_settings - The type of the message
  vote_data_1 - The vote data that the node received from current block verifier 1
  vote_data_2 - The vote data that the node received from current block verifier 2
  vote_data_3 - The vote data that the node received from current block verifier 3
  vote_data_4 - The vote data that the node received from current block verifier 4
  vote_data_5 - The vote data that the node received from current block verifier 5
  vote_data_6 - The vote data that the node received from current block verifier 6
  vote_data_7 - The vote data that the node received from current block verifier 7
  vote_data_8 - The vote data that the node received from current block verifier 8
  vote_data_9 - The vote data that the node received from current block verifier 9
  vote_data_10 - The vote data that the node received from current block verifier 10
  vote_data_11 - The vote data that the node received from current block verifier 11
  vote_data_12 - The vote data that the node received from current block verifier 12
  vote_data_13 - The vote data that the node received from current block verifier 13
  vote_data_14 - The vote data that the node received from current block verifier 14
  vote_data_15 - The vote data that the node received from current block verifier 15
  vote_data_16 - The vote data that the node received from current block verifier 16
  vote_data_17 - The vote data that the node received from current block verifier 17
  vote_data_18 - The vote data that the node received from current block verifier 18
  vote_data_19 - The vote data that the node received from current block verifier 19
  vote_data_20 - The vote data that the node received from current block verifier 20
  vote_data_21 - The vote data that the node received from current block verifier 21
  vote_data_22 - The vote data that the node received from current block verifier 22
  vote_data_23 - The vote data that the node received from current block verifier 23
  vote_data_24 - The vote data that the node received from current block verifier 24
  vote_data_25 - The vote data that the node received from current block verifier 25
  vote_data_26 - The vote data that the node received from current block verifier 26
  vote_data_27 - The vote data that the node received from current block verifier 27
  vote_data_28 - The vote data that the node received from current block verifier 28
  vote_data_29 - The vote data that the node received from current block verifier 29
  vote_data_30 - The vote data that the node received from current block verifier 30
  vote_data_31 - The vote data that the node received from current block verifier 31
  vote_data_32 - The vote data that the node received from current block verifier 32
  vote_data_33 - The vote data that the node received from current block verifier 33
  vote_data_34 - The vote data that the node received from current block verifier 34
  vote_data_35 - The vote data that the node received from current block verifier 35
  vote_data_36 - The vote data that the node received from current block verifier 36
  vote_data_37 - The vote data that the node received from current block verifier 37
  vote_data_38 - The vote data that the node received from current block verifier 38
  vote_data_39 - The vote data that the node received from current block verifier 39
  vote_data_40 - The vote data that the node received from current block verifier 40
  vote_data_41 - The vote data that the node received from current block verifier 41
  vote_data_42 - The vote data that the node received from current block verifier 42
  vote_data_43 - The vote data that the node received from current block verifier 43
  vote_data_44 - The vote data that the node received from current block verifier 44
  vote_data_45 - The vote data that the node received from current block verifier 45
  vote_data_46 - The vote data that the node received from current block verifier 46
  vote_data_47 - The vote data that the node received from current block verifier 47
  vote_data_48 - The vote data that the node received from current block verifier 48
  vote_data_49 - The vote data that the node received from current block verifier 49
  vote_data_50 - The vote data that the node received from current block verifier 50
  public_address - The public address of the node that is sending the data.
  previous_block_hash - The previous block hash.
  current_round_part - The current round part (always 1)
  current_round_part_backup_node - The current main node in the current round part (0-2)
  data - A random 100 character string. This is the data that the XCASH_DPOPS_signature is used for. The random data  will create a different XCASH_DPOPS_signature for every message, even if the message data is the same.
  XCASH_DPOPS_signature - The XCASH_DPOPS_signature of the data, used for verifying that the sender of the message is the sender.
  */
  #define NODES_TO_NODES_VOTE_MAJORITY_RESULTS "{\r\n \"message_settings\": \"NODES_TO_NODES_VOTE_MAJORITY_RESULTS\",\r\n \"vote_data_1\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_2\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_3\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_4\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_5\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_6\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_7\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_8\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_9\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_10\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_11\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_12\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_13\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_14\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_15\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_16\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_17\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_18\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_19\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_20\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_21\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_22\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_23\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_24\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_25\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_26\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_27\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_28\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_29\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_30\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_31\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_32\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_33\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_34\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_35\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_36\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_37\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_38\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_39\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_40\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_41\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_42\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_43\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_44\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_45\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_46\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_47\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_48\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_49\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"vote_data_50\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"public_address\": \"" TEST_WALLET "\",\r\n \"previous_block_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\",\r\n \"current_round_part\": \"1\",\r\n \"current_round_part_backup_node\": \"0\",\r\n \"data\": \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"XCASH_DPOPS_signature\": \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n}"





/*
  This message is sent from the nodes in the mainnode_to_node_message_part_1 - 4 function and received by the nodes in the node_to_node function.
 
  The purpose of this message is for the nodes to verify what the other nodes received from the main node.
 
  message_settings - The type of the message
  vote_settings - valid or invalid if the data was not verified.
  vote_data - The SHA2-512 data that the node received.
  public_address - The public address of the node that is sending the data.
  previous_block_hash - The previous block hash.
  current_round_part - The current round part (always 1)
  current_round_part_backup_node - The current main node in the current round part (0-2)
  data - A random 100 character string. This is the data that the XCASH_DPOPS_signature is used for. The random data  will create a different XCASH_DPOPS_signature for every message, even if the message data is the same.
  XCASH_DPOPS_signature - The XCASH_DPOPS_signature of the data, used for verifying that the sender of the message is the sender.
  */
  #define NODES_TO_NODES_VOTE_RESULTS "{\r\n \"message_settings\": \"NODES_TO_NODES_VOTE_RESULTS\",\r\n \"vote_settings\": \"valid\",\r\n \"vote_data\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"public_address\": \"" TEST_WALLET "\",\r\n \"previous_block_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\",\r\n \"current_round_part\": \"1\",\r\n \"current_round_part_backup_node\": \"0\",\r\n \"data\": \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"XCASH_DPOPS_signature\": \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n}"



  /*
  The purpose of this message is for the block verifiers to send the block verifiers their block blob signature
 
  message_settings - The type of the message
  block_blob_signature - The block blob signature
  public_address - The public address of the node that is sending the data.
  previous_block_hash - The previous block hash.
  current_round_part - The current round part (always 1)
  current_round_part_backup_node - The current main node in the current round part (0-2)
  data - A random 100 character string. This is the data that the XCASH_DPOPS_signature is used for. The random data  will create a different XCASH_DPOPS_signature for every message, even if the message data is the same.
  XCASH_DPOPS_signature - The XCASH_DPOPS_signature of the data, used for verifying that the sender of the message is the sender.
  */
  #define BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_BLOCK_BLOB_SIGNATURE "{\r\n \"message_settings\": \"BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_BLOCK_BLOB_SIGNATURE\",\r\n \"block_blob_signature\": \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"public_address\": \"" TEST_WALLET "\",\r\n \"previous_block_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\",\r\n \"current_round_part\": \"1\",\r\n \"current_round_part_backup_node\": \"0\",\r\n \"data\": \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"XCASH_DPOPS_signature\": \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n}"





/*
  The purpose of this message is for the block verifiers to send the block verifiers the invalid reserve proofs they have found
 
  message_settings - The type of the message
  public_address_that_created_the_reserve_proof - The public address that created the reserve proof
  reserve_proof - The reserve proof
  public_address - The public address of the node that is sending the data.
  previous_block_hash - The previous block hash.
  current_round_part - The current round part (always 1)
  current_round_part_backup_node - The current main node in the current round part (0-2)
  data - A random 100 character string. This is the data that the XCASH_DPOPS_signature is used for. The random data  will create a different XCASH_DPOPS_signature for every message, even if the message data is the same.
  XCASH_DPOPS_signature - The XCASH_DPOPS_signature of the data, used for verifying that the sender of the message is the sender.
  */
  #define BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_INVALID_RESERVE_PROOFS "{\r\n \"message_settings\": \"BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_INVALID_RESERVE_PROOFS\",\r\n \"public_address_that_created_the_reserve_proof\": \"" TEST_WALLET "\",\r\n,\r\n \"reserve_proof\": \"ReserveProofV11BZ23sBt9sZJeGccf84mzyAmNCP3KzYbE1111112VKmH111118PRh4AT7VvXjWBm8SAPTf55QJP1E3fkm8f3oe3VWeT5o8YybH9113USPdfBXLfpWTHYMCJAmGa2CcFiyHn5Gj9PCuHaKB3VHdqTEy6shyi4bW8FuTLyhTpDcnS7uEAyQcijSuHEUcgTwUSNSwuzvT113ka91zQXMcjYwZ39zAJVS16DuJZNRWnQaiNJVsracFDmUsXCCWcMx5HpKDNn5N3H1qSCxhV4CdUN2cB8Z2iirSgiL2frFA1DrVCKJm5kNHSANEGjHe4mw5L6L2Yeabna74FLszbBPKso42fpctQ8Djj25hqj6pEQqHY4tTaAYfkVRuB4m8DU4aNZN1Ak9vkBxvZtVDRzX3mpqVD8iWbxviCsUigMkyogxAWSQR5rjh4uUTRP7QHCpCm1o34Qc1vrDsLzXWbvcwC1g1VUh3S5dDKX2FXGJT4DX2REwtCNCZX2MZE2wGcbLRZ3vj4jQ6NzwTqT\",\r\n \"public_address\": \"" TEST_WALLET "\",\r\n \"previous_block_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\",\r\n \"current_round_part\": \"1\",\r\n \"current_round_part_backup_node\": \"0\",\r\n \"data\": \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"XCASH_DPOPS_signature\": \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n}"



/*
  The purpose of this message is for a node to retrieve a list of the previous, current and next block verifiers from a network data node
 
  message_settings - The type of the message
  */
  #define NODE_TO_NETWORK_DATA_NODES_GET_PREVIOUS_CURRENT_NEXT_BLOCK_VERIFIERS_LIST "{\r\n \"message_settings\": \"NODE_TO_NETWORK_DATA_NODES_GET_PREVIOUS_CURRENT_NEXT_BLOCK_VERIFIERS_LIST\",\r\n}"
 


/*
  The purpose of this message is for a node to retrieve a list of the current block verifiers from a network data node
 
  message_settings - The type of the message
  */
  #define NODE_TO_NETWORK_DATA_NODES_GET_CURRENT_BLOCK_VERIFIERS_LIST "{\r\n \"message_settings\": \"NODE_TO_NETWORK_DATA_NODES_GET_CURRENT_BLOCK_VERIFIERS_LIST\",\r\n}"
 


 /*
  The purpose of this message is for the network data node to send the current block verifiers list to a node
 
  message_settings - The type of the message
  previous_block_verifiers_name_list - The list of all previous_block verifiers names name1|name2
  previous_block_verifiers_public_address_list - The list of all previous_block verifiers public addresses public_address1|public_address2
  previous_block_verifiers_IP_address_list - The list of all previous_block verifiers IP addresses IP_address1|IP_address2
  current_block_verifiers_name_list - The list of all current_block verifiers names name1|name2
  current_block_verifiers_public_address_list - The list of all current_block verifiers public addresses public_address1|public_address2
  current_block_verifiers_IP_address_list - The list of all current_block verifiers IP addresses IP_address1|IP_address2
  next_block_verifiers_name_list - The list of all next_block verifiers names name1|name2
  next_block_verifiers_public_address_list - The list of all next_block verifiers public addresses public_address1|public_address2
  next_block_verifiers_IP_address_list - The list of all next_block verifiers IP addresses IP_address1|IP_address2
  public_address - The public address of the node that is sending the data.
  previous_block_hash - The previous block hash.
  current_round_part - The current round part (always 1)
  current_round_part_backup_node - The current main node in the current round part (0-2)
  data - A random 100 character string. This is the data that the XCASH_DPOPS_signature is used for. The random data  will create a different XCASH_DPOPS_signature for every message, even if the message data is the same.
  XCASH_DPOPS_signature - The XCASH_DPOPS_signature of the data, used for verifying that the sender of the message is the sender.
  */
  #define NETWORK_DATA_NODE_TO_NODE_SEND_PREVIOUS_CURRENT_NEXT_BLOCK_VERIFIERS_LIST "{\r\n \"message_settings\": \"NETWORK_DATA_NODE_TO_NODE_SEND_PREVIOUS_CURRENT_NEXT_BLOCK_VERIFIERS_LIST\",\r\n \"previous_block_verifiers_name_list\": \"NETWORK_DATA_NODE_TO_NODE_SEND_PREVIOUS_CURRENT_NEXT_BLOCK_VERIFIERS_LIST\",\r\n \"previous_block_verifiers_public_address_list\": \"NETWORK_DATA_NODE_TO_NODE_SEND_PREVIOUS_CURRENT_NEXT_BLOCK_VERIFIERS_LIST\",\r\n \"previous_block_verifiers_IP_address_list\": \"NETWORK_DATA_NODE_TO_NODE_SEND_PREVIOUS_CURRENT_NEXT_BLOCK_VERIFIERS_LIST\",\r\n \"current_block_verifiers_name_list\": \"NETWORK_DATA_NODE_TO_NODE_SEND_PREVIOUS_CURRENT_NEXT_BLOCK_VERIFIERS_LIST\",\r\n \"current_block_verifiers_public_address_list\": \"NETWORK_DATA_NODE_TO_NODE_SEND_PREVIOUS_CURRENT_NEXT_BLOCK_VERIFIERS_LIST\",\r\n \"current_block_verifiers_IP_address_list\": \"NETWORK_DATA_NODE_TO_NODE_SEND_PREVIOUS_CURRENT_NEXT_BLOCK_VERIFIERS_LIST\",\r\n \"next_block_verifiers_name_list\": \"NETWORK_DATA_NODE_TO_NODE_SEND_PREVIOUS_CURRENT_NEXT_BLOCK_VERIFIERS_LIST\",\r\n \"next_block_verifiers_public_address_list\": \"NETWORK_DATA_NODE_TO_NODE_SEND_PREVIOUS_CURRENT_NEXT_BLOCK_VERIFIERS_LIST\",\r\n \"next_block_verifiers_IP_address_list\": \"NETWORK_DATA_NODE_TO_NODE_SEND_PREVIOUS_CURRENT_NEXT_BLOCK_VERIFIERS_LIST\",\r\n \"public_address\": \"" TEST_WALLET "\",\r\n \"previous_block_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\",\r\n \"current_round_part\": \"1\",\r\n \"current_round_part_backup_node\": \"0\",\r\n \"data\": \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"XCASH_DPOPS_signature\": \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n}"
  
 
 
/*
  The purpose of this message is for the network data node to send the current block verifiers list to a node
 
  message_settings - The type of the message  
  block_verifiers_public_address_list - The list of all block verifiers public addresses public_address1|public_address2
  block_verifiers_IP_address_list - The list of all block verifiers IP addresses IP_address1|IP_address2
  public_address - The public address of the node that is sending the data.
  previous_block_hash - The previous block hash.
  current_round_part - The current round part (always 1)
  current_round_part_backup_node - The current main node in the current round part (0-2)
  data - A random 100 character string. This is the data that the XCASH_DPOPS_signature is used for. The random data  will create a different XCASH_DPOPS_signature for every message, even if the message data is the same.
  XCASH_DPOPS_signature - The XCASH_DPOPS_signature of the data, used for verifying that the sender of the message is the sender.
  */
  #define NETWORK_DATA_NODE_TO_NODE_SEND_CURRENT_BLOCK_VERIFIERS_LIST "{\r\n \"message_settings\": \"NETWORK_DATA_NODE_TO_NODE_SEND_CURRENT_BLOCK_VERIFIERS_LIST\",\r\n \"block_verifiers_public_address_list\": \"NETWORK_DATA_NODE_TO_NODE_SEND_CURRENT_BLOCK_VERIFIERS_LIST\",\r\n \"block_verifiers_IP_address_list\": \"NETWORK_DATA_NODE_TO_NODE_SEND_CURRENT_BLOCK_VERIFIERS_LIST\",\r\n \"public_address\": \"" TEST_WALLET "\",\r\n \"previous_block_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\",\r\n \"current_round_part\": \"1\",\r\n \"current_round_part_backup_node\": \"0\",\r\n \"data\": \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"XCASH_DPOPS_signature\": \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n}"
  


  /* 
  The purpose of this message is for the block verifier to check their current time with the network data nodes
 
  message_settings - The type of the message
  public_address - The public address of the node that is sending the data.
  previous_block_hash - The previous block hash.
  current_round_part - The current round part (always 1)
  current_round_part_backup_node - The current main node in the current round part (0-2)
  data - A random 100 character string. This is the data that the XCASH_DPOPS_signature is used for. The random data  will create a different XCASH_DPOPS_signature for every message, even if the message data is the same.
  XCASH_DPOPS_signature - The XCASH_DPOPS_signature of the data, used for verifying that the sender of the message is the sender.
  */
  #define BLOCK_VERIFIERS_TO_NETWORK_DATA_NODE_BLOCK_VERIFIERS_CURRENT_TIME "{\r\n \"message_settings\": \"BLOCK_VERIFIERS_TO_NETWORK_DATA_NODE_BLOCK_VERIFIERS_CURRENT_TIME\",\r\n \"public_address\": \"" TEST_WALLET "\",\r\n \"previous_block_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\",\r\n \"current_round_part\": \"1\",\r\n \"current_round_part_backup_node\": \"0\",\r\n \"data\": \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"XCASH_DPOPS_signature\": \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n}"



  /* 
  The purpose of this message is for the block verifier to check their current time with the network data nodes
 
  message_settings - The type of the message
  current_time - The current time.
  public_address - The public address of the node that is sending the data.
  previous_block_hash - The previous block hash.
  current_round_part - The current round part (always 1)
  current_round_part_backup_node - The current main node in the current round part (0-2)
  data - A random 100 character string. This is the data that the XCASH_DPOPS_signature is used for. The random data  will create a different XCASH_DPOPS_signature for every message, even if the message data is the same.
  XCASH_DPOPS_signature - The XCASH_DPOPS_signature of the data, used for verifying that the sender of the message is the sender.
  */
  #define NETWORK_DATA_NODE_TO_BLOCK_VERIFIERS_BLOCK_VERIFIERS_CURRENT_TIME "{\r\n \"message_settings\": \"NETWORK_DATA_NODE_TO_BLOCK_VERIFIERS_BLOCK_VERIFIERS_CURRENT_TIME\",\r\n \"current_time\": \"NETWORK_DATA_NODE_TO_BLOCK_VERIFIERS_BLOCK_VERIFIERS_CURRENT_TIME\",\r\n \"public_address\": \"" TEST_WALLET "\",\r\n \"previous_block_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\",\r\n \"current_round_part\": \"1\",\r\n \"current_round_part_backup_node\": \"0\",\r\n \"data\": \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"XCASH_DPOPS_signature\": \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n}"



  /* 
  The purpose of this message is for the block verifier to send their online status to the other block verifiers
 
  message_settings - The type of the message
  public_address - The public address of the node that is sending the data.
  previous_block_hash - The previous block hash.
  current_round_part - The current round part (always 1)
  current_round_part_backup_node - The current main node in the current round part (0-2)
  data - A random 100 character string. This is the data that the XCASH_DPOPS_signature is used for. The random data  will create a different XCASH_DPOPS_signature for every message, even if the message data is the same.
  XCASH_DPOPS_signature - The XCASH_DPOPS_signature of the data, used for verifying that the sender of the message is the sender.
  */
  #define BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_ONLINE_STATUS "{\r\n \"message_settings\": \"BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_ONLINE_STATUS\",\r\n \"public_address\": \"" TEST_WALLET "\",\r\n \"previous_block_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\",\r\n \"current_round_part\": \"1\",\r\n \"current_round_part_backup_node\": \"0\",\r\n \"data\": \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"XCASH_DPOPS_signature\": \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n}"
 


  // Delegates commands

/*
  The purpose of this message is for a node to send all block verifiers its delegate data to register

  message_settings - The type of the message
  delegate_name - The delegate name
  delegates_IP_address - The delegates IP address
  delegates_public_key - The delegates public key
  public_address - The public address of the node that is sending the data.
  XCASH_DPOPS_signature - The XCASH_DPOPS_signature of the data, used for verifying that the sender of the message is the sender.
  */
  #define NODES_TO_BLOCK_VERIFIERS_REGISTER_DELEGATE "NODES_TO_BLOCK_VERIFIERS_REGISTER_DELEGATE|delegate_name|delegates_IP_address.|0000000000000000000000000000000000000000000000000000000000000000|" TEST_WALLET "|SigV10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000|"



/*
  The purpose of this message is for a node to send all block verifiers a message to update the delegates information

  message_settings - The type of the message
  item - The field name to update (about, website, team, shared_delegate_status, delegate_fee, server_specs)
  value - The field names value
  public_address - The public address of the node that is sending the data.
  XCASH_DPOPS_signature - The XCASH_DPOPS_signature of the data, used for verifying that the sender of the message is the sender.
  */
  #define NODES_TO_BLOCK_VERIFIERS_UPDATE_DELEGATE "NODES_TO_BLOCK_VERIFIERS_UPDATE_DELEGATE|about|data|" TEST_WALLET "|SigV10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000|"



/*
  The purpose of this message is for a node to send all block verifiers a message to recover the delegate

  message_settings - The type of the message
  domain_name - The domain name
  public_address - The public address of the node that is sending the data.
  XCASH_DPOPS_signature - The XCASH_DPOPS_signature of the data, used for verifying that the sender of the message is the sender.
  */
  #define NODES_TO_BLOCK_VERIFIERS_RECOVER_DELEGATE "NODES_TO_BLOCK_VERIFIERS_RECOVER_DELEGATE|domain_name|" TEST_WALLET "|SigV10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000|"



/*
  The purpose of this message is for a node to send a reserve proof to the block verifiers to add to the reserve proofs database
 
  message_settings - The type of the message
  delegates_public_address - The delegates public address
  reserve_proof - The reserve proof
  public_address - The public address of the node that is sending the data.
  XCASH_DPOPS_signature - The XCASH_DPOPS_signature of the data, used for verifying that the sender of the message is the sender.
  */
  #define NODE_TO_BLOCK_VERIFIERS_ADD_RESERVE_PROOF "NODE_TO_BLOCK_VERIFIERS_ADD_RESERVE_PROOF|" TEST_WALLET "|ReserveProofV11BZ23sBt9sZJeGccf84mzyAmNCP3KzYbE1111112VKmH111118PRh4AT7VvXjWBm8SAPTf55QJP1E3fkm8f3oe3VWeT5o8YybH9113USPdfBXLfpWTHYMCJAmGa2CcFiyHn5Gj9PCuHaKB3VHdqTEy6shyi4bW8FuTLyhTpDcnS7uEAyQcijSuHEUcgTwUSNSwuzvT113ka91zQXMcjYwZ39zAJVS16DuJZNRWnQaiNJVsracFDmUsXCCWcMx5HpKDNn5N3H1qSCxhV4CdUN2cB8Z2iirSgiL2frFA1DrVCKJm5kNHSANEGjHe4mw5L6L2Yeabna74FLszbBPKso42fpctQ8Djj25hqj6pEQqHY4tTaAYfkVRuB4m8DU4aNZN1Ak9vkBxvZtVDRzX3mpqVD8iWbxviCsUigMkyogxAWSQR5rjh4uUTRP7QHCpCm1o34Qc1vrDsLzXWbvcwC1g1VUh3S5dDKX2FXGJT4DX2REwtCNCZX2MZE2wGcbLRZ3vj4jQ6NzwTqT|" TEST_WALLET "|SigV10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000|"



/*
  The purpose of this message is for a node to get their vote status
 
  message_settings - The type of the message
  public_address - The public address of the node that is sending the data.
  */
  #define NODE_TO_NETWORK_DATA_NODES_CHECK_VOTE_STATUS "NODE_TO_NETWORK_DATA_NODES_CHECK_VOTE_STATUS|" TEST_WALLET "|"



  // Blockchain syncing process 
 
 /*
  The purpose of this message is for a node to retrieve the reserve bytes data hash for a range of blocks
 
  message_settings - The type of the message
  block_height - The block height
  */
  #define NODE_TO_BLOCK_VERIFIERS_GET_RESERVE_BYTES_DATABASE_HASH "{\r\n \"message_settings\": \"NODE_TO_BLOCK_VERIFIERS_GET_RESERVE_BYTES_DATABASE_HASH\",\r\n \"block_height\": \"NODE_TO_BLOCK_VERIFIERS_GET_RESERVE_BYTES_DATABASE_HASH\",\r\n}"
 


 /*
  The purpose of this message is for a node to check if they are a current block verifier
 
  message_settings - The type of the message
  */
  #define NODE_TO_BLOCK_VERIFIERS_CHECK_IF_CURRENT_BLOCK_VERIFIER "{\r\n \"message_settings\": \"NODE_TO_BLOCK_VERIFIERS_CHECK_IF_CURRENT_BLOCK_VERIFIER\",\r\n}"
 
 
 
/*
  The purpose of this message is for a block verifier to send the reserve bytes for a given block to a node
 
  message_settings - The type of the message
  reserve_bytes - The reserve_bytes
  public_address - The public address of the node that is sending the data.
  previous_block_hash - The previous block hash.
  current_round_part - The current round part (always 1)
  current_round_part_backup_node - The current main node in the current round part (0-2)
  data - A random 100 character string. This is the data that the XCASH_DPOPS_signature is used for. The random data  will create a different XCASH_DPOPS_signature for every message, even if the message data is the same.
  XCASH_DPOPS_signature - The XCASH_DPOPS_signature of the data, used for verifying that the sender of the message is the sender.
  */
  #define BLOCK_VERIFIERS_TO_NODE_SEND_RESERVE_BYTES "{\r\n \"message_settings\": \"BLOCK_VERIFIERS_TO_NODE_SEND_RESERVE_BYTES\",\r\n \"reserve_bytes\": \"DATA\",\r\n \"public_address\": \"" TEST_WALLET "\",\r\n \"previous_block_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\",\r\n \"current_round_part\": \"1\",\r\n \"current_round_part_backup_node\": \"0\",\r\n \"data\": \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"XCASH_DPOPS_signature\": \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n}"
 


/*
  The purpose of this message is for a node to check what block verifiers have a synced reserve bytes database
 
  message_settings - The type of the message
  data_hash - The data hash of the reserve_bytes database
  public_address - The public address of the node that is sending the data.
  previous_block_hash - The previous block hash.
  current_round_part - The current round part (always 1)
  current_round_part_backup_node - The current main node in the current round part (0-2)
  data - A random 100 character string. This is the data that the XCASH_DPOPS_signature is used for. The random data  will create a different XCASH_DPOPS_signature for every message, even if the message data is the same.
  XCASH_DPOPS_signature - The XCASH_DPOPS_signature of the data, used for verifying that the sender of the message is the sender.
  */
  #define BLOCK_VERIFIERS_TO_NODES_RESERVE_BYTES_DATABASE_SYNC_CHECK_ALL_DOWNLOAD "{\r\n \"message_settings\": \"BLOCK_VERIFIERS_TO_NODES_RESERVE_BYTES_DATABASE_SYNC_CHECK_ALL_DOWNLOAD\",\r\n \"data_hash\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"public_address\": \"" TEST_WALLET "\",\r\n \"previous_block_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\",\r\n \"current_round_part\": \"1\",\r\n \"current_round_part_backup_node\": \"0\",\r\n \"data\": \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"XCASH_DPOPS_signature\": \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n}"



  // Database syncing process

  /*
  The purpose of this message is for the network data nodes to get the database data hash from the other network data nodes to check if there is a majority
 
  message_settings - The type of the message
  data_hash_reserve_proofs - The data hash of the reserve proofs database
  data_hash_reserve_bytes - The data hash of the reserve bytes database
  data_hash_delegates - The data hash of the delegates database
  data_hash_statistics - The data hash of the statistics database
  previous_blocks_reserve_bytes - true if the network data node has the previous blocks reserve bytes, false if not
  public_address - The public address of the node that is sending the data.
  previous_block_hash - The previous block hash.
  current_round_part - The current round part (always 1)
  current_round_part_backup_node - The current main node in the current round part (0-2)
  data - A random 100 character string. This is the data that the XCASH_DPOPS_signature is used for. The random data  will create a different XCASH_DPOPS_signature for every message, even if the message data is the same.
  XCASH_DPOPS_signature - The XCASH_DPOPS_signature of the data, used for verifying that the sender of the message is the sender.
  */
  #define NETWORK_DATA_NODES_TO_NETWORK_DATA_NODES_DATABASE_SYNC_CHECK "{\r\n \"message_settings\": \"NETWORK_DATA_NODES_TO_NETWORK_DATA_NODES_DATABASE_SYNC_CHECK\",\r\n \"data_hash_reserve_proofs\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"data_hash_reserve_bytes\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"data_hash_delegates\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"data_hash_statistics\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"previous_blocks_reserve_bytes\": \"true\",\r\n \"public_address\": \"" TEST_WALLET "\",\r\n \"previous_block_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\",\r\n \"current_round_part\": \"1\",\r\n \"current_round_part_backup_node\": \"0\",\r\n \"data\": \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"XCASH_DPOPS_signature\": \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n}"
 

 
/*
  The purpose of this message is for a block verifiers to check if they are synced up to the reserve bytes decentralized database
 
  message_settings - The type of the message
  reserve_bytes_settings - 0 to sync all reserve byte databases, 1 to sync only the current reserve byte database
  reserve_bytes_data_hash - The data hash of the reserve_bytes database
  reserve_bytes_data_hash_1 - The data hash of the reserve_bytes_1 database
  public_address - The public address of the node that is sending the data.
  previous_block_hash - The previous block hash.
  current_round_part - The current round part (always 1)
  current_round_part_backup_node - The current main node in the current round part (0-2)
  data - A random 100 character string. This is the data that the XCASH_DPOPS_signature is used for. The random data  will create a different XCASH_DPOPS_signature for every message, even if the message data is the same.
  XCASH_DPOPS_signature - The XCASH_DPOPS_signature of the data, used for verifying that the sender of the message is the sender.
  */
  #define BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_RESERVE_BYTES_DATABASE_SYNC_CHECK_ALL_UPDATE "{\r\n \"message_settings\": \"BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_RESERVE_BYTES_DATABASE_SYNC_CHECK_ALL_UPDATE\",\r\n \"reserve_bytes_settings\": \"0\",\r\n \"reserve_bytes_data_hash\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_bytes_data_hash_1\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"public_address\": \"" TEST_WALLET "\",\r\n \"previous_block_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\",\r\n \"current_round_part\": \"1\",\r\n \"current_round_part_backup_node\": \"0\",\r\n \"data\": \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"XCASH_DPOPS_signature\": \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n}"
 
 
 
/*
  The purpose of this message is for the block verifiers to send a block verifier a message if their reserve bytes database is up to date
 
  message_settings - The type of the message
  reserve_bytes_database - True if the database file is synced, false if not
  public_address - The public address of the node that is sending the data.
  previous_block_hash - The previous block hash.
  current_round_part - The current round part (always 1)
  current_round_part_backup_node - The current main node in the current round part (0-2)
  data - A random 100 character string. This is the data that the XCASH_DPOPS_signature is used for. The random data  will create a different XCASH_DPOPS_signature for every message, even if the message data is the same.
  XCASH_DPOPS_signature - The XCASH_DPOPS_signature of the data, used for verifying that the sender of the message is the sender.
  */
  #define BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_RESERVE_BYTES_DATABASE_SYNC_CHECK_ALL_DOWNLOAD "{\r\n \"message_settings\": \"BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_RESERVE_BYTES_DATABASE_SYNC_CHECK_ALL_DOWNLOAD\",\r\n \"reserve_bytes_database\": \"true\",\r\n \"public_address\": \"" TEST_WALLET "\",\r\n \"previous_block_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\",\r\n \"current_round_part\": \"1\",\r\n \"current_round_part_backup_node\": \"0\",\r\n \"data\": \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"XCASH_DPOPS_signature\": \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n}"
 
 
 
/*
  The purpose of this message is for the block verifiers to send a block verifier a message if their reserve bytes database is up to date
 
  message_settings - The type of the message
  reserve_bytes_database - True if the database file is synced, false if not
  public_address - The public address of the node that is sending the data.
  previous_block_hash - The previous block hash.
  current_round_part - The current round part (always 1)
  current_round_part_backup_node - The current main node in the current round part (0-2)
  data - A random 100 character string. This is the data that the XCASH_DPOPS_signature is used for. The random data  will create a different XCASH_DPOPS_signature for every message, even if the message data is the same.
  XCASH_DPOPS_signature - The XCASH_DPOPS_signature of the data, used for verifying that the sender of the message is the sender.
  */
  #define BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_RESERVE_BYTES_DATABASE_SYNC_CHECK_DOWNLOAD "{\r\n \"message_settings\": \"BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_RESERVE_BYTES_DATABASE_SYNC_CHECK_DOWNLOAD\",\r\n \"reserve_bytes_database\": \"true\",\r\n \"public_address\": \"" TEST_WALLET "\",\r\n \"previous_block_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\",\r\n \"current_round_part\": \"1\",\r\n \"current_round_part_backup_node\": \"0\",\r\n \"data\": \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"XCASH_DPOPS_signature\": \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n}"
 
 
 
/*
  The purpose of this message is for a block verifiers to download the up to date reserve bytes database
 
  message_settings - The type of the message
  file - The file number
  public_address - The public address of the node that is sending the data.
  previous_block_hash - The previous block hash.
  current_round_part - The current round part (always 1)
  current_round_part_backup_node - The current main node in the current round part (0-2)
  data - A random 100 character string. This is the data that the XCASH_DPOPS_signature is used for. The random data  will create a different XCASH_DPOPS_signature for every message, even if the message data is the same.
  XCASH_DPOPS_signature - The XCASH_DPOPS_signature of the data, used for verifying that the sender of the message is the sender.
  */
  #define BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_RESERVE_BYTES_DATABASE_DOWNLOAD_FILE_UPDATE "{\r\n \"message_settings\": \"BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_RESERVE_BYTES_DATABASE_DOWNLOAD_FILE_UPDATE\",\r\n \"file\": \"reserve_bytes_1\",\r\n \"public_address\": \"" TEST_WALLET "\",\r\n \"previous_block_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\",\r\n \"current_round_part\": \"1\",\r\n \"current_round_part_backup_node\": \"0\",\r\n \"data\": \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"XCASH_DPOPS_signature\": \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n}"
 
 
 
/*
  The purpose of this message is for the block verifiers to send a block verifier the up to date reserve bytes database
 
  message_settings - The type of the message
  reserve_bytes_database - The database data (contains empty_database_collection if the database is empty)
  public_address - The public address of the node that is sending the data.
  previous_block_hash - The previous block hash.
  current_round_part - The current round part (always 1)
  current_round_part_backup_node - The current main node in the current round part (0-2)
  data - A random 100 character string. This is the data that the XCASH_DPOPS_signature is used for. The random data  will create a different XCASH_DPOPS_signature for every message, even if the message data is the same.
  XCASH_DPOPS_signature - The XCASH_DPOPS_signature of the data, used for verifying that the sender of the message is the sender.
  */
  #define BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_RESERVE_BYTES_DATABASE_DOWNLOAD_FILE_DOWNLOAD "{\r\n \"message_settings\": \"BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_RESERVE_BYTES_DATABASE_DOWNLOAD_FILE_DOWNLOAD\",\r\n \"reserve_bytes_database\": \"DATA\",\r\n \"public_address\": \"" TEST_WALLET "\",\r\n \"previous_block_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\",\r\n \"current_round_part\": \"1\",\r\n \"current_round_part_backup_node\": \"0\",\r\n \"data\": \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"XCASH_DPOPS_signature\": \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n}"
 
 
 
/*
  The purpose of this message is for a block verifiers to check if they are synced up to the reserve proofs decentralized database
 
  message_settings - The type of the message
  reserve_proofs_data_hash - The data hash of the reserve_proofs database
  reserve_proofs_data_hash_1 - The data hash of the reserve_proofs_1 database
  reserve_proofs_data_hash_2 - The data hash of the reserve_proofs_2 database
  reserve_proofs_data_hash_3 - The data hash of the reserve_proofs_3 database
  reserve_proofs_data_hash_4 - The data hash of the reserve_proofs_4 database
  reserve_proofs_data_hash_5 - The data hash of the reserve_proofs_5 database
  reserve_proofs_data_hash_6 - The data hash of the reserve_proofs_6 database
  reserve_proofs_data_hash_7 - The data hash of the reserve_proofs_7 database
  reserve_proofs_data_hash_8 - The data hash of the reserve_proofs_8 database
  reserve_proofs_data_hash_9 - The data hash of the reserve_proofs_9 database
  reserve_proofs_data_hash_10 - The data hash of the reserve_proofs_10 database
  reserve_proofs_data_hash_11 - The data hash of the reserve_proofs_11 database
  reserve_proofs_data_hash_12 - The data hash of the reserve_proofs_12 database
  reserve_proofs_data_hash_13 - The data hash of the reserve_proofs_13 database
  reserve_proofs_data_hash_14 - The data hash of the reserve_proofs_14 database
  reserve_proofs_data_hash_15 - The data hash of the reserve_proofs_15 database
  reserve_proofs_data_hash_16 - The data hash of the reserve_proofs_16 database
  reserve_proofs_data_hash_17 - The data hash of the reserve_proofs_17 database
  reserve_proofs_data_hash_18 - The data hash of the reserve_proofs_18 database
  reserve_proofs_data_hash_19 - The data hash of the reserve_proofs_19 database
  reserve_proofs_data_hash_20 - The data hash of the reserve_proofs_20 database
  reserve_proofs_data_hash_21 - The data hash of the reserve_proofs_21 database
  reserve_proofs_data_hash_22 - The data hash of the reserve_proofs_22 database
  reserve_proofs_data_hash_23 - The data hash of the reserve_proofs_23 database
  reserve_proofs_data_hash_24 - The data hash of the reserve_proofs_24 database
  reserve_proofs_data_hash_25 - The data hash of the reserve_proofs_25 database
  reserve_proofs_data_hash_26 - The data hash of the reserve_proofs_26 database
  reserve_proofs_data_hash_27 - The data hash of the reserve_proofs_27 database
  reserve_proofs_data_hash_28 - The data hash of the reserve_proofs_28 database
  reserve_proofs_data_hash_29 - The data hash of the reserve_proofs_29 database
  reserve_proofs_data_hash_30 - The data hash of the reserve_proofs_30 database
  reserve_proofs_data_hash_31 - The data hash of the reserve_proofs_31 database
  reserve_proofs_data_hash_32 - The data hash of the reserve_proofs_32 database
  reserve_proofs_data_hash_33 - The data hash of the reserve_proofs_33 database
  reserve_proofs_data_hash_34 - The data hash of the reserve_proofs_34 database
  reserve_proofs_data_hash_35 - The data hash of the reserve_proofs_35 database
  reserve_proofs_data_hash_36 - The data hash of the reserve_proofs_36 database
  reserve_proofs_data_hash_37 - The data hash of the reserve_proofs_37 database
  reserve_proofs_data_hash_38 - The data hash of the reserve_proofs_38 database
  reserve_proofs_data_hash_39 - The data hash of the reserve_proofs_39 database
  reserve_proofs_data_hash_40 - The data hash of the reserve_proofs_40 database
  reserve_proofs_data_hash_41 - The data hash of the reserve_proofs_41 database
  reserve_proofs_data_hash_42 - The data hash of the reserve_proofs_42 database
  reserve_proofs_data_hash_43 - The data hash of the reserve_proofs_43 database
  reserve_proofs_data_hash_44 - The data hash of the reserve_proofs_44 database
  reserve_proofs_data_hash_45 - The data hash of the reserve_proofs_45 database
  reserve_proofs_data_hash_46 - The data hash of the reserve_proofs_46 database
  reserve_proofs_data_hash_47 - The data hash of the reserve_proofs_47 database
  reserve_proofs_data_hash_48 - The data hash of the reserve_proofs_48 database
  reserve_proofs_data_hash_49 - The data hash of the reserve_proofs_49 database
  reserve_proofs_data_hash_50 - The data hash of the reserve_proofs_50 database
  public_address - The public address of the node that is sending the data.
  previous_block_hash - The previous block hash.
  current_round_part - The current round part (always 1)
  current_round_part_backup_node - The current main node in the current round part (0-2)
  data - A random 100 character string. This is the data that the XCASH_DPOPS_signature is used for. The random data  will create a different XCASH_DPOPS_signature for every message, even if the message data is the same.
  XCASH_DPOPS_signature - The XCASH_DPOPS_signature of the data, used for verifying that the sender of the message is the sender.
  */
  #define BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_RESERVE_PROOFS_DATABASE_SYNC_CHECK_ALL_UPDATE "{\r\n \"message_settings\": \"BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_RESERVE_PROOFS_DATABASE_SYNC_CHECK_ALL_UPDATE\",\r\n \"reserve_proofs_data_hash\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_1\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_2\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_3\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_4\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_5\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_6\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_7\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_8\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_9\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_10\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_11\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_12\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_13\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_14\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_15\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_16\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_17\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_18\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_19\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_20\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_21\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_22\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_23\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_24\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_25\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_26\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_27\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_28\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_29\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_30\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_31\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_32\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_33\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_34\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_35\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_36\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_37\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_38\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_39\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_40\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_41\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_42\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_43\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_44\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_45\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_46\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_47\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_48\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_49\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_data_hash_50\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"public_address\": \"" TEST_WALLET "\",\r\n \"previous_block_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\",\r\n \"current_round_part\": \"1\",\r\n \"current_round_part_backup_node\": \"0\",\r\n \"data\": \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"XCASH_DPOPS_signature\": \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n}"
 
 
 
/*
  The purpose of this message is for the block verifiers to send a block verifier a message if their reserve proofs database is up to date
 
  message_settings - The type of the message
  reserve_proofs_database - true if all of the reserve proof databases are synced, false if not
  reserve_proofs_database_1 - true if the database is synced, false if not
  reserve_proofs_database_2 - true if the database is synced, false if not
  reserve_proofs_database_3 - true if the database is synced, false if not
  reserve_proofs_database_4 - true if the database is synced, false if not
  reserve_proofs_database_5 - true if the database is synced, false if not
  reserve_proofs_database_6 - true if the database is synced, false if not
  reserve_proofs_database_7 - true if the database is synced, false if not
  reserve_proofs_database_8 - true if the database is synced, false if not
  reserve_proofs_database_9 - true if the database is synced, false if not
  reserve_proofs_database_10 - true if the database is synced, false if not
  reserve_proofs_database_11 - true if the database is synced, false if not
  reserve_proofs_database_12 - true if the database is synced, false if not
  reserve_proofs_database_13 - true if the database is synced, false if not
  reserve_proofs_database_14 - true if the database is synced, false if not
  reserve_proofs_database_15 - true if the database is synced, false if not
  reserve_proofs_database_16 - true if the database is synced, false if not
  reserve_proofs_database_17 - true if the database is synced, false if not
  reserve_proofs_database_18 - true if the database is synced, false if not
  reserve_proofs_database_19 - true if the database is synced, false if not
  reserve_proofs_database_20 - true if the database is synced, false if not
  reserve_proofs_database_21 - true if the database is synced, false if not
  reserve_proofs_database_22 - true if the database is synced, false if not
  reserve_proofs_database_23 - true if the database is synced, false if not
  reserve_proofs_database_24 - true if the database is synced, false if not
  reserve_proofs_database_25 - true if the database is synced, false if not
  reserve_proofs_database_26 - true if the database is synced, false if not
  reserve_proofs_database_27 - true if the database is synced, false if not
  reserve_proofs_database_28 - true if the database is synced, false if not
  reserve_proofs_database_29 - true if the database is synced, false if not
  reserve_proofs_database_30 - true if the database is synced, false if not
  reserve_proofs_database_31 - true if the database is synced, false if not
  reserve_proofs_database_32 - true if the database is synced, false if not
  reserve_proofs_database_33 - true if the database is synced, false if not
  reserve_proofs_database_34 - true if the database is synced, false if not
  reserve_proofs_database_35 - true if the database is synced, false if not
  reserve_proofs_database_36 - true if the database is synced, false if not
  reserve_proofs_database_37 - true if the database is synced, false if not
  reserve_proofs_database_38 - true if the database is synced, false if not
  reserve_proofs_database_39 - true if the database is synced, false if not
  reserve_proofs_database_40 - true if the database is synced, false if not
  reserve_proofs_database_41 - true if the database is synced, false if not
  reserve_proofs_database_42 - true if the database is synced, false if not
  reserve_proofs_database_43 - true if the database is synced, false if not
  reserve_proofs_database_44 - true if the database is synced, false if not
  reserve_proofs_database_45 - true if the database is synced, false if not
  reserve_proofs_database_46 - true if the database is synced, false if not
  reserve_proofs_database_47 - true if the database is synced, false if not
  reserve_proofs_database_48 - true if the database is synced, false if not
  reserve_proofs_database_49 - true if the database is synced, false if not
  reserve_proofs_database_50 - true if the database is synced, false if not
  public_address - The public address of the node that is sending the data.
  previous_block_hash - The previous block hash.
  current_round_part - The current round part (always 1)
  current_round_part_backup_node - The current main node in the current round part (0-2)
  data - A random 100 character string. This is the data that the XCASH_DPOPS_signature is used for. The random data  will create a different XCASH_DPOPS_signature for every message, even if the message data is the same.
  XCASH_DPOPS_signature - The XCASH_DPOPS_signature of the data, used for verifying that the sender of the message is the sender.
  */
  #define BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_RESERVE_PROOFS_DATABASE_SYNC_CHECK_ALL_DOWNLOAD "{\r\n \"message_settings\": \"BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_RESERVE_PROOFS_DATABASE_SYNC_CHECK_ALL_DOWNLOAD\",\r\n \"reserve_proofs_database\": \"true\",\r\n \"reserve_proofs_database_1\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_2\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_3\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_4\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_5\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_6\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_7\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_8\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_9\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_10\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_11\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_12\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_13\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_14\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_15\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_16\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_17\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_18\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_19\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_20\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_21\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_22\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_23\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_24\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_25\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_26\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_27\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_28\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_29\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_30\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_31\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_32\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_33\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_34\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_35\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_36\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_37\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_38\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_39\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_40\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_41\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_42\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_43\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_44\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_45\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_46\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_47\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_48\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_49\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"reserve_proofs_database_50\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"public_address\": \"" TEST_WALLET "\",\r\n \"previous_block_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\",\r\n \"current_round_part\": \"1\",\r\n \"current_round_part_backup_node\": \"0\",\r\n \"data\": \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"XCASH_DPOPS_signature\": \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n}"
 
 

/*
  The purpose of this message is for a block verifiers to download the up to date reserve proofs database
 
  message_settings - The type of the message
  file - The file number
  public_address - The public address of the node that is sending the data.
  previous_block_hash - The previous block hash.
  current_round_part - The current round part (always 1)
  current_round_part_backup_node - The current main node in the current round part (0-2)
  data - A random 100 character string. This is the data that the XCASH_DPOPS_signature is used for. The random data  will create a different XCASH_DPOPS_signature for every message, even if the message data is the same.
  XCASH_DPOPS_signature - The XCASH_DPOPS_signature of the data, used for verifying that the sender of the message is the sender.
  */
  #define BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_RESERVE_PROOFS_DATABASE_DOWNLOAD_FILE_UPDATE "{\r\n \"message_settings\": \"BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_RESERVE_PROOFS_DATABASE_DOWNLOAD_FILE_UPDATE\",\r\n \"file\": \"reserve_proofs_1\",\r\n \"public_address\": \"" TEST_WALLET "\",\r\n \"previous_block_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\",\r\n \"current_round_part\": \"1\",\r\n \"current_round_part_backup_node\": \"0\",\r\n \"data\": \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"XCASH_DPOPS_signature\": \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n}"
 
 
 
/*
  The purpose of this message is for the block verifiers to send a block verifier the up to date reserve proofs database

  since this message could be up to 50MB in size, it is prefixed with
  MESSAGE_SETTINGS|RANDOM_DATA|PUBLIC_KEY|PROOF|BETA|

  The reason for the prefix, is to confirm that a current top 100 delegate is sending
 
  message_settings - The type of the message
  reserve_proofs_database - The database data (contains empty_database_collection if the database is empty)
  public_address - The public address of the node that is sending the data.
  previous_block_hash - The previous block hash.
  current_round_part - The current round part (always 1)
  current_round_part_backup_node - The current main node in the current round part (0-2)
  data - A random 100 character string. This is the data that the XCASH_DPOPS_signature is used for. The random data  will create a different XCASH_DPOPS_signature for every message, even if the message data is the same.
  XCASH_DPOPS_signature - The XCASH_DPOPS_signature of the data, used for verifying that the sender of the message is the sender.
  */
  #define BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_RESERVE_PROOFS_DATABASE_DOWNLOAD_FILE_DOWNLOAD "{\r\n \"message_settings\": \"BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_RESERVE_PROOFS_DATABASE_DOWNLOAD_FILE_DOWNLOAD\",\r\n \"reserve_proofs_database\": \"true\",\r\n \"public_address\": \"" TEST_WALLET "\",\r\n \"previous_block_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\",\r\n \"current_round_part\": \"1\",\r\n \"current_round_part_backup_node\": \"0\",\r\n \"data\": \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"XCASH_DPOPS_signature\": \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n}"
 
  
 
/*
  The purpose of this message is for a block verifiers to check if they are synced up to the delegates decentralized database
 
  message_settings - The type of the message
  data_hash - The data hash of the file
  public_address - The public address of the node that is sending the data.
  previous_block_hash - The previous block hash.
  current_round_part - The current round part (always 1)
  current_round_part_backup_node - The current main node in the current round part (0-2)
  data - A random 100 character string. This is the data that the XCASH_DPOPS_signature is used for. The random data  will create a different XCASH_DPOPS_signature for every message, even if the message data is the same.
  XCASH_DPOPS_signature - The XCASH_DPOPS_signature of the data, used for verifying that the sender of the message is the sender.
  */
  #define BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_DELEGATES_DATABASE_SYNC_CHECK_UPDATE "{\r\n \"message_settings\": \"BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_DELEGATES_DATABASE_SYNC_CHECK_UPDATE\",\r\n \"data_hash\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"public_address\": \"" TEST_WALLET "\",\r\n \"previous_block_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\",\r\n \"current_round_part\": \"1\",\r\n \"current_round_part_backup_node\": \"0\",\r\n \"data\": \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"XCASH_DPOPS_signature\": \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n}"
 
 
 
/*
  The purpose of this message is for the block verifiers to send a block verifier a message if their delegates database is up to date
 
  message_settings - The type of the message
  delegates_database - True if the database file is synced, false if not
  public_address - The public address of the node that is sending the data.
  previous_block_hash - The previous block hash.
  current_round_part - The current round part (always 1)
  current_round_part_backup_node - The current main node in the current round part (0-2)
  data - A random 100 character string. This is the data that the XCASH_DPOPS_signature is used for. The random data  will create a different XCASH_DPOPS_signature for every message, even if the message data is the same.
  XCASH_DPOPS_signature - The XCASH_DPOPS_signature of the data, used for verifying that the sender of the message is the sender.
  */
  #define BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_DELEGATES_DATABASE_SYNC_CHECK_DOWNLOAD "{\r\n \"message_settings\": \"BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_DELEGATES_DATABASE_SYNC_CHECK_DOWNLOAD\",\r\n \"delegates_database\": \"true\",\r\n \"public_address\": \"" TEST_WALLET "\",\r\n \"previous_block_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\",\r\n \"current_round_part\": \"1\",\r\n \"current_round_part_backup_node\": \"0\",\r\n \"data\": \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"XCASH_DPOPS_signature\": \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n}"
 
 
 
/*
  The purpose of this message is for a block verifiers to download the up to date delegates database
 
  message_settings - The type of the message
  public_address - The public address of the node that is sending the data.
  previous_block_hash - The previous block hash.
  current_round_part - The current round part (always 1)
  current_round_part_backup_node - The current main node in the current round part (0-2)
  data - A random 100 character string. This is the data that the XCASH_DPOPS_signature is used for. The random data  will create a different XCASH_DPOPS_signature for every message, even if the message data is the same.
  XCASH_DPOPS_signature - The XCASH_DPOPS_signature of the data, used for verifying that the sender of the message is the sender.
  */
  #define BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_DELEGATES_DATABASE_DOWNLOAD_FILE_UPDATE "{\r\n \"message_settings\": \"BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_DELEGATES_DATABASE_DOWNLOAD_FILE_UPDATE\",\r\n \"public_address\": \"" TEST_WALLET "\",\r\n \"previous_block_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\",\r\n \"current_round_part\": \"1\",\r\n \"current_round_part_backup_node\": \"0\",\r\n \"data\": \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"XCASH_DPOPS_signature\": \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n}"
 
 
 
/*
  The purpose of this message is for the block verifiers to send a block verifier the up to date delegates database
 
  message_settings - The type of the message
  delegates_database - The database data (contains empty_database_collection if the database is empty)
  public_address - The public address of the node that is sending the data.
  previous_block_hash - The previous block hash.
  current_round_part - The current round part (always 1)
  current_round_part_backup_node - The current main node in the current round part (0-2)
  data - A random 100 character string. This is the data that the XCASH_DPOPS_signature is used for. The random data  will create a different XCASH_DPOPS_signature for every message, even if the message data is the same.
  XCASH_DPOPS_signature - The XCASH_DPOPS_signature of the data, used for verifying that the sender of the message is the sender.
  */
  #define BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_DELEGATES_DATABASE_DOWNLOAD_FILE_DOWNLOAD "{\r\n \"message_settings\": \"BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_DELEGATES_DATABASE_DOWNLOAD_FILE_DOWNLOAD\",\r\n \"delegates_database\": \"true\",\r\n \"public_address\": \"" TEST_WALLET "\",\r\n \"previous_block_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\",\r\n \"current_round_part\": \"1\",\r\n \"current_round_part_backup_node\": \"0\",\r\n \"data\": \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"XCASH_DPOPS_signature\": \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n}"



/*
  The purpose of this message is for a block verifiers to check if they are synced up to the statistics decentralized database
 
  message_settings - The type of the message
  data_hash - The data hash of the file
  public_address - The public address of the node that is sending the data.
  previous_block_hash - The previous block hash.
  current_round_part - The current round part (always 1)
  current_round_part_backup_node - The current main node in the current round part (0-2)
  data - A random 100 character string. This is the data that the XCASH_DPOPS_signature is used for. The random data  will create a different XCASH_DPOPS_signature for every message, even if the message data is the same.
  XCASH_DPOPS_signature - The XCASH_DPOPS_signature of the data, used for verifying that the sender of the message is the sender.
  */
  #define BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_STATISTICS_DATABASE_SYNC_CHECK_UPDATE "{\r\n \"message_settings\": \"BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_STATISTICS_DATABASE_SYNC_CHECK_UPDATE\",\r\n \"data_hash\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"public_address\": \"" TEST_WALLET "\",\r\n \"previous_block_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\",\r\n \"current_round_part\": \"1\",\r\n \"current_round_part_backup_node\": \"0\",\r\n \"data\": \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"XCASH_DPOPS_signature\": \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n}"
 
 
 
/*
  The purpose of this message is for the block verifiers to send a block verifier a message if their statistics database is up to date
 
  message_settings - The type of the message
  statistics_database - True if the database file is synced, false if not
  public_address - The public address of the node that is sending the data.
  previous_block_hash - The previous block hash.
  current_round_part - The current round part (always 1)
  current_round_part_backup_node - The current main node in the current round part (0-2)
  data - A random 100 character string. This is the data that the XCASH_DPOPS_signature is used for. The random data  will create a different XCASH_DPOPS_signature for every message, even if the message data is the same.
  XCASH_DPOPS_signature - The XCASH_DPOPS_signature of the data, used for verifying that the sender of the message is the sender.
  */
  #define BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_STATISTICS_DATABASE_SYNC_CHECK_DOWNLOAD "{\r\n \"message_settings\": \"BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_STATISTICS_DATABASE_SYNC_CHECK_DOWNLOAD\",\r\n \"statistics_database\": \"true\",\r\n \"public_address\": \"" TEST_WALLET "\",\r\n \"previous_block_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\",\r\n \"current_round_part\": \"1\",\r\n \"current_round_part_backup_node\": \"0\",\r\n \"data\": \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"XCASH_DPOPS_signature\": \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n}"
 
 
 
/*
  The purpose of this message is for a block verifiers to download the up to date statistics database
 
  message_settings - The type of the message
  public_address - The public address of the node that is sending the data.
  previous_block_hash - The previous block hash.
  current_round_part - The current round part (always 1)
  current_round_part_backup_node - The current main node in the current round part (0-2)
  data - A random 100 character string. This is the data that the XCASH_DPOPS_signature is used for. The random data  will create a different XCASH_DPOPS_signature for every message, even if the message data is the same.
  XCASH_DPOPS_signature - The XCASH_DPOPS_signature of the data, used for verifying that the sender of the message is the sender.
  */
  #define BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_STATISTICS_DATABASE_DOWNLOAD_FILE_UPDATE "{\r\n \"message_settings\": \"BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_STATISTICS_DATABASE_DOWNLOAD_FILE_UPDATE\",\r\n \"public_address\": \"" TEST_WALLET "\",\r\n \"previous_block_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\",\r\n \"current_round_part\": \"1\",\r\n \"current_round_part_backup_node\": \"0\",\r\n \"data\": \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"XCASH_DPOPS_signature\": \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n}"
 
 
 
/*
  The purpose of this message is for the block verifiers to send a block verifier the up to date statistics database
 
  message_settings - The type of the message
  statistics_database - The database data (contains empty_database_collection if the database is empty)
  public_address - The public address of the node that is sending the data.
  previous_block_hash - The previous block hash.
  current_round_part - The current round part (always 1)
  current_round_part_backup_node - The current main node in the current round part (0-2)
  data - A random 100 character string. This is the data that the XCASH_DPOPS_signature is used for. The random data  will create a different XCASH_DPOPS_signature for every message, even if the message data is the same.
  XCASH_DPOPS_signature - The XCASH_DPOPS_signature of the data, used for verifying that the sender of the message is the sender.
  */
  #define BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_STATISTICS_DATABASE_DOWNLOAD_FILE_DOWNLOAD "{\r\n \"message_settings\": \"BLOCK_VERIFIERS_TO_BLOCK_VERIFIERS_STATISTICS_DATABASE_DOWNLOAD_FILE_DOWNLOAD\",\r\n \"statistics_database\": \"true\",\r\n \"public_address\": \"" TEST_WALLET "\",\r\n \"previous_block_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\",\r\n \"current_round_part\": \"1\",\r\n \"current_round_part_backup_node\": \"0\",\r\n \"data\": \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n \"XCASH_DPOPS_signature\": \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n}"
 

#endif
