#!/bin/bash

# Adjust this variable to the name of your xcash-daemon unit file name
XCASH_DAEMON_SRV=xcash-daemon

# Adjust this variable to the name of your xcash-wallets unit file name
XCASH_WALLET_SRV=xcash-rpc-wallet

# Adjust this variable to the name of your xcash-dpops unit file name
XCASH_DPOPS_SRV=xcash-dpops

# Adjust this variable to the name of your mongodb unit file name
MONGODB_SRV=mongodb

XCASH_DAEMON_LOG_FILE=~/xcash-official/logs/xcash-daemon-log.txt
XCASH_WALLET_LOG_FILE=~/xcash-official/logs/xcash-wallet-rpc.log
### CUSTOM VARIABLES ###

DAEMON_URL="http://127.0.0.1:18281/json_rpc"
WALLET_URL="http://127.0.0.1:18285/json_rpc"
DPOPS_QUERY=('curl -s -H "Content-Type: application/json" -X GET http://127.0.0.1:18283')
CURL=('curl -w "\n" -s -H "Content-Type: application/json" -X')

SEED_NODE1_URL="http://us1.xcash.foundation:18281/json_rpc"
SEED_NODE2_URL="http://oceania1.xcash.foundation:18281/json_rpc"
SEED_NODE3_URL="http://europe1.xcash.foundation:18281/json_rpc"
SEED_NODE4_URL="http://europe2.xcash.foundation:18281/json_rpc"
SEED_NODE5_URL="http://europe3.xcash.foundation:18281/json_rpc"

declare -ir TOTAL_DELEGATES=50
declare -ir ATOMIC_DIVISOR=1000000

# Color print variables
COLOR_PRINT_RED="\033[1;31m"
COLOR_PRINT_GREEN="\033[1;32m"
END_COLOR_PRINT="\033[0m"

PS3='
Please enter an option: '

options=(
	"Check blockchain height"
	"Get node statistics"
	"Get node balance"
	"Check services status"
	"Start stopped services"
  "Stop all services"
	"Restart all services"
  "Enable services autostart"
  "Disable services autostart"
  "Get X-Cash DPoPS log"
  "Get X-Cash Daemon log"
  "Get X-Cash RPC Wallet log"
  "Check X-Cash DPoPS log for malfunctioning block verifiers"
  "Check X-Cash DPoPS log for shared delegate errors"
	"Check if repositories are up to date"
  "Quit"
)

function check_height(){
	if lsof -Pi :18281 -sTCP:LISTEN -t >/dev/null ; then
	        DATA=$($CURL GET $DAEMON_URL -d '{"jsonrpc":"2.0","id":"0","method":"get_block_count"}')

		SEED_NODE1_DATA=$($CURL GET $SEED_NODE1_URL -d '{"jsonrpc":"2.0","id":"0","method":"get_block_count"}')
		SEED_NODE1_HEIGHT=$(($(echo "$SEED_NODE1_DATA" | grep '"count"' | awk '{print $2}' | sed s'|,||g' | tr -d $'\r') + 0))

		SEED_NODE2_DATA=$($CURL GET $SEED_NODE2_URL -d '{"jsonrpc":"2.0","id":"0","method":"get_block_count"}')
		SEED_NODE2_HEIGHT=$(($(echo "$SEED_NODE2_DATA" | grep '"count"' | awk '{print $2}' | sed s'|,||g' | tr -d $'\r') + 0))

		SEED_NODE3_DATA=$($CURL GET $SEED_NODE3_URL -d '{"jsonrpc":"2.0","id":"0","method":"get_block_count"}')
		SEED_NODE3_HEIGHT=$(($(echo "$SEED_NODE3_DATA" | grep '"count"' | awk '{print $2}' | sed s'|,||g' | tr -d $'\r') + 0))

		SEED_NODE4_DATA=$($CURL GET $SEED_NODE4_URL -d '{"jsonrpc":"2.0","id":"0","method":"get_block_count"}')
		SEED_NODE4_HEIGHT=$(($(echo "$SEED_NODE4_DATA" | grep '"count"' | awk '{print $2}' | sed s'|,||g' | tr -d $'\r') + 0))

		SEED_NODE5_DATA=$($CURL GET $SEED_NODE5_URL -d '{"jsonrpc":"2.0","id":"0","method":"get_block_count"}')
		SEED_NODE5_HEIGHT=$(($(echo "$SEED_NODE5_DATA" | grep '"count"' | awk '{print $2}' | sed s'|,||g' | tr -d $'\r') + 0))

		HEIGHT=$(echo "$DATA" | grep '"count"' | awk '{print $2}' | sed s'|,||g' | tr -d $'\r')
		STATUS_COUNT=0

		if (( HEIGHT >= SEED_NODE1_HEIGHT && SEED_NODE1_HEIGHT != 0 )); then
			(( STATUS_COUNT++ ))
		fi

                if (( HEIGHT >= SEED_NODE2_HEIGHT && SEED_NODE2_HEIGHT != 0 )); then
                        (( STATUS_COUNT++ ))
                fi

                if (( HEIGHT >= SEED_NODE3_HEIGHT && SEED_NODE3_HEIGHT != 0 )); then
                        (( STATUS_COUNT++ ))
                fi

                if (( HEIGHT >= SEED_NODE4_HEIGHT && SEED_NODE4_HEIGHT != 0 )); then
                        (( STATUS_COUNT++ ))
                fi

                if (( HEIGHT >= SEED_NODE5_HEIGHT && SEED_NODE5_HEIGHT != 0 )); then
                        (( STATUS_COUNT++ ))
                fi

		echo
		if (( STATUS_COUNT >= 3 )); then
			echo -e "Blockhain sync status: ${COLOR_PRINT_GREEN}OK${END_COLOR_PRINT}"
		else
			echo -e "Blockhain sync status: ${COLOR_PRINT_RED}FAIL${END_COLOR_PRINT}"
		fi
		echo "Blockchain height: $HEIGHT"
	else
		echo
		echo "X-Cash Daemon service is not running...."
		echo "Check the $XCASH_DAEMON_SRV service status"
	fi
}

function get_node_balance(){
	if lsof -Pi :18285 -sTCP:LISTEN -t >/dev/null ; then
		DATA=$($CURL GET $WALLET_URL -d '{"jsonrpc":"2.0","id":"0","method":"get_balance","params":{"account_index":0,"address_indices":[0]}}')

		ADDR=$(echo "$DATA" | grep '"address"' | awk '{print $2}' | sed s'|"||g' | sed s'|,||g' | head -1 | tr -d $'\r')
		UNSPENT_OUTPUTS=$(echo "$DATA" | grep '"num_unspent_outputs"' | awk '{print $2}' | sed s'|"||g' | sed s'|,||g' | head -1 | tr -d $'\r')

		ATOMIC_TOTAL_BALANCE=$(echo "$DATA" | grep '"balance"' | awk '{print $2}' | sed s'|,||g' | head -1 | tr -d $'\r')
		ATOMIC_UNLOCKED_BALANCE=$(echo "$DATA" | grep '"unlocked_balance"' | awk '{print $2}' | sed s'|,||g' | head -1 | sed s"|^M||g" | tr -d $'\r')
		TOTAL_BALANCE=$((ATOMIC_TOTAL_BALANCE/ATOMIC_DIVISOR))
		UNLOCKED_BALANCE=$((ATOMIC_UNLOCKED_BALANCE/ATOMIC_DIVISOR))

		echo
		echo "Public address:   $ADDR"
		echo "Unspent outputs:  $UNSPENT_OUTPUTS"
		echo "Total balance:    $TOTAL_BALANCE XCASH"
		echo "Unlocked balance: $UNLOCKED_BALANCE XCASH"
	else
		echo
		echo "X-Cash RCP Wallet service is not running...."
		echo "Check the $XCASH_WALLET_SRV service status"
	fi
}

function shared_delegates_website_statistics(){
    if lsof -Pi :18283 -sTCP:LISTEN -t >/dev/null ; then
        DATA=$($DPOPS_QUERY/shareddelegateswebsitegetstatistics | python3 -m json.tool)
        RANK=$(echo "$DATA" | grep '"current_delegate_rank"' | awk '{print $2}' | sed s'|,||g' | sed s'|"||g' | tr -d $'\r')
        TOTAL_VOTES=$(($(echo "$DATA" | grep '"total_votes"' | awk '{print $2}' | sed s'|,||g' | sed s'|"||g' | tr -d $'\r')/ATOMIC_DIVISOR))
        ONLINE_PCT=$(echo "$DATA" | grep '"online_percentage"' | awk '{print $2}' | sed s'|,||g' | sed s'|"||g' | tr -d $'\r')
        ROUNDS=$(echo "$DATA" | grep '"block_verifier_total_rounds"' | awk '{print $2}' | sed s'|,||g' | sed s'|"||g' | tr -d $'\r')
        BLOCKS_FOUND=$(echo "$DATA" | grep '"total_blocks_found"' | awk '{print $2}' | sed s'|,||g' | sed s'|"||g' | tr -d $'\r')
        XCASH_FOUND=$(($(echo "$DATA" | grep '"total_xcash_from_blocks_found"' | awk '{print $2}' | sed s'|,||g' | sed s'|"||g' | tr -d $'\r')/ATOMIC_DIVISOR))
        TOTAL_PAYMENTS=$(echo "$DATA" | grep '"total_payments"' | awk '{print $2}' | sed s'|,||g' | sed s'|"||g' | tr -d $'\r')
        VOTERS=$(echo "$DATA" | grep '"total_voters"' | awk '{print $2}' | sed s'|,||g' | sed s'|"||g' | tr -d $'\r')
        FEE=$(echo "$DATA" | grep '"fee"' | awk '{print $2}' | sed s'|,||g' | sed s'|"||g' | tr -d $'\r')
        MIN_AMOUNT=$(echo "$DATA" | grep '"minimum_amount"' | awk '{print $2}' | sed s'|,||g' | sed s'|"||g' | tr -d $'\r')


        echo
        echo "######### DELEGATE STATUS #########"
        if (( RANK <= TOTAL_DELEGATES )); then
            echo -e "Rank....................${COLOR_PRINT_GREEN}$RANK${END_COLOR_PRINT}"
        else
            echo -e "Rank....................${COLOR_PRINT_RED}$RANK${END_COLOR_PRINT}"
        fi
        echo "Total Votes.............$TOTAL_VOTES XCASH"
        echo "Online Percentage.......$ONLINE_PCT %"
        echo "Total Rounds............$ROUNDS"
        echo "Blocks Found............$BLOCKS_FOUND"
        echo "X-Cash Found............$XCASH_FOUND XCASH"
        echo "Total Payments..........$TOTAL_PAYMENTS"
        echo "Total Voters............$VOTERS"
        echo "Fee.....................$FEE %"
        echo "Minimum Amount..........$MIN_AMOUNT XCASH"

    else
        echo
        echo "X-Cash DPoPS service is not running...."
        echo "Check the $XCASH_DPOPS_SRV service status"
    fi

}

function check_services_status(){
	echo
    MONGODB_UP_SINCE=$(systemctl show $MONGODB_SRV --property=ActiveEnterTimestamp | sed s"|ActiveEnterTimestamp=||g")
    XCASH_DAEMON_UP_SINCE=$(systemctl show $XCASH_DAEMON_SRV --property=ActiveEnterTimestamp | sed s"|ActiveEnterTimestamp=||g")
    XCASH_WALLET_UP_SINCE=$(systemctl show $XCASH_WALLET_SRV --property=ActiveEnterTimestamp | sed s"|ActiveEnterTimestamp=||g")
    XCASH_DPOPS_UP_SINCE=$(systemctl show $XCASH_DPOPS_SRV --property=ActiveEnterTimestamp | sed s"|ActiveEnterTimestamp=||g")

    systemctl is-active $MONGODB_SRV --quiet \
		&& echo -e "${COLOR_PRINT_GREEN}"\\u2714 MongoDB service is running since..............."$MONGODB_UP_SINCE""${END_COLOR_PRINT}" \
		|| echo -e "${COLOR_PRINT_RED}"\\u2716 MongoDB service is not running"${END_COLOR_PRINT}"

	systemctl is-active $XCASH_DAEMON_SRV --quiet \
		&& echo -e "${COLOR_PRINT_GREEN}"\\u2714 X-Cash Daemon service is running since........."$XCASH_DAEMON_UP_SINCE""${END_COLOR_PRINT}" \
		|| echo -e "${COLOR_PRINT_RED}"\\u2716 X-Cash Daemon service is not running"${END_COLOR_PRINT}"

	systemctl is-active $XCASH_WALLET_SRV --quiet \
		&& echo -e "${COLOR_PRINT_GREEN}"\\u2714 X-Cash RPC Wallet service is running since....."$XCASH_WALLET_UP_SINCE""${END_COLOR_PRINT}" \
		|| echo -e "${COLOR_PRINT_RED}"\\u2716 X-Cash RPC Wallet service is not running"${END_COLOR_PRINT}"

	systemctl is-active $XCASH_DPOPS_SRV --quiet \
		&& echo -e "${COLOR_PRINT_GREEN}"\\u2714 X-Cash DPoPS service is running since.........."$XCASH_DPOPS_UP_SINCE""${END_COLOR_PRINT}" \
		|| echo -e "${COLOR_PRINT_RED}"\\u2716 X-Cash DPoPS service is not running"${END_COLOR_PRINT}"
}

function start_stopped_services(){

	echo

	if (systemctl is-active $MONGODB_SRV --quiet); then
		MONGODB_UP_SINCE=$(systemctl show $MONGODB_SRV --property=ActiveEnterTimestamp | sed s"|ActiveEnterTimestamp=||g")
		echo -e "${COLOR_PRINT_GREEN}"\\u2714 MongoDB service is running since..............."$MONGODB_UP_SINCE""${END_COLOR_PRINT}"
	else
		echo -en "${COLOR_PRINT_RED}"\\u2716 MongoDB service is not running, starting it............."${END_COLOR_PRINT}"
		systemctl start $MONGODB_SRV && sleep 3
		systemctl is-active $MONGODB_SRV --quiet \
		&& echo -e "${COLOR_PRINT_GREEN}"\\u2714"${END_COLOR_PRINT}" || echo -e "${COLOR_PRINT_RED}"\\u2716"${END_COLOR_PRINT}"
	fi

    if (systemctl is-active $XCASH_DAEMON_SRV --quiet); then
        XCASH_DAEMON_UP_SINCE=$(systemctl show $XCASH_DAEMON_SRV --property=ActiveEnterTimestamp | sed s"|ActiveEnterTimestamp=||g")
        echo -e "${COLOR_PRINT_GREEN}"\\u2714 X-Cash Daemon service is running since........."$XCASH_DAEMON_UP_SINCE""${END_COLOR_PRINT}"
    else
        echo -en "${COLOR_PRINT_RED}"\\u2716 X-Cash Daemon service is not running, starting it......."${END_COLOR_PRINT}"
        systemctl start $XCASH_DAEMON_SRV && sleep 3
        systemctl is-active $XCASH_DAEMON_SRV --quiet \
		&& echo -e "${COLOR_PRINT_GREEN}"\\u2714"${END_COLOR_PRINT}" || echo -e "${COLOR_PRINT_RED}"\\u2716"${END_COLOR_PRINT}"
    fi

    if (systemctl is-active $XCASH_WALLET_SRV --quiet); then
        XCASH_WALLET_UP_SINCE=$(systemctl show $XCASH_WALLET_SRV --property=ActiveEnterTimestamp | sed s"|ActiveEnterTimestamp=||g")
        echo -e "${COLOR_PRINT_GREEN}"\\u2714 X-Cash RPC Wallet service is running since....."$XCASH_WALLET_UP_SINCE""${END_COLOR_PRINT}"
    else
        echo -en "${COLOR_PRINT_RED}"\\u2716 X-Cash RPC Wallet service is not running, starting it..."${END_COLOR_PRINT}" \
        && systemctl start $XCASH_WALLET_SRV && sleep 3 \
        && systemctl is-active $XCASH_WALLET_SRV --quiet \
		&& echo -e "${COLOR_PRINT_GREEN}"\\u2714"${END_COLOR_PRINT}" || echo -e "${COLOR_PRINT_RED}"\\u2716"${END_COLOR_PRINT}"
    fi

    if (systemctl is-active $XCASH_DPOPS_SRV --quiet); then
        XCASH_DPOPS_UP_SINCE=$(systemctl show $XCASH_DPOPS_SRV --property=ActiveEnterTimestamp | sed s"|ActiveEnterTimestamp=||g")
        echo -e "${COLOR_PRINT_GREEN}"\\u2714 X-Cash DPoPS service is running since.........."$XCASH_DPOPS_UP_SINCE""${END_COLOR_PRINT}"
    else
        echo -en "${COLOR_PRINT_RED}"\\u2716 X-Cash DPoPS service is not running, starting it........"${END_COLOR_PRINT}"
        systemctl start $XCASH_DPOPS_SRV && sleep 3
        systemctl is-active $XCASH_DPOPS_SRV --quiet \
		&& echo -e "${COLOR_PRINT_GREEN}"\\u2714"${END_COLOR_PRINT}" || echo -e "${COLOR_PRINT_RED}"\\u2716"${END_COLOR_PRINT}"
    fi

}

function stop_all_services(){
	echo
    echo -en "${COLOR_PRINT_GREEN}"Stopping X-Cash DPoPS service..............................................."${END_COLOR_PRINT}" \
        && systemctl stop $XCASH_DPOPS_SRV && systemctl is-active $XCASH_DPOPS_SRV --quiet && echo -e "${COLOR_PRINT_RED}"\\u2716"${END_COLOR_PRINT}" || echo -e "${COLOR_PRINT_GREEN}"\\u2714"${END_COLOR_PRINT}"
    echo -en "${COLOR_PRINT_GREEN}"Stopping MongoDB service...................................................."${END_COLOR_PRINT}" \
        && systemctl stop $MONGODB_SRV && systemctl is-active $MONGODB_SRV --quiet && echo -e "${COLOR_PRINT_RED}"\\u2716"${END_COLOR_PRINT}" || echo -e "${COLOR_PRINT_GREEN}"\\u2714"${END_COLOR_PRINT}"
    echo -en "${COLOR_PRINT_GREEN}"Stopping X-Cash RPC Wallet service.........................................."${END_COLOR_PRINT}" \
        && systemctl stop $XCASH_WALLET_SRV && systemctl is-active $XCASH_WALLET_SRV --quiet && echo -e "${COLOR_PRINT_RED}"\\u2716"${END_COLOR_PRINT}" || echo -e "${COLOR_PRINT_GREEN}"\\u2714"${END_COLOR_PRINT}"
    echo -en "${COLOR_PRINT_GREEN}"Stopping X-Cash Daemon service.............................................."${END_COLOR_PRINT}" \
        && systemctl stop $XCASH_DAEMON_SRV && systemctl is-active $XCASH_DAEMON_SRV --quiet && echo -e "${COLOR_PRINT_RED}"\\u2716"${END_COLOR_PRINT}" || echo -e "${COLOR_PRINT_GREEN}"\\u2714"${END_COLOR_PRINT}"
}

function restart_all_services(){
	echo
	echo -en "${COLOR_PRINT_GREEN}"Stopping X-Cash DPoPS service..............................................."${END_COLOR_PRINT}" \
		&& systemctl stop $XCASH_DPOPS_SRV && systemctl is-active $XCASH_DPOPS_SRV --quiet && echo -e "${COLOR_PRINT_RED}"\\u2716"${END_COLOR_PRINT}" || echo -e "${COLOR_PRINT_GREEN}"\\u2714"${END_COLOR_PRINT}"
    echo -en "${COLOR_PRINT_GREEN}"Stopping MongoDB service...................................................."${END_COLOR_PRINT}" \
		&& systemctl stop $MONGODB_SRV && systemctl is-active $MONGODB_SRV --quiet && echo -e "${COLOR_PRINT_RED}"\\u2716"${END_COLOR_PRINT}" || echo -e "${COLOR_PRINT_GREEN}"\\u2714"${END_COLOR_PRINT}"
    echo -en "${COLOR_PRINT_GREEN}"Stopping X-Cash RPC Wallet service.........................................."${END_COLOR_PRINT}" \
		&& systemctl stop $XCASH_WALLET_SRV && systemctl is-active $XCASH_WALLET_SRV --quiet && echo -e "${COLOR_PRINT_RED}"\\u2716"${END_COLOR_PRINT}" || echo -e "${COLOR_PRINT_GREEN}"\\u2714"${END_COLOR_PRINT}"
    echo -en "${COLOR_PRINT_GREEN}"Stopping X-Cash Daemon service.............................................."${END_COLOR_PRINT}" \
		&& systemctl stop $XCASH_DAEMON_SRV && systemctl is-active $XCASH_DAEMON_SRV --quiet && echo -e "${COLOR_PRINT_RED}"\\u2716"${END_COLOR_PRINT}" || echo -e "${COLOR_PRINT_GREEN}"\\u2714"${END_COLOR_PRINT}"
	echo -en "${COLOR_PRINT_GREEN}"Starting X-Cash Daemon service.............................................."${END_COLOR_PRINT}" \
		&& sleep 3 && systemctl start $XCASH_DAEMON_SRV && sleep 5 && systemctl is-active $XCASH_DAEMON_SRV --quiet && echo -e "${COLOR_PRINT_GREEN}"\\u2714"${END_COLOR_PRINT}" || echo -e "${COLOR_PRINT_RED}"\\u2716"${END_COLOR_PRINT}"
    echo -en "${COLOR_PRINT_GREEN}"Starting X-Cash Wallet service.............................................."${END_COLOR_PRINT}" \
		&& sleep 3 && systemctl start $XCASH_WALLET_SRV && sleep 5 && systemctl is-active $XCASH_WALLET_SRV --quiet && echo -e "${COLOR_PRINT_GREEN}"\\u2714"${END_COLOR_PRINT}" || echo -e "${COLOR_PRINT_RED}"\\u2716"${END_COLOR_PRINT}"
    echo -en "${COLOR_PRINT_GREEN}"Starting MongoDB service...................................................."${END_COLOR_PRINT}" \
		&& sleep 3 && systemctl start $MONGODB_SRV && sleep 3 &&  systemctl is-active $MONGODB_SRV --quiet && echo -e "${COLOR_PRINT_GREEN}"\\u2714"${END_COLOR_PRINT}" || echo -e "${COLOR_PRINT_RED}"\\u2716"${END_COLOR_PRINT}"
    echo -en "${COLOR_PRINT_GREEN}"Starting X-Cash DPoPS service..............................................."${END_COLOR_PRINT}" \
		&& sleep 3 && systemctl start $XCASH_DPOPS_SRV && systemctl is-active $XCASH_DPOPS_SRV --quiet && echo -e "${COLOR_PRINT_GREEN}"\\u2714"${END_COLOR_PRINT}" || echo -e "${COLOR_PRINT_RED}"\\u2716"${END_COLOR_PRINT}"

	check_services_status
}

function get_xcash_dpops_log(){
	# Read the log starting from end of file
	journalctl --unit=xcash-dpops --output cat | less -R +G
}

function check_xcash_dpops_log_for_malfunctioning_block_verifiers(){
        # check for the past week (288*110*7)
        echo "Checking for the past week for any malfunctioning block verifiers"
	journalctl --unit=xcash-dpops -n 221760 --output cat | less -R +G | grep "does not have a majority data. This block verifier is not working correctly"
}

function check_xcash_dpops_log_for_shared_delegate_errors(){
        # check for the past week (288*110*7)
        echo "Checking for the past week for any shared delegate errors"
	journalctl --unit=xcash-dpops -n 221760 --output cat | less -R +G | grep -A 3 "Failed to send a transaction list"
        journalctl --unit=xcash-dpops -n 221760 --output cat | less -R +G | grep -A 11 "Failed to update the database for a delegate"
}

function get_xcash_daemon_log(){
	# Read the log starting from end of file
	less -R +G $XCASH_DAEMON_LOG_FILE
}

function get_xcash_wallet_log(){
	# Read the log starting from end of file
    	less -R +G $XCASH_WALLET_LOG_FILE
}

function enable_services_autostart(){
    echo
    echo -e "${COLOR_PRINT_GREEN}Enabling services autostart...${END_COLOR_PRINT}"
    systemctl enable ${MONGODB_SRV}.service ${XCASH_DAEMON_SRV}.service ${XCASH_WALLET_SRV}.timer ${XCASH_DPOPS_SRV}.timer
    systemctl disable ${XCASH_WALLET_SRV}.service ${XCASH_DPOPS_SRV}.service

	ENABLED_SERVICES=$(systemctl list-unit-files --state=enabled | grep -wc "${MONGODB_SRV}.service\|${XCASH_DAEMON_SRV}.service\|${XCASH_WALLET_SRV}.timer\|${XCASH_DPOPS_SRV}.timer")
	DISABLED_SERVICES=$(systemctl list-unit-files --state=disabled | grep -wc "${XCASH_WALLET_SRV}.service\|${XCASH_DPOPS_SRV}.service")

	if (( ENABLED_SERVICES == 4 )) && (( DISABLED_SERVICES == 2 )); then
        echo -e "${COLOR_PRINT_GREEN}done${END_COLOR_PRINT}"
    else
        echo -e "${COLOR_PRINT_RED}failed${END_COLOR_PRINT}"
    fi
}

function disable_services_autostart(){
    echo
    echo -e "${COLOR_PRINT_GREEN}Disabling services autostart...${END_COLOR_PRINT}"
    systemctl disable ${XCASH_WALLET_SRV}.service ${XCASH_DPOPS_SRV}.service ${MONGODB_SRV}.service ${XCASH_DAEMON_SRV}.service ${XCASH_WALLET_SRV}.timer ${XCASH_DPOPS_SRV}.timer
	DISABLED_SERVICES=$(systemctl list-unit-files --state=disabled | grep -wc "${XCASH_WALLET_SRV}.service\|${XCASH_DPOPS_SRV}.service\|${MONGODB_SRV}.service\|${XCASH_DAEMON_SRV}.service\|${XCASH_WALLET_SRV}.timer\|${XCASH_DPOPS_SRV}.timer")

	if (( DISABLED_SERVICES == 6 )); then
        echo -e "${COLOR_PRINT_GREEN}done${END_COLOR_PRINT}"
    else
        echo -e "${COLOR_PRINT_RED}failed${END_COLOR_PRINT}"
    fi


}

function check_repositories_status(){
	XHOME=$(eval echo "~$USER")
	echo
  echo "Check if repos are up to date:"
	(cd $XHOME/xcash-official/xcash-dpops && [ $(git rev-parse HEAD) = $(git ls-remote $(git rev-parse --abbrev-ref @{u} | sed 's/\// /g') | cut -f1) ] \
	&& echo -e ${COLOR_PRINT_GREEN}xcash-dpops is up to date${END_COLOR_PRINT} || echo -e ${COLOR_PRINT_RED}xcash-dpops is not up to date${END_COLOR_PRINT}  \
	&& cd $XHOME/xcash-official/xcash-core && [ $(git rev-parse HEAD) = $(git ls-remote $(git rev-parse --abbrev-ref @{u} | sed 's/\// /g') | cut -f1) ] \
	&& echo -e ${COLOR_PRINT_GREEN}xcash-core is up to date${END_COLOR_PRINT} || echo -e ${COLOR_PRINT_RED}xcash-core is not up to date${END_COLOR_PRINT})
	echo
}


function get_overview(){
	check_services_status
	check_height
	get_node_balance
	shared_delegates_website_statistics
	check_repositories_status
	echo
}


while [ "$1" != "" ]; do
    case $1 in
        -s | --status | --overview )    get_overview
					exit
    esac
    shift
done


select opt in "${options[@]}"; do
	case $opt in
		"Check blockchain height") check_height ;;
		"Get node balance") get_node_balance ;;
		"Get node statistics") shared_delegates_website_statistics;;
		"Check services status") check_services_status ;;
   	"Start stopped services") start_stopped_services ;;
		"Stop all services") stop_all_services ;;
   	"Restart all services") restart_all_services ;;
    "Enable services autostart") enable_services_autostart ;;
    "Disable services autostart") disable_services_autostart ;;
    "Get X-Cash DPoPS log") get_xcash_dpops_log ;;
   	"Get X-Cash Daemon log") get_xcash_daemon_log ;;
   	"Get X-Cash RPC Wallet log") get_xcash_wallet_log ;;
        "Check X-Cash DPoPS log for malfunctioning block verifiers") check_xcash_dpops_log_for_malfunctioning_block_verifiers ;;
        "Check X-Cash DPoPS log for shared delegate errors") check_xcash_dpops_log_for_shared_delegate_errors ;;
		"Check if repositories are up to date") check_repositories_status ;;
		"Quit") break ;;

		*) echo && echo "Invalid option \"$REPLY\"";;
	esac
done
